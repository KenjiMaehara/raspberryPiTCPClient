
RemoteControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00802000  00002f48  00002fdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000cd  0080213e  0080213e  0000311a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000311a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c8  00000000  00000000  0000314a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006863  00000000  00000000  00003512  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce9  00000000  00000000  00009d75  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016d4  00000000  00000000  0000aa5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b1c  00000000  00000000  0000c134  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d3b  00000000  00000000  0000cc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002986  00000000  00000000  0000e98b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f0  00000000  00000000  00011311  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
       c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_3>
      10:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      14:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      18:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      20:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      24:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      28:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      2c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      30:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      34:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      38:	0c 94 97 06 	jmp	0xd2e	; 0xd2e <__vector_14>
      3c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      40:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      44:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      48:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      4c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      50:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      54:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      58:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      5c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      60:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      64:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      68:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      6c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      70:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      74:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      78:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      7c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      80:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      84:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      88:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      8c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      90:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      94:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      98:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      9c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
      fc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     100:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     104:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     108:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     10c:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__vector_67>
     110:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     114:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     118:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     11c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     120:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     124:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     128:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     12c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     130:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     134:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     138:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     13c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     140:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     144:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     148:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     14c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     150:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     154:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     158:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     15c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     160:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     164:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     168:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     16c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     170:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     174:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     178:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     17c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     180:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     184:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     188:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     18c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     190:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     194:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     198:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     19c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1a0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1a4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1a8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1ac:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1b0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1b4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1b8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1bc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1c0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1c4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1c8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1cc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1d0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1d4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1d8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1dc:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1e0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1e4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1e8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1ec:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1f0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1f4:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>
     1f8:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e8 e4       	ldi	r30, 0x48	; 72
     210:	ff e2       	ldi	r31, 0x2F	; 47
     212:	00 e0       	ldi	r16, 0x00	; 0
     214:	0b bf       	out	0x3b, r16	; 59
     216:	02 c0       	rjmp	.+4      	; 0x21c <__do_copy_data+0x14>
     218:	07 90       	elpm	r0, Z+
     21a:	0d 92       	st	X+, r0
     21c:	ae 33       	cpi	r26, 0x3E	; 62
     21e:	b1 07       	cpc	r27, r17
     220:	d9 f7       	brne	.-10     	; 0x218 <__do_copy_data+0x10>

00000222 <__do_clear_bss>:
     222:	22 e2       	ldi	r18, 0x22	; 34
     224:	ae e3       	ldi	r26, 0x3E	; 62
     226:	b1 e2       	ldi	r27, 0x21	; 33
     228:	01 c0       	rjmp	.+2      	; 0x22c <.do_clear_bss_start>

0000022a <.do_clear_bss_loop>:
     22a:	1d 92       	st	X+, r1

0000022c <.do_clear_bss_start>:
     22c:	ab 30       	cpi	r26, 0x0B	; 11
     22e:	b2 07       	cpc	r27, r18
     230:	e1 f7       	brne	.-8      	; 0x22a <.do_clear_bss_loop>
     232:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <main>
     236:	0c 94 a2 17 	jmp	0x2f44	; 0x2f44 <_exit>

0000023a <__bad_interrupt>:
     23a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023e <cc1100_init>:
				void (*read)(u8* data, u16 len),
				void (*select)(void),
				void (*deselect)(void),
				u16 (*read_somi)(void)
				)
{
     23e:	af 92       	push	r10
     240:	bf 92       	push	r11
     242:	cf 92       	push	r12
     244:	df 92       	push	r13
     246:	ef 92       	push	r14
     248:	ff 92       	push	r15
     24a:	0f 93       	push	r16
     24c:	1f 93       	push	r17
	mdelay = mili;
     24e:	80 93 4c 21 	sts	0x214C, r24
     252:	90 93 4d 21 	sts	0x214D, r25
	spi_write_single = write_single;
     256:	60 93 4a 21 	sts	0x214A, r22
     25a:	70 93 4b 21 	sts	0x214B, r23
	spi_read_single = read_single;
     25e:	40 93 48 21 	sts	0x2148, r20
     262:	50 93 49 21 	sts	0x2149, r21
	spi_write = write;
     266:	20 93 46 21 	sts	0x2146, r18
     26a:	30 93 47 21 	sts	0x2147, r19
	spi_read = read;
     26e:	00 93 44 21 	sts	0x2144, r16
     272:	10 93 45 21 	sts	0x2145, r17
	spi_select = select;
     276:	e0 92 42 21 	sts	0x2142, r14
     27a:	f0 92 43 21 	sts	0x2143, r15
	spi_deselect = deselect;
     27e:	c0 92 40 21 	sts	0x2140, r12
     282:	d0 92 41 21 	sts	0x2141, r13
	spi_read_somi = read_somi;
     286:	a0 92 3e 21 	sts	0x213E, r10
     28a:	b0 92 3f 21 	sts	0x213F, r11
	
	//spi_init();
	spi_select();
     28e:	f7 01       	movw	r30, r14
     290:	09 95       	icall
	spi_deselect();
     292:	e0 91 40 21 	lds	r30, 0x2140
     296:	f0 91 41 21 	lds	r31, 0x2141
     29a:	09 95       	icall
	spi_select();
     29c:	e0 91 42 21 	lds	r30, 0x2142
     2a0:	f0 91 43 21 	lds	r31, 0x2143
     2a4:	09 95       	icall
	spi_deselect();
     2a6:	e0 91 40 21 	lds	r30, 0x2140
     2aa:	f0 91 41 21 	lds	r31, 0x2141
     2ae:	09 95       	icall
	mdelay(1);
     2b0:	e0 91 4c 21 	lds	r30, 0x214C
     2b4:	f0 91 4d 21 	lds	r31, 0x214D
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	09 95       	icall
	//_delay_ms(1);
	spi_select();
     2be:	e0 91 42 21 	lds	r30, 0x2142
     2c2:	f0 91 43 21 	lds	r31, 0x2143
     2c6:	09 95       	icall
	while (spi_read_somi()) ;
     2c8:	e0 91 3e 21 	lds	r30, 0x213E
     2cc:	f0 91 3f 21 	lds	r31, 0x213F
     2d0:	09 95       	icall
     2d2:	89 2b       	or	r24, r25
     2d4:	c9 f7       	brne	.-14     	; 0x2c8 <cc1100_init+0x8a>
	spi_write_single(CC1100_STROBE_SRES | CC1100_ACCESS_STROBE);
     2d6:	e0 91 4a 21 	lds	r30, 0x214A
     2da:	f0 91 4b 21 	lds	r31, 0x214B
     2de:	80 e3       	ldi	r24, 0x30	; 48
     2e0:	09 95       	icall
	while (spi_read_somi()) ;
     2e2:	e0 91 3e 21 	lds	r30, 0x213E
     2e6:	f0 91 3f 21 	lds	r31, 0x213F
     2ea:	09 95       	icall
     2ec:	89 2b       	or	r24, r25
     2ee:	c9 f7       	brne	.-14     	; 0x2e2 <cc1100_init+0xa4>
	spi_deselect();
     2f0:	e0 91 40 21 	lds	r30, 0x2140
     2f4:	f0 91 41 21 	lds	r31, 0x2141
     2f8:	09 95       	icall

	mdelay(1);
     2fa:	e0 91 4c 21 	lds	r30, 0x214C
     2fe:	f0 91 4d 21 	lds	r31, 0x214D
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	09 95       	icall
	//setup 426.361755MHz
	cc1100_write_reg(CC1100_REG_FREQ2, 0x10);
	cc1100_write_reg(CC1100_REG_FREQ1, 0x66);
	cc1100_write_reg(CC1100_REG_FREQ0, 0x07);
#endif
}
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	df 90       	pop	r13
     312:	cf 90       	pop	r12
     314:	bf 90       	pop	r11
     316:	af 90       	pop	r10
     318:	08 95       	ret

0000031a <cc1100_read_reg>:

u8 cc1100_read_reg(u8 addr)
{
     31a:	cf 93       	push	r28
     31c:	c8 2f       	mov	r28, r24
	u8 reg;
	spi_select();
     31e:	e0 91 42 21 	lds	r30, 0x2142
     322:	f0 91 43 21 	lds	r31, 0x2143
     326:	09 95       	icall
	spi_write_single(addr | CC1100_ACCESS_READ);
     328:	e0 91 4a 21 	lds	r30, 0x214A
     32c:	f0 91 4b 21 	lds	r31, 0x214B
     330:	8c 2f       	mov	r24, r28
     332:	80 68       	ori	r24, 0x80	; 128
     334:	09 95       	icall
	reg = spi_read_single();
     336:	e0 91 48 21 	lds	r30, 0x2148
     33a:	f0 91 49 21 	lds	r31, 0x2149
     33e:	09 95       	icall
     340:	c8 2f       	mov	r28, r24
	spi_deselect();
     342:	e0 91 40 21 	lds	r30, 0x2140
     346:	f0 91 41 21 	lds	r31, 0x2141
     34a:	09 95       	icall
	return reg;
}
     34c:	8c 2f       	mov	r24, r28
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <cc1100_write_reg>:

void cc1100_write_reg(u8 addr, u8 value)
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	d8 2f       	mov	r29, r24
     358:	c6 2f       	mov	r28, r22
	spi_select();
     35a:	e0 91 42 21 	lds	r30, 0x2142
     35e:	f0 91 43 21 	lds	r31, 0x2143
     362:	09 95       	icall
	spi_write_single(addr | CC1100_ACCESS_WRITE);
     364:	e0 91 4a 21 	lds	r30, 0x214A
     368:	f0 91 4b 21 	lds	r31, 0x214B
     36c:	8d 2f       	mov	r24, r29
     36e:	09 95       	icall
	spi_write_single(value);
     370:	e0 91 4a 21 	lds	r30, 0x214A
     374:	f0 91 4b 21 	lds	r31, 0x214B
     378:	8c 2f       	mov	r24, r28
     37a:	09 95       	icall
	spi_deselect();
     37c:	e0 91 40 21 	lds	r30, 0x2140
     380:	f0 91 41 21 	lds	r31, 0x2141
     384:	09 95       	icall
}
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <cc1100_strobe_cmd>:

u8 cc1100_strobe_cmd(u8 cmd)
{
     38c:	cf 93       	push	r28
     38e:	c8 2f       	mov	r28, r24
	u8 ret;
	spi_select();
     390:	e0 91 42 21 	lds	r30, 0x2142
     394:	f0 91 43 21 	lds	r31, 0x2143
     398:	09 95       	icall
	while(spi_read_somi());
     39a:	e0 91 3e 21 	lds	r30, 0x213E
     39e:	f0 91 3f 21 	lds	r31, 0x213F
     3a2:	09 95       	icall
     3a4:	89 2b       	or	r24, r25
     3a6:	c9 f7       	brne	.-14     	; 0x39a <cc1100_strobe_cmd+0xe>
	ret = spi_write_single(cmd | CC1100_ACCESS_STROBE);
     3a8:	e0 91 4a 21 	lds	r30, 0x214A
     3ac:	f0 91 4b 21 	lds	r31, 0x214B
     3b0:	8c 2f       	mov	r24, r28
     3b2:	09 95       	icall
     3b4:	c8 2f       	mov	r28, r24
	spi_deselect();
     3b6:	e0 91 40 21 	lds	r30, 0x2140
     3ba:	f0 91 41 21 	lds	r31, 0x2141
     3be:	09 95       	icall
	return ret;
}
     3c0:	8c 2f       	mov	r24, r28
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <cc1100_fifo_put>:
	ret = spi_write_single(cmd | CC1100_ACCESS_STROBE);
	return ret;
}

void cc1100_fifo_put(u8* buffer, u16 length)
{
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ec 01       	movw	r28, r24
     3d0:	8b 01       	movw	r16, r22
  spi_select();
     3d2:	e0 91 42 21 	lds	r30, 0x2142
     3d6:	f0 91 43 21 	lds	r31, 0x2143
     3da:	09 95       	icall
  spi_write_single(CC1100_DATA_FIFO_ADDR | CC1100_ACCESS_WRITE_BURST);
     3dc:	e0 91 4a 21 	lds	r30, 0x214A
     3e0:	f0 91 4b 21 	lds	r31, 0x214B
     3e4:	8f e7       	ldi	r24, 0x7F	; 127
     3e6:	09 95       	icall
  spi_write(buffer, length);
     3e8:	e0 91 46 21 	lds	r30, 0x2146
     3ec:	f0 91 47 21 	lds	r31, 0x2147
     3f0:	b8 01       	movw	r22, r16
     3f2:	ce 01       	movw	r24, r28
     3f4:	09 95       	icall
  spi_deselect();
     3f6:	e0 91 40 21 	lds	r30, 0x2140
     3fa:	f0 91 41 21 	lds	r31, 0x2141
     3fe:	09 95       	icall
}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	08 95       	ret

0000040a <cc1100_fifo_get>:

void cc1100_fifo_get(u8* buffer, u16 length)
{
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
     414:	8b 01       	movw	r16, r22
	spi_select();
     416:	e0 91 42 21 	lds	r30, 0x2142
     41a:	f0 91 43 21 	lds	r31, 0x2143
     41e:	09 95       	icall
	spi_write_single(CC1100_DATA_FIFO_ADDR | CC1100_ACCESS_READ_BURST);
     420:	e0 91 4a 21 	lds	r30, 0x214A
     424:	f0 91 4b 21 	lds	r31, 0x214B
     428:	8f ef       	ldi	r24, 0xFF	; 255
     42a:	09 95       	icall
	spi_read(buffer, length);
     42c:	e0 91 44 21 	lds	r30, 0x2144
     430:	f0 91 45 21 	lds	r31, 0x2145
     434:	b8 01       	movw	r22, r16
     436:	ce 01       	movw	r24, r28
     438:	09 95       	icall
	spi_deselect();
     43a:	e0 91 40 21 	lds	r30, 0x2140
     43e:	f0 91 41 21 	lds	r31, 0x2141
     442:	09 95       	icall
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	08 95       	ret

0000044e <cc1100_read_status>:

u8 cc1100_read_status(u8 addr)
{
	u8 temp;

	temp = cc1100_read_reg(addr | CC1100_ACCESS_STATUS);
     44e:	80 6c       	ori	r24, 0xC0	; 192
     450:	0e 94 8d 01 	call	0x31a	; 0x31a <cc1100_read_reg>

	return temp;
}
     454:	08 95       	ret

00000456 <cc1100_cmd_idle>:
	while(status  != STATE_IDLE );
}

void cc1100_cmd_idle(void)
{
	switch ((cc1100_cmd_nop() >> 4) & 0x7)
     456:	8d e3       	ldi	r24, 0x3D	; 61
     458:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
     45c:	82 95       	swap	r24
     45e:	8f 70       	andi	r24, 0x0F	; 15
     460:	87 70       	andi	r24, 0x07	; 7
     462:	86 30       	cpi	r24, 0x06	; 6
     464:	19 f0       	breq	.+6      	; 0x46c <cc1100_cmd_idle+0x16>
     466:	87 30       	cpi	r24, 0x07	; 7
     468:	29 f0       	breq	.+10     	; 0x474 <cc1100_cmd_idle+0x1e>
     46a:	08 c0       	rjmp	.+16     	; 0x47c <cc1100_cmd_idle+0x26>
	{
		case STATE_RXOVER:
			cc1100_cmd_flush_rx();
     46c:	8a e3       	ldi	r24, 0x3A	; 58
     46e:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
			break;
     472:	07 c0       	rjmp	.+14     	; 0x482 <cc1100_cmd_idle+0x2c>
		case STATE_TXUNDER:
			cc1100_cmd_flush_tx();
     474:	8b e3       	ldi	r24, 0x3B	; 59
     476:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
			break;
     47a:	03 c0       	rjmp	.+6      	; 0x482 <cc1100_cmd_idle+0x2c>
		default:
		cc1100_strobe_cmd(CC1100_STROBE_SIDLE);
     47c:	86 e3       	ldi	r24, 0x36	; 54
     47e:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
	}
	WAIT_STATUS(STATE_IDLE);
     482:	8d e3       	ldi	r24, 0x3D	; 61
     484:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
     488:	82 95       	swap	r24
     48a:	8f 70       	andi	r24, 0x0F	; 15
     48c:	87 70       	andi	r24, 0x07	; 7
     48e:	c9 f7       	brne	.-14     	; 0x482 <cc1100_cmd_idle+0x2c>
}
     490:	08 95       	ret

00000492 <cc1100_cmd_calibrate>:
	while ( ((cc1100_cmd_nop()>>4) & 0x7) != status) ;

void cc1100_cmd_calibrate(void)
{
	u8 status;
	cc1100_cmd_idle();
     492:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
	cc1100_strobe_cmd(CC1100_STROBE_SCAL);
     496:	83 e3       	ldi	r24, 0x33	; 51
     498:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>

	do
	{
		status = ((cc1100_cmd_nop()>>4) & 0x7);
     49c:	8d e3       	ldi	r24, 0x3D	; 61
     49e:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
     4a2:	82 95       	swap	r24
     4a4:	8f 70       	andi	r24, 0x0F	; 15
     4a6:	87 70       	andi	r24, 0x07	; 7
	}
	while(status  != STATE_IDLE );
     4a8:	c9 f7       	brne	.-14     	; 0x49c <cc1100_cmd_calibrate+0xa>
}
     4aa:	08 95       	ret

000004ac <cc1101_init_reg>:
					{CC1100_REG_MDMCFG4,0xF8},
					{CC1100_REG_AGCCTRL1,0x50},
				};

void cc1101_init_reg(void)
{
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	c1 e0       	ldi	r28, 0x01	; 1
     4b6:	d0 e2       	ldi	r29, 0x20	; 32
     4b8:	05 e1       	ldi	r16, 0x15	; 21
     4ba:	10 e2       	ldi	r17, 0x20	; 32
     4bc:	fe 01       	movw	r30, r28
     4be:	31 97       	sbiw	r30, 0x01	; 1
	u8 i;

	for(i = 0 ;i < 10 ; i++) 
	{ 
		cc1100_write_reg(init_all[i].addr,init_all[i].data);
     4c0:	68 81       	ld	r22, Y
     4c2:	80 81       	ld	r24, Z
     4c4:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
     4c8:	22 96       	adiw	r28, 0x02	; 2

void cc1101_init_reg(void)
{
	u8 i;

	for(i = 0 ;i < 10 ; i++) 
     4ca:	c0 17       	cp	r28, r16
     4cc:	d1 07       	cpc	r29, r17
     4ce:	b1 f7       	brne	.-20     	; 0x4bc <cc1101_init_reg+0x10>
	{ 
		cc1100_write_reg(init_all[i].addr,init_all[i].data);
	} 
}
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <cc1101_rtx_reg_set>:

void cc1101_rtx_reg_set(u8 rtx)
{
     4da:	cf 93       	push	r28
     4dc:	c8 2f       	mov	r28, r24
	cc1101_init_reg();
     4de:	0e 94 56 02 	call	0x4ac	; 0x4ac <cc1101_init_reg>
	cc1100_write_reg(CC1100_REG_PKTCTRL1,rtx == 1 ? 0x0c : 0x04);
     4e2:	c1 30       	cpi	r28, 0x01	; 1
     4e4:	11 f4       	brne	.+4      	; 0x4ea <cc1101_rtx_reg_set+0x10>
     4e6:	6c e0       	ldi	r22, 0x0C	; 12
     4e8:	01 c0       	rjmp	.+2      	; 0x4ec <cc1101_rtx_reg_set+0x12>
     4ea:	64 e0       	ldi	r22, 0x04	; 4
     4ec:	87 e0       	ldi	r24, 0x07	; 7
     4ee:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
}
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <cc1101_8PATABLE_write_reg>:


void cc1101_8PATABLE_write_reg(void)
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
	u8 i;

	spi_select();
     4fe:	e0 91 42 21 	lds	r30, 0x2142
     502:	f0 91 43 21 	lds	r31, 0x2143
     506:	09 95       	icall
	spi_write_single(0x3e | CC1100_ACCESS_WRITE_BURST);
     508:	e0 91 4a 21 	lds	r30, 0x214A
     50c:	f0 91 4b 21 	lds	r31, 0x214B
     510:	8e e7       	ldi	r24, 0x7E	; 126
     512:	09 95       	icall
     514:	c6 e1       	ldi	r28, 0x16	; 22
     516:	d0 e2       	ldi	r29, 0x20	; 32
     518:	0e e1       	ldi	r16, 0x1E	; 30
     51a:	10 e2       	ldi	r17, 0x20	; 32
	for(i=0;i<8;i++)
	{
		spi_write_single(pt_data[i]);
     51c:	e0 91 4a 21 	lds	r30, 0x214A
     520:	f0 91 4b 21 	lds	r31, 0x214B
     524:	89 91       	ld	r24, Y+
     526:	09 95       	icall
{
	u8 i;

	spi_select();
	spi_write_single(0x3e | CC1100_ACCESS_WRITE_BURST);
	for(i=0;i<8;i++)
     528:	c0 17       	cp	r28, r16
     52a:	d1 07       	cpc	r29, r17
     52c:	b9 f7       	brne	.-18     	; 0x51c <cc1101_8PATABLE_write_reg+0x26>
	{
		spi_write_single(pt_data[i]);
	}
	spi_deselect();
     52e:	e0 91 40 21 	lds	r30, 0x2140
     532:	f0 91 41 21 	lds	r31, 0x2141
     536:	09 95       	icall
}
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	0f 91       	pop	r16
     540:	08 95       	ret

00000542 <tx_fifo_write>:


void tx_fifo_write(u8 * data,u8 length)
{
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	16 2f       	mov	r17, r22
	data[0] = length;
     54c:	68 83       	st	Y, r22
	cc1100_fifo_put(data,1);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <cc1100_fifo_put>
	cc1100_fifo_put(data,length);
     556:	61 2f       	mov	r22, r17
     558:	70 e0       	ldi	r23, 0x00	; 0
     55a:	ce 01       	movw	r24, r28
     55c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <cc1100_fifo_put>
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	08 95       	ret

00000568 <rx_fifo_read>:


u8 rx_fifo_read(u8 * data,u8 * rssi, u8 * lqi)
{
     568:	cf 92       	push	r12
     56a:	df 92       	push	r13
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	1f 92       	push	r1
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	6c 01       	movw	r12, r24
     580:	7b 01       	movw	r14, r22
     582:	8a 01       	movw	r16, r20
	u8 length;

	cc1100_fifo_get(&length,1);
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	ce 01       	movw	r24, r28
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	0e 94 05 02 	call	0x40a	; 0x40a <cc1100_fifo_get>

	cc1100_fifo_get(data,length);
     590:	69 81       	ldd	r22, Y+1	; 0x01
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	c6 01       	movw	r24, r12
     596:	0e 94 05 02 	call	0x40a	; 0x40a <cc1100_fifo_get>

	cc1100_fifo_get(rssi,1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	c7 01       	movw	r24, r14
     5a0:	0e 94 05 02 	call	0x40a	; 0x40a <cc1100_fifo_get>
	cc1100_fifo_get(lqi,1);
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	70 e0       	ldi	r23, 0x00	; 0
     5a8:	c8 01       	movw	r24, r16
     5aa:	0e 94 05 02 	call	0x40a	; 0x40a <cc1100_fifo_get>

	return length;

	//return length - 2;
}
     5ae:	89 81       	ldd	r24, Y+1	; 0x01
     5b0:	0f 90       	pop	r0
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	08 95       	ret

000005c4 <cc1101_set_freq>:



void cc1101_set_freq(u16 frq)
{
	cc1101_freq	= frq;
     5c4:	80 93 4e 21 	sts	0x214E, r24
     5c8:	90 93 4f 21 	sts	0x214F, r25
     5cc:	08 95       	ret

000005ce <cc1101_carrier_wave_setup>:



void cc1101_carrier_wave_setup(void)
{
	cc1100_write_reg(CC1100_REG_FREQ2, 0x10);
     5ce:	60 e1       	ldi	r22, 0x10	; 16
     5d0:	8d e0       	ldi	r24, 0x0D	; 13
     5d2:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_FREQ1, (cc1101_freq >> 8)  & 0xff);
     5d6:	60 91 4f 21 	lds	r22, 0x214F
     5da:	8e e0       	ldi	r24, 0x0E	; 14
     5dc:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_FREQ0, cc1101_freq & 0xff);
     5e0:	60 91 4e 21 	lds	r22, 0x214E
     5e4:	8f e0       	ldi	r24, 0x0F	; 15
     5e6:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
     5ea:	08 95       	ret

000005ec <crc8>:
u8 crc8( u8 *data , long size )  
{  
    long lp;
    u8 crc = 0;

	for( lp = 0; lp < size; lp++ )
     5ec:	14 16       	cp	r1, r20
     5ee:	15 06       	cpc	r1, r21
     5f0:	16 06       	cpc	r1, r22
     5f2:	17 06       	cpc	r1, r23
     5f4:	7c f4       	brge	.+30     	; 0x614 <crc8+0x28>
     5f6:	fc 01       	movw	r30, r24
     5f8:	48 0f       	add	r20, r24
     5fa:	59 1f       	adc	r21, r25


u8 crc8( u8 *data , long size )  
{  
    long lp;
    u8 crc = 0;
     5fc:	80 e0       	ldi	r24, 0x00	; 0

	for( lp = 0; lp < size; lp++ )
	{
		 crc = crc8_table[ crc ^ data[lp] ] ;
     5fe:	a1 91       	ld	r26, Z+
     600:	8a 27       	eor	r24, r26
     602:	a8 2f       	mov	r26, r24
     604:	b0 e0       	ldi	r27, 0x00	; 0
     606:	a2 5c       	subi	r26, 0xC2	; 194
     608:	bf 4d       	sbci	r27, 0xDF	; 223
     60a:	8c 91       	ld	r24, X
u8 crc8( u8 *data , long size )  
{  
    long lp;
    u8 crc = 0;

	for( lp = 0; lp < size; lp++ )
     60c:	e4 17       	cp	r30, r20
     60e:	f5 07       	cpc	r31, r21
     610:	b1 f7       	brne	.-20     	; 0x5fe <crc8+0x12>
     612:	08 95       	ret


u8 crc8( u8 *data , long size )  
{  
    long lp;
    u8 crc = 0;
     614:	80 e0       	ldi	r24, 0x00	; 0
	{
		 crc = crc8_table[ crc ^ data[lp] ] ;
	}
    
    return crc;
} 
     616:	08 95       	ret

00000618 <env_save>:
		eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
	}
}

void env_save(env_t * env)
{
     618:	cf 93       	push	r28
     61a:	df 93       	push	r29
     61c:	ec 01       	movw	r28, r24
	u8 * pBuf= (u8 *)env;
	
	eeprom_update_block((const void*)env,(void*) 0x400,sizeof(env_t));
     61e:	4c e0       	ldi	r20, 0x0C	; 12
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	60 e0       	ldi	r22, 0x00	; 0
     624:	74 e0       	ldi	r23, 0x04	; 4
     626:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__eeupd_block_x64a3u>
	eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
     62a:	4c e0       	ldi	r20, 0x0C	; 12
     62c:	50 e0       	ldi	r21, 0x00	; 0
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	ce 01       	movw	r24, r28
     634:	0e 94 f6 02 	call	0x5ec	; 0x5ec <crc8>
     638:	68 2f       	mov	r22, r24
     63a:	8c e0       	ldi	r24, 0x0C	; 12
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	0e 94 76 17 	call	0x2eec	; 0x2eec <__eewr_byte_x64a3u>
}
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <env_default>:

void env_default(env_t * env)
{
	int i;

	memset(env,0,sizeof(env_t));
     648:	2c e0       	ldi	r18, 0x0C	; 12
     64a:	fc 01       	movw	r30, r24
     64c:	11 92       	st	Z+, r1
     64e:	2a 95       	dec	r18
     650:	e9 f7       	brne	.-6      	; 0x64c <env_default+0x4>
	
	env->id = 0xffffffff;
     652:	4f ef       	ldi	r20, 0xFF	; 255
     654:	5f ef       	ldi	r21, 0xFF	; 255
     656:	ba 01       	movw	r22, r20
     658:	fc 01       	movw	r30, r24
     65a:	44 83       	std	Z+4, r20	; 0x04
     65c:	55 83       	std	Z+5, r21	; 0x05
     65e:	66 83       	std	Z+6, r22	; 0x06
     660:	77 83       	std	Z+7, r23	; 0x07
     662:	08 95       	ret

00000664 <env_init>:
} 



void env_init()
{
     664:	cf 93       	push	r28
	u8 crc;
	u8 * pBuf;
	
	eeprom_read_block((void*)&gEnv,(void*) 0x400,sizeof(env_t));
     666:	4c e0       	ldi	r20, 0x0C	; 12
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	74 e0       	ldi	r23, 0x04	; 4
     66e:	82 ed       	ldi	r24, 0xD2	; 210
     670:	91 e2       	ldi	r25, 0x21	; 33
     672:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__eerd_block_x64a3u>
	
	crc = eeprom_read_byte((void *)0x400 + sizeof(env_t));
     676:	8c e0       	ldi	r24, 0x0C	; 12
     678:	94 e0       	ldi	r25, 0x04	; 4
     67a:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__eerd_byte_x64a3u>
     67e:	c8 2f       	mov	r28, r24
	
	
	pBuf = (u8 *)&gEnv;
	
	if(crc != crc8(pBuf,sizeof(env_t)))
     680:	4c e0       	ldi	r20, 0x0C	; 12
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	60 e0       	ldi	r22, 0x00	; 0
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	82 ed       	ldi	r24, 0xD2	; 210
     68a:	91 e2       	ldi	r25, 0x21	; 33
     68c:	0e 94 f6 02 	call	0x5ec	; 0x5ec <crc8>
     690:	8c 17       	cp	r24, r28
     692:	c9 f0       	breq	.+50     	; 0x6c6 <env_init+0x62>
	{
		env_default(&gEnv);
     694:	82 ed       	ldi	r24, 0xD2	; 210
     696:	91 e2       	ldi	r25, 0x21	; 33
     698:	0e 94 24 03 	call	0x648	; 0x648 <env_default>
		eeprom_update_block((const void*)&gEnv,(void*) 0x400,sizeof(env_t));
     69c:	4c e0       	ldi	r20, 0x0C	; 12
     69e:	50 e0       	ldi	r21, 0x00	; 0
     6a0:	60 e0       	ldi	r22, 0x00	; 0
     6a2:	74 e0       	ldi	r23, 0x04	; 4
     6a4:	82 ed       	ldi	r24, 0xD2	; 210
     6a6:	91 e2       	ldi	r25, 0x21	; 33
     6a8:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__eeupd_block_x64a3u>
		eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
     6ac:	4c e0       	ldi	r20, 0x0C	; 12
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	70 e0       	ldi	r23, 0x00	; 0
     6b4:	82 ed       	ldi	r24, 0xD2	; 210
     6b6:	91 e2       	ldi	r25, 0x21	; 33
     6b8:	0e 94 f6 02 	call	0x5ec	; 0x5ec <crc8>
     6bc:	68 2f       	mov	r22, r24
     6be:	8c e0       	ldi	r24, 0x0C	; 12
     6c0:	94 e0       	ldi	r25, 0x04	; 4
     6c2:	0e 94 76 17 	call	0x2eec	; 0x2eec <__eewr_byte_x64a3u>
	}
}
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <tele_env_default>:


	
	
tele_env_default(tele_env_t	* tele_env)
{
     6ca:	fc 01       	movw	r30, r24

	tele_env->ctl_data.adj_freq = 0x24;
     6cc:	84 e2       	ldi	r24, 0x24	; 36
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	80 83       	st	Z, r24
     6d2:	91 83       	std	Z+1, r25	; 0x01
	tele_env->ctl_data.freq_add_sub = 0x80;
     6d4:	20 e8       	ldi	r18, 0x80	; 128
     6d6:	22 83       	std	Z+2, r18	; 0x02
	tele_env->ctl_data.adj_temper = 0x18;
     6d8:	88 e1       	ldi	r24, 0x18	; 24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	86 83       	std	Z+6, r24	; 0x06
     6de:	97 83       	std	Z+7, r25	; 0x07
	tele_env->ctl_data.temper_add_sub =0x80;
     6e0:	20 87       	std	Z+8, r18	; 0x08
	tele_env->ctl_data.reg[0] = 0x00;
     6e2:	13 82       	std	Z+3, r1	; 0x03
	tele_env->ctl_data.reg[1] = 0x00;
     6e4:	14 82       	std	Z+4, r1	; 0x04
	tele_env->ctl_data.reg[2] = 0x00;
     6e6:	15 82       	std	Z+5, r1	; 0x05
     6e8:	39 96       	adiw	r30, 0x09	; 9
	for(int i=0;i<14;i++)
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
	{
		tele_env->ctl_data.eprom_level[i] = 0x00;
     6ee:	11 92       	st	Z+, r1
     6f0:	11 92       	st	Z+, r1
	tele_env->ctl_data.adj_temper = 0x18;
	tele_env->ctl_data.temper_add_sub =0x80;
	tele_env->ctl_data.reg[0] = 0x00;
	tele_env->ctl_data.reg[1] = 0x00;
	tele_env->ctl_data.reg[2] = 0x00;
	for(int i=0;i<14;i++)
     6f2:	2f 5f       	subi	r18, 0xFF	; 255
     6f4:	3f 4f       	sbci	r19, 0xFF	; 255
     6f6:	2e 30       	cpi	r18, 0x0E	; 14
     6f8:	31 05       	cpc	r19, r1
     6fa:	c9 f7       	brne	.-14     	; 0x6ee <tele_env_default+0x24>
	{
		tele_env->ctl_data.eprom_level[i] = 0x00;
	}
}
     6fc:	08 95       	ret

000006fe <tele_env_init>:


void tele_env_init()
{
     6fe:	cf 93       	push	r28
	u8 crc;
	u8 * pBuf;
	
	eeprom_read_block((void*)&gTele_env,(void*) 0x000,sizeof(tele_env_t));
     700:	47 e6       	ldi	r20, 0x67	; 103
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	8f e5       	ldi	r24, 0x5F	; 95
     70a:	91 e2       	ldi	r25, 0x21	; 33
     70c:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__eerd_block_x64a3u>
	
	crc = eeprom_read_byte((void *)0x000 + sizeof(tele_env_t));
     710:	87 e6       	ldi	r24, 0x67	; 103
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <__eerd_byte_x64a3u>
     718:	c8 2f       	mov	r28, r24
	
	
	pBuf = (u8 *)&gTele_env;
	
	if(crc != crc8(pBuf,sizeof(tele_env_t)))
     71a:	47 e6       	ldi	r20, 0x67	; 103
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	8f e5       	ldi	r24, 0x5F	; 95
     724:	91 e2       	ldi	r25, 0x21	; 33
     726:	0e 94 f6 02 	call	0x5ec	; 0x5ec <crc8>
     72a:	8c 17       	cp	r24, r28
     72c:	c9 f0       	breq	.+50     	; 0x760 <tele_env_init+0x62>
	{
		tele_env_default(&gTele_env);
     72e:	8f e5       	ldi	r24, 0x5F	; 95
     730:	91 e2       	ldi	r25, 0x21	; 33
     732:	0e 94 65 03 	call	0x6ca	; 0x6ca <tele_env_default>
		eeprom_update_block((const void*)&gTele_env,(void*) 0x000,sizeof(tele_env_t));
     736:	47 e6       	ldi	r20, 0x67	; 103
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	8f e5       	ldi	r24, 0x5F	; 95
     740:	91 e2       	ldi	r25, 0x21	; 33
     742:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__eeupd_block_x64a3u>
		eeprom_write_byte((void *)0x000 + sizeof(tele_env_t),crc8(pBuf,sizeof(tele_env_t)));
     746:	47 e6       	ldi	r20, 0x67	; 103
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	8f e5       	ldi	r24, 0x5F	; 95
     750:	91 e2       	ldi	r25, 0x21	; 33
     752:	0e 94 f6 02 	call	0x5ec	; 0x5ec <crc8>
     756:	68 2f       	mov	r22, r24
     758:	87 e6       	ldi	r24, 0x67	; 103
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 76 17 	call	0x2eec	; 0x2eec <__eewr_byte_x64a3u>
	}
}
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <tele_env_save>:

void tele_env_save(tele_env_t	* tele_env)
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	ec 01       	movw	r28, r24
	u8 * pBuf= (u8 *)tele_env;
	
	eeprom_update_block((const void*)tele_env,(void*) 0x000,sizeof(tele_env_t));
     76a:	47 e6       	ldi	r20, 0x67	; 103
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <__eeupd_block_x64a3u>
	eeprom_write_byte((void *)0x000 + sizeof(tele_env_t),crc8(pBuf,sizeof(tele_env_t)));
     776:	47 e6       	ldi	r20, 0x67	; 103
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	60 e0       	ldi	r22, 0x00	; 0
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	ce 01       	movw	r24, r28
     780:	0e 94 f6 02 	call	0x5ec	; 0x5ec <crc8>
     784:	68 2f       	mov	r22, r24
     786:	87 e6       	ldi	r24, 0x67	; 103
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 76 17 	call	0x2eec	; 0x2eec <__eewr_byte_x64a3u>
}
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	08 95       	ret

00000794 <delay_us>:

void delay_us(u8 time_us)		/* time delay for us(1~255 us) for 32MHz */
{
	register unsigned char i;

	for(i = 0; i < time_us; i++)			// 4 cycles
     794:	88 23       	and	r24, r24
     796:	c9 f0       	breq	.+50     	; 0x7ca <delay_us+0x36>
     798:	90 e0       	ldi	r25, 0x00	; 0
	{ asm volatile("PUSH R0");			// 1 cycles
     79a:	0f 92       	push	r0
		
		#if 1
		asm volatile("NOP    ");			// 1 cycles
     79c:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     79e:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     7a0:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     7a2:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     7a4:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     7a6:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     7a8:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     7aa:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     7ac:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     7ae:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     7b0:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     7b2:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     7b4:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     7b6:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     7b8:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     7ba:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     7bc:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     7be:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     7c0:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles = total 32 cycles
     7c2:	0f 90       	pop	r0

void delay_us(u8 time_us)		/* time delay for us(1~255 us) for 32MHz */
{
	register unsigned char i;

	for(i = 0; i < time_us; i++)			// 4 cycles
     7c4:	9f 5f       	subi	r25, 0xFF	; 255
     7c6:	98 13       	cpse	r25, r24
     7c8:	e8 cf       	rjmp	.-48     	; 0x79a <delay_us+0x6>
     7ca:	08 95       	ret

000007cc <delay_ms>:
		#endif
	}
}

void delay_ms(u16 time_ms)		/* time delay for ms(1~65535 ms) for 32MHz */
{
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	8c 01       	movw	r16, r24
	register unsigned int i;

	for(i = 0; i < time_ms; i++)
     7d6:	00 97       	sbiw	r24, 0x00	; 0
     7d8:	91 f0       	breq	.+36     	; 0x7fe <delay_ms+0x32>
     7da:	c0 e0       	ldi	r28, 0x00	; 0
     7dc:	d0 e0       	ldi	r29, 0x00	; 0
	{ 
		delay_us(250);
     7de:	8a ef       	ldi	r24, 0xFA	; 250
     7e0:	0e 94 ca 03 	call	0x794	; 0x794 <delay_us>
		delay_us(250);
     7e4:	8a ef       	ldi	r24, 0xFA	; 250
     7e6:	0e 94 ca 03 	call	0x794	; 0x794 <delay_us>
		delay_us(250);
     7ea:	8a ef       	ldi	r24, 0xFA	; 250
     7ec:	0e 94 ca 03 	call	0x794	; 0x794 <delay_us>
		delay_us(250);
     7f0:	8a ef       	ldi	r24, 0xFA	; 250
     7f2:	0e 94 ca 03 	call	0x794	; 0x794 <delay_us>

void delay_ms(u16 time_ms)		/* time delay for ms(1~65535 ms) for 32MHz */
{
	register unsigned int i;

	for(i = 0; i < time_ms; i++)
     7f6:	21 96       	adiw	r28, 0x01	; 1
     7f8:	c0 17       	cp	r28, r16
     7fa:	d1 07       	cpc	r29, r17
     7fc:	81 f7       	brne	.-32     	; 0x7de <delay_ms+0x12>
		delay_us(250);
		delay_us(250);
		delay_us(250);
		delay_us(250);
	}
}
     7fe:	df 91       	pop	r29
     800:	cf 91       	pop	r28
     802:	1f 91       	pop	r17
     804:	0f 91       	pop	r16
     806:	08 95       	ret

00000808 <setClockTo32MHz>:


void setClockTo32MHz() 
{
	CCP = CCP_IOREG_gc;              // disable register security for oscillator update
     808:	88 ed       	ldi	r24, 0xD8	; 216
     80a:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;       // enable 32MHz oscillator
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator to be ready
     812:	e0 e5       	ldi	r30, 0x50	; 80
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	81 81       	ldd	r24, Z+1	; 0x01
     818:	81 ff       	sbrs	r24, 1
     81a:	fd cf       	rjmp	.-6      	; 0x816 <setClockTo32MHz+0xe>
	CCP = CCP_IOREG_gc;              // disable register security for clock update
     81c:	88 ed       	ldi	r24, 0xD8	; 216
     81e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 40 00 	sts	0x0040, r24
     826:	08 95       	ret

00000828 <ReadSignatureByte>:
}


u8 ReadSignatureByte(u16 Address)
{
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     828:	aa ec       	ldi	r26, 0xCA	; 202
     82a:	b1 e0       	ldi	r27, 0x01	; 1
     82c:	22 e0       	ldi	r18, 0x02	; 2
     82e:	2c 93       	st	X, r18
	uint8_t Result;
	__asm__ ("lpm %0, Z\n" : "=r" (Result) : "z" (Address));
     830:	fc 01       	movw	r30, r24
     832:	84 91       	lpm	r24, Z
	//  __asm__ ("lpm \n  mov %0, r0 \n" : "=r" (Result) : "z" (Address) : "r0");
	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     834:	1c 92       	st	X, r1
	return Result;
}
     836:	08 95       	ret

00000838 <read_adc>:

u16 read_adc(void)
{
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
	u8 Waste;

	if ((ADCA.CTRLA & ADC_ENABLE_bm) == 0)
     83c:	80 91 00 02 	lds	r24, 0x0200
     840:	80 fd       	sbrc	r24, 0
     842:	1e c0       	rjmp	.+60     	; 0x880 <read_adc+0x48>
	{
		ADCA.CTRLA = ADC_ENABLE_bm ; // Enable the ADC
     844:	c0 e0       	ldi	r28, 0x00	; 0
     846:	d2 e0       	ldi	r29, 0x02	; 2
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	88 83       	st	Y, r24
		ADCA.CTRLB |= (1<<4); // Signed Mode?  pos neg?
     84c:	99 81       	ldd	r25, Y+1	; 0x01
     84e:	90 61       	ori	r25, 0x10	; 16
     850:	99 83       	std	Y+1, r25	; 0x01
		//ADCA.CTRLB |= (1<<3); // Continius Mode
		//ADCA.REFCTRL = 0; // Internal 1v ref
		ADCA.REFCTRL = 1; // Internal 1/6 v ref
     852:	8a 83       	std	Y+2, r24	; 0x02
		//ADCA.REFCTRL = 0x20; // PORTA AREF ref
		ADCA.EVCTRL = 0 ; // no events
     854:	1b 82       	std	Y+3, r1	; 0x03
		//ADCA.EVCTRL = (5<<3); // ADC5,6,7selected events
		ADCA.PRESCALER = ADC_PRESCALER_DIV128_gc ;
     856:	85 e0       	ldi	r24, 0x05	; 5
     858:	8c 83       	std	Y+4, r24	; 0x04
		//ADCA.PRESCALER = ADC_PRESCALER_DIV4_gc;
		//ADCA.PRESCALER = ADC_PRESCALER_DIV64_gc;
		
		ADCA.CALL = ReadSignatureByte(0x20) ; //ADC Calibration Byte 0
     85a:	80 e2       	ldi	r24, 0x20	; 32
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 14 04 	call	0x828	; 0x828 <ReadSignatureByte>
     862:	8c 87       	std	Y+12, r24	; 0x0c
		ADCA.CALH = ReadSignatureByte(0x21) ; //ADC Calibration Byte 1
     864:	81 e2       	ldi	r24, 0x21	; 33
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	0e 94 14 04 	call	0x828	; 0x828 <ReadSignatureByte>
     86c:	8d 87       	std	Y+13, r24	; 0x0d
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86e:	2f ef       	ldi	r18, 0xFF	; 255
     870:	89 ef       	ldi	r24, 0xF9	; 249
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	21 50       	subi	r18, 0x01	; 1
     876:	80 40       	sbci	r24, 0x00	; 0
     878:	90 40       	sbci	r25, 0x00	; 0
     87a:	e1 f7       	brne	.-8      	; 0x874 <read_adc+0x3c>
     87c:	00 c0       	rjmp	.+0      	; 0x87e <read_adc+0x46>
     87e:	00 00       	nop
		//ADCA.CALL = 0x00;		//test
		//ADCA.CALH = 0x0F;		//test
		_delay_ms(10);//OSTimeDlyHMSM(0,0,0,10); // Wait at least 25 clocks
	}
	ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | 0x01 ; // Gain = 1, Single Ended
     880:	e0 e0       	ldi	r30, 0x00	; 0
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	80 a3       	std	Z+32, r24	; 0x20
	//ADCA.CH0.CTRL = ADC_CH_GAIN_1X_gc | 0x10 ; // Gain = 1, Single Ended
	//ADCA.CH0.MUXCTRL = (0x07<<3);
	ADCA.CH0.MUXCTRL = (0x00<<3) ;
     888:	11 a2       	std	Z+33, r1	; 0x21
	//ADCA.CH0.MUXCTRL = (0x00<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
     88a:	12 a2       	std	Z+34, r1	; 0x22
	for(Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     88c:	80 a1       	ldd	r24, Z+32	; 0x20
     88e:	80 68       	ori	r24, 0x80	; 128
     890:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     892:	86 81       	ldd	r24, Z+6	; 0x06
     894:	88 23       	and	r24, r24
     896:	e9 f3       	breq	.-6      	; 0x892 <read_adc+0x5a>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     898:	e0 e0       	ldi	r30, 0x00	; 0
     89a:	f2 e0       	ldi	r31, 0x02	; 2
     89c:	86 81       	ldd	r24, Z+6	; 0x06
     89e:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CH0.MUXCTRL = (0x00<<3) ;
	//ADCA.CH0.MUXCTRL = (0x00<<3);
	ADCA.CH0.INTCTRL = 0 ; // No interrupt
	for(Waste = 0; Waste<2; Waste++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm; // Start conversion
     8a0:	80 a1       	ldd	r24, Z+32	; 0x20
     8a2:	80 68       	ori	r24, 0x80	; 128
     8a4:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.INTFLAGS==0) ; // Wait for complete
     8a6:	86 81       	ldd	r24, Z+6	; 0x06
     8a8:	88 23       	and	r24, r24
     8aa:	e9 f3       	breq	.-6      	; 0x8a6 <read_adc+0x6e>
		ADCA.INTFLAGS = ADCA.INTFLAGS ;
     8ac:	e0 e0       	ldi	r30, 0x00	; 0
     8ae:	f2 e0       	ldi	r31, 0x02	; 2
     8b0:	86 81       	ldd	r24, Z+6	; 0x06
     8b2:	86 83       	std	Z+6, r24	; 0x06
	}
	
	return ADCA.CH0RES ;
     8b4:	80 89       	ldd	r24, Z+16	; 0x10
     8b6:	91 89       	ldd	r25, Z+17	; 0x11
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <set_freq>:




void set_freq(void)
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	27 97       	sbiw	r28, 0x07	; 7
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	de bf       	out	0x3e, r29	; 62
	volatile u16 	temperature;
	

#ifndef KOREA
	//fr = 0x00;//get_freq();
	fr = ~get_freq()  & 0x0f;
     8cc:	0e 94 d7 16 	call	0x2dae	; 0x2dae <get_freq>
     8d0:	80 95       	com	r24
     8d2:	8f 70       	andi	r24, 0x0F	; 15
     8d4:	8b 83       	std	Y+3, r24	; 0x03

	frq = 0x66c0 + (fr * 0x003f);	
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	2f e3       	ldi	r18, 0x3F	; 63
     8da:	82 9f       	mul	r24, r18
     8dc:	c0 01       	movw	r24, r0
     8de:	11 24       	eor	r1, r1
     8e0:	80 54       	subi	r24, 0x40	; 64
     8e2:	99 49       	sbci	r25, 0x99	; 153
     8e4:	89 83       	std	Y+1, r24	; 0x01
     8e6:	9a 83       	std	Y+2, r25	; 0x02
	//frq = 0x66c0 - 0x1f4 + (fr * 0x003f);
	//frq = 0x66c0 - 0x4e20 + 0x500 + 0x1a0 + (fr * 0x003f);



	eeprom_read_block((void*)&gTele_env,(void*) 0x000,sizeof(tele_env_t));
     8e8:	47 e6       	ldi	r20, 0x67	; 103
     8ea:	50 e0       	ldi	r21, 0x00	; 0
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	8f e5       	ldi	r24, 0x5F	; 95
     8f2:	91 e2       	ldi	r25, 0x21	; 33
     8f4:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <__eerd_block_x64a3u>

	frq += gTele_env.ctl_data.adj_freq;
     8f8:	20 91 5f 21 	lds	r18, 0x215F
     8fc:	30 91 60 21 	lds	r19, 0x2160
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
     908:	89 83       	std	Y+1, r24	; 0x01
     90a:	9a 83       	std	Y+2, r25	; 0x02


	


	offset = 0x0339 - 0;
     90c:	89 e3       	ldi	r24, 0x39	; 57
     90e:	93 e0       	ldi	r25, 0x03	; 3
     910:	8c 83       	std	Y+4, r24	; 0x04
     912:	9d 83       	std	Y+5, r25	; 0x05
	
	level = 13 - (offset / 0x0c);
     914:	2c 81       	ldd	r18, Y+4	; 0x04
     916:	3d 81       	ldd	r19, Y+5	; 0x05
     918:	ab ea       	ldi	r26, 0xAB	; 171
     91a:	ba ea       	ldi	r27, 0xAA	; 170
     91c:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__umulhisi3>
     920:	9c 01       	movw	r18, r24
     922:	36 95       	lsr	r19
     924:	27 95       	ror	r18
     926:	36 95       	lsr	r19
     928:	27 95       	ror	r18
     92a:	36 95       	lsr	r19
     92c:	27 95       	ror	r18
     92e:	8d e0       	ldi	r24, 0x0D	; 13
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	82 1b       	sub	r24, r18
     934:	93 0b       	sbc	r25, r19
     936:	8e 83       	std	Y+6, r24	; 0x06
     938:	9f 83       	std	Y+7, r25	; 0x07
	

	if(offset & 0x8000)
     93a:	8c 81       	ldd	r24, Y+4	; 0x04
     93c:	9d 81       	ldd	r25, Y+5	; 0x05
     93e:	99 23       	and	r25, r25
     940:	2c f4       	brge	.+10     	; 0x94c <set_freq+0x8e>
	level = 13;
     942:	8d e0       	ldi	r24, 0x0D	; 13
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	8e 83       	std	Y+6, r24	; 0x06
     948:	9f 83       	std	Y+7, r25	; 0x07
     94a:	07 c0       	rjmp	.+14     	; 0x95a <set_freq+0x9c>
	else if((offset / 0x0c)>13)
     94c:	8c 81       	ldd	r24, Y+4	; 0x04
     94e:	9d 81       	ldd	r25, Y+5	; 0x05
     950:	88 3a       	cpi	r24, 0xA8	; 168
     952:	91 05       	cpc	r25, r1
     954:	10 f0       	brcs	.+4      	; 0x95a <set_freq+0x9c>
	level = 0;
     956:	1e 82       	std	Y+6, r1	; 0x06
     958:	1f 82       	std	Y+7, r1	; 0x07
	else if((offset / 0x0c)>13)
	level = 0;

#endif 	
	//26867
	cc1101_set_freq(frq);
     95a:	89 81       	ldd	r24, Y+1	; 0x01
     95c:	9a 81       	ldd	r25, Y+2	; 0x02
     95e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <cc1101_set_freq>
}
     962:	27 96       	adiw	r28, 0x07	; 7
     964:	cd bf       	out	0x3d, r28	; 61
     966:	de bf       	out	0x3e, r29	; 62
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <cc1101_tx>:




u8 cc1101_tx(u8 * data , u8 length,u8 th)
{
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	8c 01       	movw	r16, r24
     97c:	f6 2e       	mov	r15, r22
     97e:	e4 2e       	mov	r14, r20
	int i;


	set_freq();
     980:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	
	cc1101_rtx_reg_set(1); // rx
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0e 94 6d 02 	call	0x4da	; 0x4da <cc1101_rtx_reg_set>
	//led_flasher(10,500);
	cc1101_carrier_wave_setup();
     98a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <cc1101_carrier_wave_setup>
	cc1100_cfg_gdo0(0x0e);
     98e:	6e e0       	ldi	r22, 0x0E	; 14
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>

	cc1100_cmd_idle();
     996:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
	cc1100_cmd_flush_rx();
     99a:	8a e3       	ldi	r24, 0x3A	; 58
     99c:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
	cc1100_cmd_calibrate();
     9a0:	0e 94 49 02 	call	0x492	; 0x492 <cc1100_cmd_calibrate>
	cc1100_cmd_rx();
     9a4:	84 e3       	ldi	r24, 0x34	; 52
     9a6:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
	
	PORTA.PIN2CTRL = 0x18; // pullup , both edge
     9aa:	c0 e0       	ldi	r28, 0x00	; 0
     9ac:	d6 e0       	ldi	r29, 0x06	; 6
     9ae:	88 e1       	ldi	r24, 0x18	; 24
     9b0:	8a 8b       	std	Y+18, r24	; 0x12
	
	delay_ms(10);
     9b2:	8a e0       	ldi	r24, 0x0A	; 10
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>

	if(PORTA.IN & 0x04)
     9ba:	88 85       	ldd	r24, Y+8	; 0x08
     9bc:	82 ff       	sbrs	r24, 2
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <cc1101_tx+0x5a>
	{
		cc1100_cmd_idle();
     9c0:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		
		if(th == 0)
     9c4:	ee 20       	and	r14, r14
     9c6:	49 f1       	breq	.+82     	; 0xa1a <cc1101_tx+0xac>
			return CARRIER_SENSE_DETECT;
		}

	}

	PORTA.PIN2CTRL = 0x00;
     9c8:	e0 e0       	ldi	r30, 0x00	; 0
     9ca:	f6 e0       	ldi	r31, 0x06	; 6
     9cc:	12 8a       	std	Z+18, r1	; 0x12





	cc1101_rtx_reg_set(0);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 6d 02 	call	0x4da	; 0x4da <cc1101_rtx_reg_set>
	cc1101_carrier_wave_setup();
     9d4:	0e 94 e7 02 	call	0x5ce	; 0x5ce <cc1101_carrier_wave_setup>
	cc1100_cmd_idle();
     9d8:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
	cc1100_cmd_calibrate();
     9dc:	0e 94 49 02 	call	0x492	; 0x492 <cc1100_cmd_calibrate>
	tx_fifo_write(data,length);
     9e0:	6f 2d       	mov	r22, r15
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	c8 01       	movw	r24, r16
     9e6:	0e 94 a1 02 	call	0x542	; 0x542 <tx_fifo_write>
	
	cc1100_write_reg(CC1100_REG_MCSM1,0x00);
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	87 e1       	ldi	r24, 0x17	; 23
     9ee:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_cfg_gdo0(0x09);
     9f2:	69 e0       	ldi	r22, 0x09	; 9
     9f4:	82 e0       	ldi	r24, 0x02	; 2
     9f6:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>



	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
     9fa:	66 e0       	ldi	r22, 0x06	; 6
     9fc:	82 e0       	ldi	r24, 0x02	; 2
     9fe:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_cmd_tx();
     a02:	85 e3       	ldi	r24, 0x35	; 53
     a04:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
	while(!get_gdoa());	//data send start
     a08:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <get_gdoa>
     a0c:	88 23       	and	r24, r24
     a0e:	e1 f3       	breq	.-8      	; 0xa08 <cc1101_tx+0x9a>
	while(get_gdoa());		//data send end
     a10:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <get_gdoa>
     a14:	81 11       	cpse	r24, r1
     a16:	fc cf       	rjmp	.-8      	; 0xa10 <cc1101_tx+0xa2>
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <cc1101_tx+0xb0>
	{
		cc1100_cmd_idle();
		
		if(th == 0)
		{
			return CARRIER_SENSE_DETECT;
     a1a:	85 e5       	ldi	r24, 0x55	; 85
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <cc1101_tx+0xb2>
	{
		//_delay_ms(500);	
	}

	
	return 1;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	ff 90       	pop	r15
     a2a:	ef 90       	pop	r14
     a2c:	08 95       	ret

00000a2e <__vector_67>:
#define	RX_NOMAL	2



ISR(PORTA_INT1_vect)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1


}
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_3>:

ISR(PORTC_INT1_vect)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1


}
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <cc1101_rx>:
#define sleep() __asm__ __volatile__ ("sleep")



u8 cc1101_rx(u8 * data,u8 * rssi, u8 * lqi, u8 rx_type)
{
     a56:	af 92       	push	r10
     a58:	bf 92       	push	r11
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	5c 01       	movw	r10, r24
     a68:	8b 01       	movw	r16, r22
     a6a:	7a 01       	movw	r14, r20
     a6c:	c2 2f       	mov	r28, r18
	//int cnt_wait_syn_ack=0;
	u8 length;
	u8 RX_STATUS = RX_FIFO_NONE;
	

	cc1100_cmd_idle();
     a6e:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
	set_freq();
     a72:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>


	if(rx_type == RX_NOMAL)
     a76:	c2 30       	cpi	r28, 0x02	; 2
     a78:	09 f0       	breq	.+2      	; 0xa7c <cc1101_rx+0x26>
     a7a:	8e c0       	rjmp	.+284    	; 0xb98 <cc1101_rx+0x142>
	{
		cc1100_write_reg(CC1100_REG_MCSM0, 0x04);
     a7c:	64 e0       	ldi	r22, 0x04	; 4
     a7e:	88 e1       	ldi	r24, 0x18	; 24
     a80:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_MCSM2, 0x07);
     a84:	67 e0       	ldi	r22, 0x07	; 7
     a86:	86 e1       	ldi	r24, 0x16	; 22
     a88:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	}

	cc1101_rtx_reg_set(1);
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	0e 94 6d 02 	call	0x4da	; 0x4da <cc1101_rtx_reg_set>
	cc1101_carrier_wave_setup();
     a92:	0e 94 e7 02 	call	0x5ce	; 0x5ce <cc1101_carrier_wave_setup>
	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
     a96:	66 e0       	ldi	r22, 0x06	; 6
     a98:	82 e0       	ldi	r24, 0x02	; 2
     a9a:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>

	cc1100_cmd_idle();
     a9e:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
	cc1100_cmd_flush_rx();
     aa2:	8a e3       	ldi	r24, 0x3A	; 58
     aa4:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
	cc1100_cmd_calibrate();
     aa8:	0e 94 49 02 	call	0x492	; 0x492 <cc1100_cmd_calibrate>
	cc1100_cmd_rx();
     aac:	84 e3       	ldi	r24, 0x34	; 52
     aae:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
	


	if(rx_type == RX_NOMAL)
	{
		cnt_wait_syn_ack=0;
     ab2:	10 92 20 20 	sts	0x2020, r1
     ab6:	10 92 21 20 	sts	0x2021, r1
		
		while(get_gdoa() == false)
     aba:	07 c0       	rjmp	.+14     	; 0xaca <cc1101_rx+0x74>
		{
			//_delay_ms(1);
			if(cnt_wait_syn_ack > RF_TIME_OUT_10MSEC)
     abc:	20 91 20 20 	lds	r18, 0x2020
     ac0:	30 91 21 20 	lds	r19, 0x2021
     ac4:	28 33       	cpi	r18, 0x38	; 56
     ac6:	31 05       	cpc	r19, r1
     ac8:	24 f4       	brge	.+8      	; 0xad2 <cc1101_rx+0x7c>

	if(rx_type == RX_NOMAL)
	{
		cnt_wait_syn_ack=0;
		
		while(get_gdoa() == false)
     aca:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <get_gdoa>
     ace:	88 23       	and	r24, r24
     ad0:	a9 f3       	breq	.-22     	; 0xabc <cc1101_rx+0x66>
			if(cnt_wait_syn_ack > RF_TIME_OUT_10MSEC)
			break;
		}
		
		
		cnt_wait_syn_ack = 0;
     ad2:	10 92 20 20 	sts	0x2020, r1
     ad6:	10 92 21 20 	sts	0x2021, r1

u8 cc1101_rx(u8 * data,u8 * rssi, u8 * lqi, u8 rx_type)
{
	//int cnt_wait_syn_ack=0;
	u8 length;
	u8 RX_STATUS = RX_FIFO_NONE;
     ada:	c0 e0       	ldi	r28, 0x00	; 0
		
		cnt_wait_syn_ack = 0;

		while(1)
		{
			if(get_gdoa()==true || RX_STATUS==RX_FIFO_MAKING || RX_STATUS==RX_FIFO_COMPLETE)
     adc:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <get_gdoa>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <cc1101_rx+0x9a>
     ae4:	c1 30       	cpi	r28, 0x01	; 1
     ae6:	09 f4       	brne	.+2      	; 0xaea <cc1101_rx+0x94>
     ae8:	cd c0       	rjmp	.+410    	; 0xc84 <cc1101_rx+0x22e>
     aea:	c2 30       	cpi	r28, 0x02	; 2
     aec:	e1 f4       	brne	.+56     	; 0xb26 <cc1101_rx+0xd0>
     aee:	c7 c0       	rjmp	.+398    	; 0xc7e <cc1101_rx+0x228>
			{
				
				if(get_gdoa() == false || RX_STATUS==RX_FIFO_COMPLETE)
     af0:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <get_gdoa>
     af4:	88 23       	and	r24, r24
     af6:	11 f0       	breq	.+4      	; 0xafc <cc1101_rx+0xa6>
     af8:	c2 30       	cpi	r28, 0x02	; 2
     afa:	91 f4       	brne	.+36     	; 0xb20 <cc1101_rx+0xca>
				{
					if((cc1100_status_crc_lqi() & 0x80))
     afc:	83 e3       	ldi	r24, 0x33	; 51
     afe:	0e 94 27 02 	call	0x44e	; 0x44e <cc1100_read_status>
     b02:	88 23       	and	r24, r24
     b04:	7c f4       	brge	.+30     	; 0xb24 <cc1101_rx+0xce>
					{
						length = rx_fifo_read(data,rssi,lqi);
     b06:	a7 01       	movw	r20, r14
     b08:	b8 01       	movw	r22, r16
     b0a:	c5 01       	movw	r24, r10
     b0c:	0e 94 b4 02 	call	0x568	; 0x568 <rx_fifo_read>
						cnt_wait_syn_ack = -1;
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	3f ef       	ldi	r19, 0xFF	; 255
     b14:	20 93 20 20 	sts	0x2020, r18
     b18:	30 93 21 20 	sts	0x2021, r19
						return length;
     b1c:	d8 2e       	mov	r13, r24
     b1e:	b7 c0       	rjmp	.+366    	; 0xc8e <cc1101_rx+0x238>
						RX_STATUS=RX_FIFO_COMPLETE;
					}
				}
				else
				{
					RX_STATUS=RX_FIFO_MAKING;
     b20:	c1 e0       	ldi	r28, 0x01	; 1
     b22:	01 c0       	rjmp	.+2      	; 0xb26 <cc1101_rx+0xd0>
						cnt_wait_syn_ack = -1;
						return length;
					}
					else
					{
						RX_STATUS=RX_FIFO_COMPLETE;
     b24:	c2 e0       	ldi	r28, 0x02	; 2
					RX_STATUS=RX_FIFO_MAKING;
				}
			}
			
			//_delay_ms(1);
			if(cnt_wait_syn_ack > RF_TIME_OUT_100MSEC)
     b26:	20 91 20 20 	lds	r18, 0x2020
     b2a:	30 91 21 20 	lds	r19, 0x2021
     b2e:	27 32       	cpi	r18, 0x27	; 39
     b30:	32 40       	sbci	r19, 0x02	; 2
     b32:	a4 f2       	brlt	.-88     	; 0xadc <cc1101_rx+0x86>
			{
				cnt_wait_syn_ack = -1;
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	80 93 20 20 	sts	0x2020, r24
     b3c:	90 93 21 20 	sts	0x2021, r25
				break;
			}
		}
		return 0;
     b40:	d1 2c       	mov	r13, r1
     b42:	a5 c0       	rjmp	.+330    	; 0xc8e <cc1101_rx+0x238>
		//set_speaker_power(false);
		
		_delay_ms(50);
		
		
		if(get_security_reset() || get_security_set() || get_side_door_unlocked() || get_rear_door_unlocked() || get_emergency_button() || get_cab_unlocked())
     b44:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
     b48:	81 11       	cpse	r24, r1
     b4a:	11 c0       	rjmp	.+34     	; 0xb6e <cc1101_rx+0x118>
     b4c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
     b50:	81 11       	cpse	r24, r1
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <cc1101_rx+0x118>
     b54:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_rear_door_unlocked>
     b58:	81 11       	cpse	r24, r1
     b5a:	09 c0       	rjmp	.+18     	; 0xb6e <cc1101_rx+0x118>
     b5c:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
     b60:	81 11       	cpse	r24, r1
     b62:	05 c0       	rjmp	.+10     	; 0xb6e <cc1101_rx+0x118>
     b64:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_cab_unlocked>
     b68:	d8 2e       	mov	r13, r24
     b6a:	88 23       	and	r24, r24
     b6c:	41 f0       	breq	.+16     	; 0xb7e <cc1101_rx+0x128>
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	80 93 08 22 	sts	0x2208, r24
		
		
		if(get_security_reset() || get_security_set() || get_side_door_unlocked() || get_rear_door_unlocked() || get_emergency_button() || get_cab_unlocked())
		{
			buzzer_on(true);
			return 0x77;
     b74:	0f 2e       	mov	r0, r31
     b76:	f7 e7       	ldi	r31, 0x77	; 119
     b78:	df 2e       	mov	r13, r31
     b7a:	f0 2d       	mov	r31, r0
     b7c:	88 c0       	rjmp	.+272    	; 0xc8e <cc1101_rx+0x238>
		}
		
		
		if((cc1100_status_crc_lqi() & 0x80))
     b7e:	83 e3       	ldi	r24, 0x33	; 51
     b80:	0e 94 27 02 	call	0x44e	; 0x44e <cc1100_read_status>
     b84:	88 23       	and	r24, r24
     b86:	0c f0       	brlt	.+2      	; 0xb8a <cc1101_rx+0x134>
     b88:	82 c0       	rjmp	.+260    	; 0xc8e <cc1101_rx+0x238>
		{
			length = rx_fifo_read(data,rssi,lqi);
     b8a:	a7 01       	movw	r20, r14
     b8c:	b8 01       	movw	r22, r16
     b8e:	c5 01       	movw	r24, r10
     b90:	0e 94 b4 02 	call	0x568	; 0x568 <rx_fifo_read>
			return length;
     b94:	d8 2e       	mov	r13, r24
     b96:	7b c0       	rjmp	.+246    	; 0xc8e <cc1101_rx+0x238>
	{
		cc1100_write_reg(CC1100_REG_MCSM0, 0x04);
		cc1100_write_reg(CC1100_REG_MCSM2, 0x07);
	}

	cc1101_rtx_reg_set(1);
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	0e 94 6d 02 	call	0x4da	; 0x4da <cc1101_rtx_reg_set>
	cc1101_carrier_wave_setup();
     b9e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <cc1101_carrier_wave_setup>
	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
     ba2:	66 e0       	ldi	r22, 0x06	; 6
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>

	cc1100_cmd_idle();
     baa:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
	cc1100_cmd_flush_rx();
     bae:	8a e3       	ldi	r24, 0x3A	; 58
     bb0:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
	cc1100_cmd_calibrate();
     bb4:	0e 94 49 02 	call	0x492	; 0x492 <cc1100_cmd_calibrate>
	cc1100_cmd_rx();
     bb8:	84 e3       	ldi	r24, 0x34	; 52
     bba:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
		}
		return 0;
	}
	else
	{
		PORTC.INT1MASK=0x04;
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f6 e0       	ldi	r31, 0x06	; 6
     bc2:	84 e0       	ldi	r24, 0x04	; 4
     bc4:	83 87       	std	Z+11, r24	; 0x0b
		PORTC.INTCTRL=0x0C;
     bc6:	8c e0       	ldi	r24, 0x0C	; 12
     bc8:	81 87       	std	Z+9, r24	; 0x09
		PORTA.INT1MASK=0xFC;
     bca:	e0 e0       	ldi	r30, 0x00	; 0
     bcc:	f6 e0       	ldi	r31, 0x06	; 6
     bce:	9c ef       	ldi	r25, 0xFC	; 252
     bd0:	93 87       	std	Z+11, r25	; 0x0b
		PORTA.INTCTRL=0x0C;
     bd2:	81 87       	std	Z+9, r24	; 0x09
		
		cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
     bd4:	66 e0       	ldi	r22, 0x06	; 6
     bd6:	82 e0       	ldi	r24, 0x02	; 2
     bd8:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_WOREVT1, 0x20);
     bdc:	60 e2       	ldi	r22, 0x20	; 32
     bde:	8e e1       	ldi	r24, 0x1E	; 30
     be0:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_WOREVT0, 0xff);
     be4:	6f ef       	ldi	r22, 0xFF	; 255
     be6:	8f e1       	ldi	r24, 0x1F	; 31
     be8:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_WORCTRL, 0x08);
     bec:	68 e0       	ldi	r22, 0x08	; 8
     bee:	80 e2       	ldi	r24, 0x20	; 32
     bf0:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_MCSM0, 0x18);
     bf4:	68 e1       	ldi	r22, 0x18	; 24
     bf6:	88 e1       	ldi	r24, 0x18	; 24
     bf8:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_MCSM2, 0x00);
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	86 e1       	ldi	r24, 0x16	; 22
     c00:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
		
		cc1100_strobe_cmd(0x38);		//WOR COMMAND
     c04:	88 e3       	ldi	r24, 0x38	; 56
     c06:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
		
		set_speaker_power(false);
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <set_speaker_power>
		
		wdt_disable();
     c12:	9d ef       	ldi	r25, 0xFD	; 253
     c14:	88 ed       	ldi	r24, 0xD8	; 216
     c16:	08 b6       	in	r0, 0x38	; 56
     c18:	18 be       	out	0x38, r1	; 56
     c1a:	84 bf       	out	0x34, r24	; 52
     c1c:	90 93 80 00 	sts	0x0080, r25
     c20:	08 be       	out	0x38, r0	; 56
		
		//SLEEP_CTRL |= SLEEP_SMODE_PDOWN_gc;
		SLEEP_CTRL |= SLEEP_SMODE_PSAVE_gc;
     c22:	e8 e4       	ldi	r30, 0x48	; 72
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	86 60       	ori	r24, 0x06	; 6
     c2a:	80 83       	st	Z, r24
		SLEEP_CTRL |= SLEEP_SEN_bm;
     c2c:	80 81       	ld	r24, Z
     c2e:	81 60       	ori	r24, 0x01	; 1
     c30:	80 83       	st	Z, r24
		
		sleep();
     c32:	88 95       	sleep
		
		PORTC.INT1MASK=0x00;
     c34:	e0 e4       	ldi	r30, 0x40	; 64
     c36:	f6 e0       	ldi	r31, 0x06	; 6
     c38:	13 86       	std	Z+11, r1	; 0x0b
		PORTA.INT1MASK=0x00;
     c3a:	e0 e0       	ldi	r30, 0x00	; 0
     c3c:	f6 e0       	ldi	r31, 0x06	; 6
     c3e:	13 86       	std	Z+11, r1	; 0x0b
		

		wdt_enable(0x26);		//wdt timeout 4sec enable
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	97 e2       	ldi	r25, 0x27	; 39
     c44:	88 ed       	ldi	r24, 0xD8	; 216
     c46:	08 b6       	in	r0, 0x38	; 56
     c48:	18 be       	out	0x38, r1	; 56
     c4a:	84 bf       	out	0x34, r24	; 52
     c4c:	90 93 80 00 	sts	0x0080, r25
     c50:	20 91 82 00 	lds	r18, 0x0082
     c54:	21 fd       	sbrc	r18, 1
     c56:	fc cf       	rjmp	.-8      	; 0xc50 <cc1101_rx+0x1fa>
     c58:	08 be       	out	0x38, r0	; 56

		set_speaker_power(true);
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <set_speaker_power>
     c62:	9f ef       	ldi	r25, 0xFF	; 255
     c64:	21 ee       	ldi	r18, 0xE1	; 225
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	91 50       	subi	r25, 0x01	; 1
     c6a:	20 40       	sbci	r18, 0x00	; 0
     c6c:	80 40       	sbci	r24, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <cc1101_rx+0x212>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <cc1101_rx+0x21c>
     c72:	00 00       	nop
		//set_speaker_power(false);
		
		_delay_ms(50);
		
		
		if(get_security_reset() || get_security_set() || get_side_door_unlocked() || get_rear_door_unlocked() || get_emergency_button() || get_cab_unlocked())
     c74:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
     c78:	81 11       	cpse	r24, r1
     c7a:	79 cf       	rjmp	.-270    	; 0xb6e <cc1101_rx+0x118>
     c7c:	63 cf       	rjmp	.-314    	; 0xb44 <cc1101_rx+0xee>
		while(1)
		{
			if(get_gdoa()==true || RX_STATUS==RX_FIFO_MAKING || RX_STATUS==RX_FIFO_COMPLETE)
			{
				
				if(get_gdoa() == false || RX_STATUS==RX_FIFO_COMPLETE)
     c7e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <get_gdoa>
     c82:	3c cf       	rjmp	.-392    	; 0xafc <cc1101_rx+0xa6>
     c84:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <get_gdoa>
     c88:	81 11       	cpse	r24, r1
     c8a:	4d cf       	rjmp	.-358    	; 0xb26 <cc1101_rx+0xd0>
     c8c:	37 cf       	rjmp	.-402    	; 0xafc <cc1101_rx+0xa6>
		
		return 0;
	}
	
	return 0;
}
     c8e:	8d 2d       	mov	r24, r13
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	bf 90       	pop	r11
     c9e:	af 90       	pop	r10
     ca0:	08 95       	ret

00000ca2 <cc1101_tx_carrier>:


void cc1101_tx_carrier(void)
{

	cc1101_carrier_wave_setup();
     ca2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <cc1101_carrier_wave_setup>

	cc1100_cfg_txoff_mode(CC1100_TXOFF_MODE_STAY_TX);
     ca6:	87 e1       	ldi	r24, 0x17	; 23
     ca8:	0e 94 8d 01 	call	0x31a	; 0x31a <cc1100_read_reg>
     cac:	8c 7f       	andi	r24, 0xFC	; 252
     cae:	68 2f       	mov	r22, r24
     cb0:	62 60       	ori	r22, 0x02	; 2
     cb2:	87 e1       	ldi	r24, 0x17	; 23
     cb4:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_cfg_manchester_en(CC1100_MANCHESTER_DISABLE);
     cb8:	82 e1       	ldi	r24, 0x12	; 18
     cba:	0e 94 8d 01 	call	0x31a	; 0x31a <cc1100_read_reg>
     cbe:	68 2f       	mov	r22, r24
     cc0:	67 7f       	andi	r22, 0xF7	; 247
     cc2:	82 e1       	ldi	r24, 0x12	; 18
     cc4:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_MDMCFG3,0x33);
     cc8:	63 e3       	ldi	r22, 0x33	; 51
     cca:	81 e1       	ldi	r24, 0x11	; 17
     ccc:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_cfg_mod_format(CC1100_MODULATION_ASK);
     cd0:	82 e1       	ldi	r24, 0x12	; 18
     cd2:	0e 94 8d 01 	call	0x31a	; 0x31a <cc1100_read_reg>
     cd6:	8f 78       	andi	r24, 0x8F	; 143
     cd8:	68 2f       	mov	r22, r24
     cda:	60 63       	ori	r22, 0x30	; 48
     cdc:	82 e1       	ldi	r24, 0x12	; 18
     cde:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_FREND0,0x10);
     ce2:	60 e1       	ldi	r22, 0x10	; 16
     ce4:	82 e2       	ldi	r24, 0x22	; 34
     ce6:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1100_cfg_gdo0(CC1100_GDOx_CLK_XOSC_1);
     cea:	60 e3       	ldi	r22, 0x30	; 48
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>

	/* IDLE */
	cc1100_cmd_idle();
     cf2:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
	/* MANCAL*/
	cc1100_cmd_calibrate();
     cf6:	0e 94 49 02 	call	0x492	; 0x492 <cc1100_cmd_calibrate>
	/* FS WAKEUP */
	cc1100_cmd_flush_tx();
     cfa:	8b e3       	ldi	r24, 0x3B	; 59
     cfc:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>

	cc1100_cfg_gdo0(0x0e);
     d00:	6e e0       	ldi	r22, 0x0E	; 14
     d02:	82 e0       	ldi	r24, 0x02	; 2
     d04:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	//carrier_sense();

	cc1100_cmd_tx();
     d08:	85 e3       	ldi	r24, 0x35	; 53
     d0a:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
     d0e:	08 95       	ret

00000d10 <timer_setup>:
void timer_setup(void)
{
	/* Set up Timer/Counter 0 to work from CPUCLK/64, with period 10000 and
	 * enable overflow interrupt.
	 */
	TCC0.PER = 90;
     d10:	e0 e0       	ldi	r30, 0x00	; 0
     d12:	f8 e0       	ldi	r31, 0x08	; 8
     d14:	8a e5       	ldi	r24, 0x5A	; 90
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	86 a3       	std	Z+38, r24	; 0x26
     d1a:	97 a3       	std	Z+39, r25	; 0x27
	//TCC0.PER = 10;
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV64_gc;
     d1c:	80 81       	ld	r24, Z
     d1e:	80 7f       	andi	r24, 0xF0	; 240
     d20:	85 60       	ori	r24, 0x05	; 5
     d22:	80 83       	st	Z, r24
	TCC0.INTCTRLA = ( TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_MED_gc;
     d24:	86 81       	ldd	r24, Z+6	; 0x06
     d26:	8c 7f       	andi	r24, 0xFC	; 252
     d28:	82 60       	ori	r24, 0x02	; 2
     d2a:	86 83       	std	Z+6, r24	; 0x06
     d2c:	08 95       	ret

00000d2e <__vector_14>:
volatile int temp_reset_led_toggle = 0;
volatile int timer_500ms_count = 0;


ISR(TCC0_OVF_vect)
{
     d2e:	1f 92       	push	r1
     d30:	0f 92       	push	r0
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	0f 92       	push	r0
     d36:	11 24       	eor	r1, r1
     d38:	0b b6       	in	r0, 0x3b	; 59
     d3a:	0f 92       	push	r0
     d3c:	2f 93       	push	r18
     d3e:	3f 93       	push	r19
     d40:	4f 93       	push	r20
     d42:	5f 93       	push	r21
     d44:	6f 93       	push	r22
     d46:	7f 93       	push	r23
     d48:	8f 93       	push	r24
     d4a:	9f 93       	push	r25
     d4c:	af 93       	push	r26
     d4e:	bf 93       	push	r27
     d50:	ef 93       	push	r30
     d52:	ff 93       	push	r31
	#if 1
	if(gBuzzer == true)
     d54:	80 91 08 22 	lds	r24, 0x2208
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	51 f4       	brne	.+20     	; 0xd70 <__vector_14+0x42>
	{
		buz_toggle ^= 0x01;
     d5c:	90 91 58 21 	lds	r25, 0x2158
     d60:	89 27       	eor	r24, r25
     d62:	80 93 58 21 	sts	0x2158, r24
		set_buzzer(buz_toggle);
     d66:	80 91 58 21 	lds	r24, 0x2158
     d6a:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <set_buzzer>
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <__vector_14+0x48>
	}
	else
	{
		set_buzzer(0);
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <set_buzzer>
	}
	#endif
	
	if(send_timer > -1)
     d76:	80 91 1e 20 	lds	r24, 0x201E
     d7a:	90 91 1f 20 	lds	r25, 0x201F
     d7e:	99 23       	and	r25, r25
     d80:	4c f0       	brlt	.+18     	; 0xd94 <__vector_14+0x66>
	{
		send_timer++;
     d82:	80 91 1e 20 	lds	r24, 0x201E
     d86:	90 91 1f 20 	lds	r25, 0x201F
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	80 93 1e 20 	sts	0x201E, r24
     d90:	90 93 1f 20 	sts	0x201F, r25
		
	}
	
	if(cnt_wait_syn_ack > -1)
     d94:	80 91 20 20 	lds	r24, 0x2020
     d98:	90 91 21 20 	lds	r25, 0x2021
     d9c:	99 23       	and	r25, r25
     d9e:	4c f0       	brlt	.+18     	; 0xdb2 <__vector_14+0x84>
	{
		cnt_wait_syn_ack++;
     da0:	80 91 20 20 	lds	r24, 0x2020
     da4:	90 91 21 20 	lds	r25, 0x2021
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	80 93 20 20 	sts	0x2020, r24
     dae:	90 93 21 20 	sts	0x2021, r25
	}
	
	
	if(timer_500ms_count++ > 2776)	
     db2:	80 91 50 21 	lds	r24, 0x2150
     db6:	90 91 51 21 	lds	r25, 0x2151
     dba:	9c 01       	movw	r18, r24
     dbc:	2f 5f       	subi	r18, 0xFF	; 255
     dbe:	3f 4f       	sbci	r19, 0xFF	; 255
     dc0:	20 93 50 21 	sts	0x2150, r18
     dc4:	30 93 51 21 	sts	0x2151, r19
     dc8:	89 3d       	cpi	r24, 0xD9	; 217
     dca:	9a 40       	sbci	r25, 0x0A	; 10
     dcc:	f4 f1       	brlt	.+124    	; 0xe4a <__vector_14+0x11c>
		buz_toggle ^= 0x01;
		set_bat_led(buz_toggle);
		#endif		
		
		
		if(temp_reset_led_toggle != 0)
     dce:	80 91 52 21 	lds	r24, 0x2152
     dd2:	90 91 53 21 	lds	r25, 0x2153
     dd6:	89 2b       	or	r24, r25
     dd8:	29 f0       	breq	.+10     	; 0xde4 <__vector_14+0xb6>
		{
			temp_reset_led_toggle=0;
     dda:	10 92 52 21 	sts	0x2152, r1
     dde:	10 92 53 21 	sts	0x2153, r1
     de2:	09 c0       	rjmp	.+18     	; 0xdf6 <__vector_14+0xc8>
		}
		else
		{
			temp_reset_led_toggle++;
     de4:	80 91 52 21 	lds	r24, 0x2152
     de8:	90 91 53 21 	lds	r25, 0x2153
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	80 93 52 21 	sts	0x2152, r24
     df2:	90 93 53 21 	sts	0x2153, r25
		}
		
		if(temp_reset_count > -1)
     df6:	80 91 24 20 	lds	r24, 0x2024
     dfa:	90 91 25 20 	lds	r25, 0x2025
     dfe:	99 23       	and	r25, r25
     e00:	04 f1       	brlt	.+64     	; 0xe42 <__vector_14+0x114>
		{
			if(btn_powerdown_count < 1)
     e02:	80 91 2c 20 	lds	r24, 0x202C
     e06:	90 91 2d 20 	lds	r25, 0x202D
     e0a:	18 16       	cp	r1, r24
     e0c:	19 06       	cpc	r1, r25
     e0e:	3c f0       	brlt	.+14     	; 0xe1e <__vector_14+0xf0>
			{
				set_security_mode_led(temp_reset_led_toggle);				
     e10:	80 91 52 21 	lds	r24, 0x2152
     e14:	90 91 53 21 	lds	r25, 0x2153
     e18:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
     e1c:	12 c0       	rjmp	.+36     	; 0xe42 <__vector_14+0x114>
			}
			else
			{
				set_bat_led(false);
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
				set_communication_led(false);
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <set_communication_led>
				set_car_emergency_led(false);
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
				set_emg_led(false);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
				set_emg_button_led(false);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
				set_security_mode_led(false);
     e3c:	80 e0       	ldi	r24, 0x00	; 0
     e3e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
			}

		}
		
		timer_500ms_count=0;
     e42:	10 92 50 21 	sts	0x2150, r1
     e46:	10 92 51 21 	sts	0x2151, r1
	}
	

	
	if(timer_1S_count++ > 5554)
     e4a:	80 91 56 21 	lds	r24, 0x2156
     e4e:	90 91 57 21 	lds	r25, 0x2157
     e52:	9c 01       	movw	r18, r24
     e54:	2f 5f       	subi	r18, 0xFF	; 255
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	20 93 56 21 	sts	0x2156, r18
     e5c:	30 93 57 21 	sts	0x2157, r19
     e60:	83 3b       	cpi	r24, 0xB3	; 179
     e62:	95 41       	sbci	r25, 0x15	; 21
     e64:	0c f4       	brge	.+2      	; 0xe68 <__vector_14+0x13a>
     e66:	15 c1       	rjmp	.+554    	; 0x1092 <__vector_14+0x364>
		set_bat_led(buz_toggle);
		#endif

		
		
		timer_1S_count  = 0;
     e68:	10 92 56 21 	sts	0x2156, r1
     e6c:	10 92 57 21 	sts	0x2157, r1
		
		if(btn_emg_count > -1)
     e70:	80 91 3c 20 	lds	r24, 0x203C
     e74:	90 91 3d 20 	lds	r25, 0x203D
     e78:	99 23       	and	r25, r25
     e7a:	4c f0       	brlt	.+18     	; 0xe8e <__vector_14+0x160>
			btn_emg_count++;
     e7c:	80 91 3c 20 	lds	r24, 0x203C
     e80:	90 91 3d 20 	lds	r25, 0x203D
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	80 93 3c 20 	sts	0x203C, r24
     e8a:	90 93 3d 20 	sts	0x203D, r25
			
		if(btn_open_count > -1)
     e8e:	80 91 3a 20 	lds	r24, 0x203A
     e92:	90 91 3b 20 	lds	r25, 0x203B
     e96:	99 23       	and	r25, r25
     e98:	4c f0       	brlt	.+18     	; 0xeac <__vector_14+0x17e>
			btn_open_count++;
     e9a:	80 91 3a 20 	lds	r24, 0x203A
     e9e:	90 91 3b 20 	lds	r25, 0x203B
     ea2:	01 96       	adiw	r24, 0x01	; 1
     ea4:	80 93 3a 20 	sts	0x203A, r24
     ea8:	90 93 3b 20 	sts	0x203B, r25
		if(btn_rear_open_count > -1)
     eac:	80 91 38 20 	lds	r24, 0x2038
     eb0:	90 91 39 20 	lds	r25, 0x2039
     eb4:	99 23       	and	r25, r25
     eb6:	4c f0       	brlt	.+18     	; 0xeca <__vector_14+0x19c>
			btn_rear_open_count++;
     eb8:	80 91 38 20 	lds	r24, 0x2038
     ebc:	90 91 39 20 	lds	r25, 0x2039
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	80 93 38 20 	sts	0x2038, r24
     ec6:	90 93 39 20 	sts	0x2039, r25
		if(btn_side_open_count > -1)
     eca:	80 91 36 20 	lds	r24, 0x2036
     ece:	90 91 37 20 	lds	r25, 0x2037
     ed2:	99 23       	and	r25, r25
     ed4:	4c f0       	brlt	.+18     	; 0xee8 <__vector_14+0x1ba>
			btn_side_open_count++;
     ed6:	80 91 36 20 	lds	r24, 0x2036
     eda:	90 91 37 20 	lds	r25, 0x2037
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	80 93 36 20 	sts	0x2036, r24
     ee4:	90 93 37 20 	sts	0x2037, r25
		if(btn_set_count > -1)
     ee8:	80 91 34 20 	lds	r24, 0x2034
     eec:	90 91 35 20 	lds	r25, 0x2035
     ef0:	99 23       	and	r25, r25
     ef2:	4c f0       	brlt	.+18     	; 0xf06 <__vector_14+0x1d8>
			btn_set_count++;
     ef4:	80 91 34 20 	lds	r24, 0x2034
     ef8:	90 91 35 20 	lds	r25, 0x2035
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	80 93 34 20 	sts	0x2034, r24
     f02:	90 93 35 20 	sts	0x2035, r25
		if(btn_reset_count > -1)
     f06:	80 91 32 20 	lds	r24, 0x2032
     f0a:	90 91 33 20 	lds	r25, 0x2033
     f0e:	99 23       	and	r25, r25
     f10:	4c f0       	brlt	.+18     	; 0xf24 <__vector_14+0x1f6>
			btn_reset_count++;
     f12:	80 91 32 20 	lds	r24, 0x2032
     f16:	90 91 33 20 	lds	r25, 0x2033
     f1a:	01 96       	adiw	r24, 0x01	; 1
     f1c:	80 93 32 20 	sts	0x2032, r24
     f20:	90 93 33 20 	sts	0x2033, r25
		if(btn_powerdown_count > -1)
     f24:	80 91 2c 20 	lds	r24, 0x202C
     f28:	90 91 2d 20 	lds	r25, 0x202D
     f2c:	99 23       	and	r25, r25
     f2e:	4c f0       	brlt	.+18     	; 0xf42 <__vector_14+0x214>
			btn_powerdown_count++;
     f30:	80 91 2c 20 	lds	r24, 0x202C
     f34:	90 91 2d 20 	lds	r25, 0x202D
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	80 93 2c 20 	sts	0x202C, r24
     f3e:	90 93 2d 20 	sts	0x202D, r25
		
		
		if(sleep_cansel_count > -1)
     f42:	80 91 2a 20 	lds	r24, 0x202A
     f46:	90 91 2b 20 	lds	r25, 0x202B
     f4a:	99 23       	and	r25, r25
     f4c:	4c f0       	brlt	.+18     	; 0xf60 <__vector_14+0x232>
			sleep_cansel_count++;
     f4e:	80 91 2a 20 	lds	r24, 0x202A
     f52:	90 91 2b 20 	lds	r25, 0x202B
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	80 93 2a 20 	sts	0x202A, r24
     f5c:	90 93 2b 20 	sts	0x202B, r25
			
		if(sleep_cansel_count > 10)
     f60:	80 91 2a 20 	lds	r24, 0x202A
     f64:	90 91 2b 20 	lds	r25, 0x202B
     f68:	0b 97       	sbiw	r24, 0x0b	; 11
     f6a:	34 f0       	brlt	.+12     	; 0xf78 <__vector_14+0x24a>
			sleep_cansel_count = -1;
     f6c:	8f ef       	ldi	r24, 0xFF	; 255
     f6e:	9f ef       	ldi	r25, 0xFF	; 255
     f70:	80 93 2a 20 	sts	0x202A, r24
     f74:	90 93 2b 20 	sts	0x202B, r25

		
		if(batt_low_voice > -1)
     f78:	80 91 30 20 	lds	r24, 0x2030
     f7c:	90 91 31 20 	lds	r25, 0x2031
     f80:	99 23       	and	r25, r25
     f82:	4c f0       	brlt	.+18     	; 0xf96 <__vector_14+0x268>
			batt_low_voice++;
     f84:	80 91 30 20 	lds	r24, 0x2030
     f88:	90 91 31 20 	lds	r25, 0x2031
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	80 93 30 20 	sts	0x2030, r24
     f92:	90 93 31 20 	sts	0x2031, r25
			
		if(batt_low_voice > 3)
     f96:	80 91 30 20 	lds	r24, 0x2030
     f9a:	90 91 31 20 	lds	r25, 0x2031
     f9e:	04 97       	sbiw	r24, 0x04	; 4
     fa0:	34 f0       	brlt	.+12     	; 0xfae <__vector_14+0x280>
			batt_low_voice = -1;
     fa2:	8f ef       	ldi	r24, 0xFF	; 255
     fa4:	9f ef       	ldi	r25, 0xFF	; 255
     fa6:	80 93 30 20 	sts	0x2030, r24
     faa:	90 93 31 20 	sts	0x2031, r25
			
			
		if(btn_ctl_deny_timeout_count > -1)
     fae:	80 91 2e 20 	lds	r24, 0x202E
     fb2:	90 91 2f 20 	lds	r25, 0x202F
     fb6:	99 23       	and	r25, r25
     fb8:	4c f0       	brlt	.+18     	; 0xfcc <__vector_14+0x29e>
			btn_ctl_deny_timeout_count++;
     fba:	80 91 2e 20 	lds	r24, 0x202E
     fbe:	90 91 2f 20 	lds	r25, 0x202F
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	80 93 2e 20 	sts	0x202E, r24
     fc8:	90 93 2f 20 	sts	0x202F, r25
			
		if(btn_ctl_deny_timeout_count > 2)
     fcc:	80 91 2e 20 	lds	r24, 0x202E
     fd0:	90 91 2f 20 	lds	r25, 0x202F
     fd4:	03 97       	sbiw	r24, 0x03	; 3
     fd6:	34 f0       	brlt	.+12     	; 0xfe4 <__vector_14+0x2b6>
			btn_ctl_deny_timeout_count = -1;
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	80 93 2e 20 	sts	0x202E, r24
     fe0:	90 93 2f 20 	sts	0x202F, r25
			
		if(deny_setup_id < 600)
     fe4:	80 91 54 21 	lds	r24, 0x2154
     fe8:	90 91 55 21 	lds	r25, 0x2155
     fec:	88 35       	cpi	r24, 0x58	; 88
     fee:	92 40       	sbci	r25, 0x02	; 2
     ff0:	4c f4       	brge	.+18     	; 0x1004 <__vector_14+0x2d6>
			deny_setup_id++;
     ff2:	80 91 54 21 	lds	r24, 0x2154
     ff6:	90 91 55 21 	lds	r25, 0x2155
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	80 93 54 21 	sts	0x2154, r24
    1000:	90 93 55 21 	sts	0x2155, r25
			
		if(temp_reset_count > -1)
    1004:	80 91 24 20 	lds	r24, 0x2024
    1008:	90 91 25 20 	lds	r25, 0x2025
    100c:	99 23       	and	r25, r25
    100e:	4c f0       	brlt	.+18     	; 0x1022 <__vector_14+0x2f4>
			temp_reset_count++;
    1010:	80 91 24 20 	lds	r24, 0x2024
    1014:	90 91 25 20 	lds	r25, 0x2025
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	80 93 24 20 	sts	0x2024, r24
    101e:	90 93 25 20 	sts	0x2025, r25
			
			
		if(mentenece_mode > -1)
    1022:	80 91 28 20 	lds	r24, 0x2028
    1026:	90 91 29 20 	lds	r25, 0x2029
    102a:	99 23       	and	r25, r25
    102c:	94 f1       	brlt	.+100    	; 0x1092 <__vector_14+0x364>
		{
			if(mentenece_mode == 0)
    102e:	80 91 28 20 	lds	r24, 0x2028
    1032:	90 91 29 20 	lds	r25, 0x2029
    1036:	89 2b       	or	r24, r25
    1038:	c9 f4       	brne	.+50     	; 0x106c <__vector_14+0x33e>
			{
				set_bat_led(true);
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
				mentenece_mode++;
    1040:	80 91 28 20 	lds	r24, 0x2028
    1044:	90 91 29 20 	lds	r25, 0x2029
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	80 93 28 20 	sts	0x2028, r24
    104e:	90 93 29 20 	sts	0x2029, r25
				
				if((~get_test() & 0x0f)==0x06)
    1052:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <get_test>
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	99 27       	eor	r25, r25
    1060:	06 97       	sbiw	r24, 0x06	; 6
    1062:	b9 f4       	brne	.+46     	; 0x1092 <__vector_14+0x364>
				{
					set_security_mode_led(true);
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    106a:	13 c0       	rjmp	.+38     	; 0x1092 <__vector_14+0x364>
				}
			}
			else
			{
				set_bat_led(false);
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
				mentenece_mode=0;
    1072:	10 92 28 20 	sts	0x2028, r1
    1076:	10 92 29 20 	sts	0x2029, r1

				if((~get_test() & 0x0f)==0x06)
    107a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <get_test>
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	80 95       	com	r24
    1082:	90 95       	com	r25
    1084:	8f 70       	andi	r24, 0x0F	; 15
    1086:	99 27       	eor	r25, r25
    1088:	06 97       	sbiw	r24, 0x06	; 6
    108a:	19 f4       	brne	.+6      	; 0x1092 <__vector_14+0x364>
				{
					set_security_mode_led(false);
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
		buzzer_on(true);
	}
	#endif

	
}
    1092:	ff 91       	pop	r31
    1094:	ef 91       	pop	r30
    1096:	bf 91       	pop	r27
    1098:	af 91       	pop	r26
    109a:	9f 91       	pop	r25
    109c:	8f 91       	pop	r24
    109e:	7f 91       	pop	r23
    10a0:	6f 91       	pop	r22
    10a2:	5f 91       	pop	r21
    10a4:	4f 91       	pop	r20
    10a6:	3f 91       	pop	r19
    10a8:	2f 91       	pop	r18
    10aa:	0f 90       	pop	r0
    10ac:	0b be       	out	0x3b, r0	; 59
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <buzzer_error>:
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	80 93 08 22 	sts	0x2208, r24
    10be:	2f ef       	ldi	r18, 0xFF	; 255
    10c0:	8b e4       	ldi	r24, 0x4B	; 75
    10c2:	9d e1       	ldi	r25, 0x1D	; 29
    10c4:	21 50       	subi	r18, 0x01	; 1
    10c6:	80 40       	sbci	r24, 0x00	; 0
    10c8:	90 40       	sbci	r25, 0x00	; 0
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <buzzer_error+0xc>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <buzzer_error+0x16>
    10ce:	00 00       	nop
    10d0:	10 92 08 22 	sts	0x2208, r1
    10d4:	2f ef       	ldi	r18, 0xFF	; 255
    10d6:	8b e4       	ldi	r24, 0x4B	; 75
    10d8:	9d e1       	ldi	r25, 0x1D	; 29
    10da:	21 50       	subi	r18, 0x01	; 1
    10dc:	80 40       	sbci	r24, 0x00	; 0
    10de:	90 40       	sbci	r25, 0x00	; 0
    10e0:	e1 f7       	brne	.-8      	; 0x10da <buzzer_error+0x22>
    10e2:	00 c0       	rjmp	.+0      	; 0x10e4 <buzzer_error+0x2c>
    10e4:	00 00       	nop
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 93 08 22 	sts	0x2208, r24
    10ec:	2f ef       	ldi	r18, 0xFF	; 255
    10ee:	8b e4       	ldi	r24, 0x4B	; 75
    10f0:	9d e1       	ldi	r25, 0x1D	; 29
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	80 40       	sbci	r24, 0x00	; 0
    10f6:	90 40       	sbci	r25, 0x00	; 0
    10f8:	e1 f7       	brne	.-8      	; 0x10f2 <buzzer_error+0x3a>
    10fa:	00 c0       	rjmp	.+0      	; 0x10fc <buzzer_error+0x44>
    10fc:	00 00       	nop
    10fe:	10 92 08 22 	sts	0x2208, r1
    1102:	2f ef       	ldi	r18, 0xFF	; 255
    1104:	8b e4       	ldi	r24, 0x4B	; 75
    1106:	9d e1       	ldi	r25, 0x1D	; 29
    1108:	21 50       	subi	r18, 0x01	; 1
    110a:	80 40       	sbci	r24, 0x00	; 0
    110c:	90 40       	sbci	r25, 0x00	; 0
    110e:	e1 f7       	brne	.-8      	; 0x1108 <buzzer_error+0x50>
    1110:	00 c0       	rjmp	.+0      	; 0x1112 <buzzer_error+0x5a>
    1112:	00 00       	nop
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	80 93 08 22 	sts	0x2208, r24
    111a:	2f ef       	ldi	r18, 0xFF	; 255
    111c:	8b e4       	ldi	r24, 0x4B	; 75
    111e:	9d e1       	ldi	r25, 0x1D	; 29
    1120:	21 50       	subi	r18, 0x01	; 1
    1122:	80 40       	sbci	r24, 0x00	; 0
    1124:	90 40       	sbci	r25, 0x00	; 0
    1126:	e1 f7       	brne	.-8      	; 0x1120 <buzzer_error+0x68>
    1128:	00 c0       	rjmp	.+0      	; 0x112a <buzzer_error+0x72>
    112a:	00 00       	nop
    112c:	10 92 08 22 	sts	0x2208, r1
    1130:	2f ef       	ldi	r18, 0xFF	; 255
    1132:	8b e4       	ldi	r24, 0x4B	; 75
    1134:	9d e1       	ldi	r25, 0x1D	; 29
    1136:	21 50       	subi	r18, 0x01	; 1
    1138:	80 40       	sbci	r24, 0x00	; 0
    113a:	90 40       	sbci	r25, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <buzzer_error+0x7e>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <buzzer_error+0x88>
    1140:	00 00       	nop
    1142:	08 95       	ret

00001144 <sync_version_send>:




u8 sync_version_send(void)
{
    1144:	0f 93       	push	r16
    1146:	1f 93       	push	r17
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	6e 97       	sbiw	r28, 0x1e	; 30
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	de bf       	out	0x3e, r29	; 62
	int length;
	sync_version_t sync_version;
	u8 rssi,lqi;
	
	
	sync_version.hdr.slave_id = gEnv.id;
    1156:	80 91 d6 21 	lds	r24, 0x21D6
    115a:	90 91 d7 21 	lds	r25, 0x21D7
    115e:	a0 91 d8 21 	lds	r26, 0x21D8
    1162:	b0 91 d9 21 	lds	r27, 0x21D9
    1166:	8a 83       	std	Y+2, r24	; 0x02
    1168:	9b 83       	std	Y+3, r25	; 0x03
    116a:	ac 83       	std	Y+4, r26	; 0x04
    116c:	bd 83       	std	Y+5, r27	; 0x05
	sync_version.hdr.payload = PAYLOAD_SYNC_VERSION;
    116e:	8f e0       	ldi	r24, 0x0F	; 15
    1170:	8c 87       	std	Y+12, r24	; 0x0c
	sync_version.ver_major = REMOCON_VERSION_MAJOR;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	89 8b       	std	Y+17, r24	; 0x11
	sync_version.ver_sub = REMOCON_VERSION_SUB;
    1176:	1a 8a       	std	Y+18, r1	; 0x12
	sync_version.ver_sub_sub = REMOCON_VERSION_SUB_SUB;
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	8b 8b       	std	Y+19, r24	; 0x13
	
	set_freq();
    117c:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&sync_version,sizeof(sync_version_t),1);
    1180:	41 e0       	ldi	r20, 0x01	; 1
    1182:	6c e1       	ldi	r22, 0x1C	; 28
    1184:	ce 01       	movw	r24, r28
    1186:	01 96       	adiw	r24, 0x01	; 1
    1188:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
	
	send_timer = 0;
    118c:	10 92 1e 20 	sts	0x201E, r1
    1190:	10 92 1f 20 	sts	0x201F, r1
		
		set_freq();
		length = cc1101_rx((u8 *)&sync_version,&rssi,&lqi,RX_NOMAL);
		if(length > 0 )
		{
			if(sync_version.hdr.slave_id == gEnv.id && sync_version.hdr.payload == PAYLOAD_SYNC_VERSION)
    1194:	06 ed       	ldi	r16, 0xD6	; 214
    1196:	11 e2       	ldi	r17, 0x21	; 33
	
	send_timer = 0;
	while(1)
	{
		
		set_freq();
    1198:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		length = cc1101_rx((u8 *)&sync_version,&rssi,&lqi,RX_NOMAL);
    119c:	22 e0       	ldi	r18, 0x02	; 2
    119e:	ae 01       	movw	r20, r28
    11a0:	42 5e       	subi	r20, 0xE2	; 226
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	be 01       	movw	r22, r28
    11a6:	63 5e       	subi	r22, 0xE3	; 227
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	ce 01       	movw	r24, r28
    11ac:	01 96       	adiw	r24, 0x01	; 1
    11ae:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
		if(length > 0 )
    11b2:	88 23       	and	r24, r24
    11b4:	b1 f0       	breq	.+44     	; 0x11e2 <sync_version_send+0x9e>
		{
			if(sync_version.hdr.slave_id == gEnv.id && sync_version.hdr.payload == PAYLOAD_SYNC_VERSION)
    11b6:	f8 01       	movw	r30, r16
    11b8:	80 81       	ld	r24, Z
    11ba:	91 81       	ldd	r25, Z+1	; 0x01
    11bc:	a2 81       	ldd	r26, Z+2	; 0x02
    11be:	b3 81       	ldd	r27, Z+3	; 0x03
    11c0:	4a 81       	ldd	r20, Y+2	; 0x02
    11c2:	5b 81       	ldd	r21, Y+3	; 0x03
    11c4:	6c 81       	ldd	r22, Y+4	; 0x04
    11c6:	7d 81       	ldd	r23, Y+5	; 0x05
    11c8:	48 17       	cp	r20, r24
    11ca:	59 07       	cpc	r21, r25
    11cc:	6a 07       	cpc	r22, r26
    11ce:	7b 07       	cpc	r23, r27
    11d0:	41 f4       	brne	.+16     	; 0x11e2 <sync_version_send+0x9e>
    11d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    11d4:	8f 30       	cpi	r24, 0x0F	; 15
    11d6:	29 f4       	brne	.+10     	; 0x11e2 <sync_version_send+0x9e>
			{
				rssi_fixed = rssi;
    11d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11da:	80 93 59 21 	sts	0x2159, r24
				send_timer = -1;
				comm_led();
				
				#endif

				return true;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	10 c0       	rjmp	.+32     	; 0x1202 <sync_version_send+0xbe>
			}
		}
		cc1100_cmd_idle();
    11e2:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		
		if(send_timer > 2000)
    11e6:	80 91 1e 20 	lds	r24, 0x201E
    11ea:	90 91 1f 20 	lds	r25, 0x201F
    11ee:	81 3d       	cpi	r24, 0xD1	; 209
    11f0:	97 40       	sbci	r25, 0x07	; 7
    11f2:	94 f2       	brlt	.-92     	; 0x1198 <sync_version_send+0x54>
		{
			send_timer = -1;
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	80 93 1e 20 	sts	0x201E, r24
    11fc:	90 93 1f 20 	sts	0x201F, r25
			break;
		}
	}
	
	
	return false;
    1200:	80 e0       	ldi	r24, 0x00	; 0
}
    1202:	6e 96       	adiw	r28, 0x1e	; 30
    1204:	cd bf       	out	0x3d, r28	; 61
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <sync_rssi_send>:




u8 sync_rssi_send(u8 * rssi, u8 * lqi)
{
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	6c 97       	sbiw	r28, 0x1c	; 28
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	e8 2e       	mov	r14, r24
    122e:	c9 2e       	mov	r12, r25
    1230:	f6 2e       	mov	r15, r22
    1232:	d7 2e       	mov	r13, r23
	int length;
	volatile sync_version_t sync_version;
	//u8 rssi,lqi;
	
	
	sync_version.hdr.slave_id = gEnv.id;
    1234:	00 91 d6 21 	lds	r16, 0x21D6
    1238:	10 91 d7 21 	lds	r17, 0x21D7
    123c:	20 91 d8 21 	lds	r18, 0x21D8
    1240:	30 91 d9 21 	lds	r19, 0x21D9
    1244:	0a 83       	std	Y+2, r16	; 0x02
    1246:	1b 83       	std	Y+3, r17	; 0x03
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	3d 83       	std	Y+5, r19	; 0x05
	sync_version.hdr.payload = PAYLOAD_RSSI_CHECK;
    124c:	81 e1       	ldi	r24, 0x11	; 17
    124e:	8c 87       	std	Y+12, r24	; 0x0c
	sync_version.ver_major = REMOCON_VERSION_MAJOR;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 8b       	std	Y+17, r24	; 0x11
	sync_version.ver_sub = REMOCON_VERSION_SUB;
    1254:	1a 8a       	std	Y+18, r1	; 0x12
	sync_version.ver_sub_sub = REMOCON_VERSION_SUB_SUB;
    1256:	85 e0       	ldi	r24, 0x05	; 5
    1258:	8b 8b       	std	Y+19, r24	; 0x13
	sync_version.hdr.rssi = rssi;
    125a:	ea 86       	std	Y+10, r14	; 0x0a
	sync_version.hdr.lqi = lqi;
    125c:	6b 87       	std	Y+11, r22	; 0x0b
	
	set_freq();
    125e:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&sync_version,sizeof(sync_version_t),1);
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	6c e1       	ldi	r22, 0x1C	; 28
    1266:	ce 01       	movw	r24, r28
    1268:	01 96       	adiw	r24, 0x01	; 1
    126a:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
	
	send_timer = 0;
    126e:	10 92 1e 20 	sts	0x201E, r1
    1272:	10 92 1f 20 	sts	0x201F, r1
	while(1)
	{
		wdt_reset();
    1276:	a8 95       	wdr
		//cc1101_tx(&sync_version,sizeof(sync_version_t),1);
		
		set_freq();
    1278:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		length = cc1101_rx((u8 *)&sync_version,rssi,lqi,RX_NOMAL);
    127c:	22 e0       	ldi	r18, 0x02	; 2
    127e:	4f 2d       	mov	r20, r15
    1280:	5d 2d       	mov	r21, r13
    1282:	6e 2d       	mov	r22, r14
    1284:	7c 2d       	mov	r23, r12
    1286:	ce 01       	movw	r24, r28
    1288:	01 96       	adiw	r24, 0x01	; 1
    128a:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
		if(length > 0 )
    128e:	88 23       	and	r24, r24
    1290:	41 f0       	breq	.+16     	; 0x12a2 <sync_rssi_send+0x90>

			//if(sync_version.hdr.slave_id == gEnv.id)
			//if((sync_version.hdr.slave_id == gEnv.id) && (sync_version.hdr.payload == PAYLOAD_RSSI_CHECK))
			{
				//rssi_fixed = rssi;
				send_timer = -1;
    1292:	8f ef       	ldi	r24, 0xFF	; 255
    1294:	9f ef       	ldi	r25, 0xFF	; 255
    1296:	80 93 1e 20 	sts	0x201E, r24
    129a:	90 93 1f 20 	sts	0x201F, r25
				return true;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	10 c0       	rjmp	.+32     	; 0x12c2 <sync_rssi_send+0xb0>
			}
		}
		cc1100_cmd_idle();
    12a2:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		
		if(send_timer > 2000)
    12a6:	20 91 1e 20 	lds	r18, 0x201E
    12aa:	30 91 1f 20 	lds	r19, 0x201F
    12ae:	21 3d       	cpi	r18, 0xD1	; 209
    12b0:	37 40       	sbci	r19, 0x07	; 7
    12b2:	0c f3       	brlt	.-62     	; 0x1276 <sync_rssi_send+0x64>
		{
			send_timer = -1;
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	9f ef       	ldi	r25, 0xFF	; 255
    12b8:	80 93 1e 20 	sts	0x201E, r24
    12bc:	90 93 1f 20 	sts	0x201F, r25
			break;
		}
	}
	
	
	return false;
    12c0:	80 e0       	ldi	r24, 0x00	; 0
}
    12c2:	6c 96       	adiw	r28, 0x1c	; 28
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	df 91       	pop	r29
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	df 90       	pop	r13
    12d6:	cf 90       	pop	r12
    12d8:	08 95       	ret

000012da <button_check>:


void button_check(void)
{
	// switch check
	if(btn_emg != get_emergency_button())
    12da:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    12de:	90 91 07 22 	lds	r25, 0x2207
    12e2:	89 17       	cp	r24, r25
    12e4:	29 f1       	breq	.+74     	; 0x1330 <button_check+0x56>
	{
		if(get_emergency_button() == true && emg_state == false)
    12e6:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	61 f4       	brne	.+24     	; 0x1306 <button_check+0x2c>
    12ee:	80 91 5e 21 	lds	r24, 0x215E
    12f2:	81 11       	cpse	r24, r1
    12f4:	08 c0       	rjmp	.+16     	; 0x1306 <button_check+0x2c>
		{
			btn_emg_count=0;
    12f6:	10 92 3c 20 	sts	0x203C, r1
    12fa:	10 92 3d 20 	sts	0x203D, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 93 08 22 	sts	0x2208, r24
    1304:	11 c0       	rjmp	.+34     	; 0x1328 <button_check+0x4e>
		if(get_emergency_button() == true && emg_state == false)
		{
			btn_emg_count=0;
			buzzer_on(true);
		}
		else if(get_emergency_button() == true && emg_state == true)
    1306:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	59 f4       	brne	.+22     	; 0x1324 <button_check+0x4a>
    130e:	80 91 5e 21 	lds	r24, 0x215E
    1312:	81 30       	cpi	r24, 0x01	; 1
    1314:	39 f4       	brne	.+14     	; 0x1324 <button_check+0x4a>
		{
			btn_emg_count=0;
    1316:	10 92 3c 20 	sts	0x203C, r1
    131a:	10 92 3d 20 	sts	0x203D, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    131e:	80 93 08 22 	sts	0x2208, r24
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <button_check+0x4e>
		else if(get_emergency_button() == true && emg_state == true)
		{
			btn_emg_count=0;
			buzzer_on(true);
		}
		else if(get_emergency_button() == false)
    1324:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
		{
			//buzzer_on(false);
		}
		
		btn_emg = get_emergency_button();
    1328:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    132c:	80 93 07 22 	sts	0x2207, r24
	}
	
	if(btn_open != get_cab_unlocked())
    1330:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_cab_unlocked>
    1334:	90 91 06 22 	lds	r25, 0x2206
    1338:	89 17       	cp	r24, r25
    133a:	71 f0       	breq	.+28     	; 0x1358 <button_check+0x7e>
	{
		if(get_cab_unlocked() == true)
    133c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_cab_unlocked>
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	31 f4       	brne	.+12     	; 0x1350 <button_check+0x76>
		{
			btn_open_count=0;
    1344:	10 92 3a 20 	sts	0x203A, r1
    1348:	10 92 3b 20 	sts	0x203B, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    134c:	80 93 08 22 	sts	0x2208, r24
		}
		else
		{
			//buzzer_on(false);
		}
		btn_open = get_cab_unlocked();
    1350:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_cab_unlocked>
    1354:	80 93 06 22 	sts	0x2206, r24
	}
	
	//if(set_state == false)
	{
		if(btn_rear_open != get_rear_door_unlocked())
    1358:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_rear_door_unlocked>
    135c:	90 91 0a 22 	lds	r25, 0x220A
    1360:	89 17       	cp	r24, r25
    1362:	69 f0       	breq	.+26     	; 0x137e <button_check+0xa4>
		{
			u8 door = get_rear_door_unlocked();
    1364:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_rear_door_unlocked>
		
			if(door == true)
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	39 f4       	brne	.+14     	; 0x137a <button_check+0xa0>
			{
				btn_rear_open_count=0;
    136c:	10 92 38 20 	sts	0x2038, r1
    1370:	10 92 39 20 	sts	0x2039, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	90 93 08 22 	sts	0x2208, r25
			}
			else
			{
				//gBuzzer = false;
			}
			btn_rear_open = door;
    137a:	80 93 0a 22 	sts	0x220A, r24
		}
	}
	
	//if(set_state == false)
	{
		if(btn_side_open != get_side_door_unlocked())
    137e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
    1382:	90 91 df 21 	lds	r25, 0x21DF
    1386:	89 17       	cp	r24, r25
    1388:	71 f0       	breq	.+28     	; 0x13a6 <button_check+0xcc>
		{
			if(get_side_door_unlocked() == true)
    138a:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	31 f4       	brne	.+12     	; 0x139e <button_check+0xc4>
			{
				btn_side_open_count=0;
    1392:	10 92 36 20 	sts	0x2036, r1
    1396:	10 92 37 20 	sts	0x2037, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    139a:	80 93 08 22 	sts	0x2208, r24
			}
			else
			{
				//gBuzzer = false;
			}
			btn_side_open = get_side_door_unlocked();
    139e:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
    13a2:	80 93 df 21 	sts	0x21DF, r24
		}
	}
	
	if(btn_set != get_security_set())
    13a6:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    13aa:	90 91 de 21 	lds	r25, 0x21DE
    13ae:	89 17       	cp	r24, r25
    13b0:	71 f0       	breq	.+28     	; 0x13ce <button_check+0xf4>
	{
		if(get_security_set() == true)
    13b2:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	31 f4       	brne	.+12     	; 0x13c6 <button_check+0xec>
		{
			btn_set_count=0;
    13ba:	10 92 34 20 	sts	0x2034, r1
    13be:	10 92 35 20 	sts	0x2035, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    13c2:	80 93 08 22 	sts	0x2208, r24
		}
		else
		{
			//gBuzzer = false;
		}
		btn_set = get_security_set();
    13c6:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    13ca:	80 93 de 21 	sts	0x21DE, r24
	}
	
	if(btn_reset != get_security_reset())
    13ce:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    13d2:	90 91 05 22 	lds	r25, 0x2205
    13d6:	89 17       	cp	r24, r25
    13d8:	71 f0       	breq	.+28     	; 0x13f6 <button_check+0x11c>
	{
		
		if(get_security_reset() == true)
    13da:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    13de:	81 30       	cpi	r24, 0x01	; 1
    13e0:	31 f4       	brne	.+12     	; 0x13ee <button_check+0x114>
		{
			btn_reset_count=0;
    13e2:	10 92 32 20 	sts	0x2032, r1
    13e6:	10 92 33 20 	sts	0x2033, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    13ea:	80 93 08 22 	sts	0x2208, r24
		}
		else
		{
			//gBuzzer = false;
		}
		btn_reset = get_security_reset();
    13ee:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    13f2:	80 93 05 22 	sts	0x2205, r24
	}
	
	
	if(btn_emg_count == -1 && btn_open_count == -1 && btn_rear_open_count == -1 && btn_side_open_count == -1 && btn_set_count == -1 && btn_reset_count == -1)
    13f6:	80 91 3c 20 	lds	r24, 0x203C
    13fa:	90 91 3d 20 	lds	r25, 0x203D
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	01 f5       	brne	.+64     	; 0x1442 <button_check+0x168>
    1402:	80 91 3a 20 	lds	r24, 0x203A
    1406:	90 91 3b 20 	lds	r25, 0x203B
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	d1 f4       	brne	.+52     	; 0x1442 <button_check+0x168>
    140e:	80 91 38 20 	lds	r24, 0x2038
    1412:	90 91 39 20 	lds	r25, 0x2039
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	a1 f4       	brne	.+40     	; 0x1442 <button_check+0x168>
    141a:	80 91 36 20 	lds	r24, 0x2036
    141e:	90 91 37 20 	lds	r25, 0x2037
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	71 f4       	brne	.+28     	; 0x1442 <button_check+0x168>
    1426:	80 91 34 20 	lds	r24, 0x2034
    142a:	90 91 35 20 	lds	r25, 0x2035
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	41 f4       	brne	.+16     	; 0x1442 <button_check+0x168>
    1432:	80 91 32 20 	lds	r24, 0x2032
    1436:	90 91 33 20 	lds	r25, 0x2033
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	11 f4       	brne	.+4      	; 0x1442 <button_check+0x168>
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    143e:	10 92 08 22 	sts	0x2208, r1
    1442:	08 95       	ret

00001444 <sync_ack>:
/*
sync ack
*/

void sync_ack(void)
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	6c 97       	sbiw	r28, 0x1c	; 28
    144e:	cd bf       	out	0x3d, r28	; 61
    1450:	de bf       	out	0x3e, r29	; 62
	sync_t sync;
	
	sync.hdr.master_id = gMasterId;
    1452:	80 91 e2 21 	lds	r24, 0x21E2
    1456:	90 91 e3 21 	lds	r25, 0x21E3
    145a:	a0 91 e4 21 	lds	r26, 0x21E4
    145e:	b0 91 e5 21 	lds	r27, 0x21E5
    1462:	8e 83       	std	Y+6, r24	; 0x06
    1464:	9f 83       	std	Y+7, r25	; 0x07
    1466:	a8 87       	std	Y+8, r26	; 0x08
    1468:	b9 87       	std	Y+9, r27	; 0x09
	sync.hdr.slave_id = gEnv.id;
    146a:	80 91 d6 21 	lds	r24, 0x21D6
    146e:	90 91 d7 21 	lds	r25, 0x21D7
    1472:	a0 91 d8 21 	lds	r26, 0x21D8
    1476:	b0 91 d9 21 	lds	r27, 0x21D9
    147a:	8a 83       	std	Y+2, r24	; 0x02
    147c:	9b 83       	std	Y+3, r25	; 0x03
    147e:	ac 83       	std	Y+4, r26	; 0x04
    1480:	bd 83       	std	Y+5, r27	; 0x05
	sync.hdr.payload = PAYLOAD_SYNC;
    1482:	1c 86       	std	Y+12, r1	; 0x0c
	
	//_delay_ms(300);
	set_freq();
    1484:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&sync,sizeof(sync_t),1);
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	6c e1       	ldi	r22, 0x1C	; 28
    148c:	ce 01       	movw	r24, r28
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
}
    1494:	6c 96       	adiw	r28, 0x1c	; 28
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	08 95       	ret

000014a0 <set_state_ack>:
/*
set_state_ack
*/

void set_state_ack(void)
{
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	6c 97       	sbiw	r28, 0x1c	; 28
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	de bf       	out	0x3e, r29	; 62
	set_t set;
	
	set.hdr.master_id = gMasterId;
    14ae:	80 91 e2 21 	lds	r24, 0x21E2
    14b2:	90 91 e3 21 	lds	r25, 0x21E3
    14b6:	a0 91 e4 21 	lds	r26, 0x21E4
    14ba:	b0 91 e5 21 	lds	r27, 0x21E5
    14be:	8e 83       	std	Y+6, r24	; 0x06
    14c0:	9f 83       	std	Y+7, r25	; 0x07
    14c2:	a8 87       	std	Y+8, r26	; 0x08
    14c4:	b9 87       	std	Y+9, r27	; 0x09
	set.hdr.slave_id = gEnv.id;
    14c6:	80 91 d6 21 	lds	r24, 0x21D6
    14ca:	90 91 d7 21 	lds	r25, 0x21D7
    14ce:	a0 91 d8 21 	lds	r26, 0x21D8
    14d2:	b0 91 d9 21 	lds	r27, 0x21D9
    14d6:	8a 83       	std	Y+2, r24	; 0x02
    14d8:	9b 83       	std	Y+3, r25	; 0x03
    14da:	ac 83       	std	Y+4, r26	; 0x04
    14dc:	bd 83       	std	Y+5, r27	; 0x05
	set.hdr.payload = SET_STATE;
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	8c 87       	std	Y+12, r24	; 0x0c
	
	set_freq();
    14e2:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&set,sizeof(set_t),1);
    14e6:	41 e0       	ldi	r20, 0x01	; 1
    14e8:	6c e1       	ldi	r22, 0x1C	; 28
    14ea:	ce 01       	movw	r24, r28
    14ec:	01 96       	adiw	r24, 0x01	; 1
    14ee:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
}
    14f2:	6c 96       	adiw	r28, 0x1c	; 28
    14f4:	cd bf       	out	0x3d, r28	; 61
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	df 91       	pop	r29
    14fa:	cf 91       	pop	r28
    14fc:	08 95       	ret

000014fe <emg_ack>:
/*
set_state_ack
*/

void emg_ack(void)
{
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	6c 97       	sbiw	r28, 0x1c	; 28
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	de bf       	out	0x3e, r29	; 62
	emg_t emg;
	
	emg.hdr.master_id = gMasterId;
    150c:	80 91 e2 21 	lds	r24, 0x21E2
    1510:	90 91 e3 21 	lds	r25, 0x21E3
    1514:	a0 91 e4 21 	lds	r26, 0x21E4
    1518:	b0 91 e5 21 	lds	r27, 0x21E5
    151c:	8e 83       	std	Y+6, r24	; 0x06
    151e:	9f 83       	std	Y+7, r25	; 0x07
    1520:	a8 87       	std	Y+8, r26	; 0x08
    1522:	b9 87       	std	Y+9, r27	; 0x09
	emg.hdr.slave_id = gEnv.id;
    1524:	80 91 d6 21 	lds	r24, 0x21D6
    1528:	90 91 d7 21 	lds	r25, 0x21D7
    152c:	a0 91 d8 21 	lds	r26, 0x21D8
    1530:	b0 91 d9 21 	lds	r27, 0x21D9
    1534:	8a 83       	std	Y+2, r24	; 0x02
    1536:	9b 83       	std	Y+3, r25	; 0x03
    1538:	ac 83       	std	Y+4, r26	; 0x04
    153a:	bd 83       	std	Y+5, r27	; 0x05
	emg.hdr.payload = PAYLOAD_EMG;
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	8c 87       	std	Y+12, r24	; 0x0c
	
	set_freq();
    1540:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&emg,sizeof(emg_t),1);
    1544:	41 e0       	ldi	r20, 0x01	; 1
    1546:	6c e1       	ldi	r22, 0x1C	; 28
    1548:	ce 01       	movw	r24, r28
    154a:	01 96       	adiw	r24, 0x01	; 1
    154c:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
	
}
    1550:	6c 96       	adiw	r28, 0x1c	; 28
    1552:	cd bf       	out	0x3d, r28	; 61
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	08 95       	ret

0000155c <emg_door_ack>:
/*

*/

void emg_door_ack(void)
{
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	6c 97       	sbiw	r28, 0x1c	; 28
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	de bf       	out	0x3e, r29	; 62
	emg_door_t emg;
	
	emg.hdr.master_id = gMasterId;
    156a:	80 91 e2 21 	lds	r24, 0x21E2
    156e:	90 91 e3 21 	lds	r25, 0x21E3
    1572:	a0 91 e4 21 	lds	r26, 0x21E4
    1576:	b0 91 e5 21 	lds	r27, 0x21E5
    157a:	8e 83       	std	Y+6, r24	; 0x06
    157c:	9f 83       	std	Y+7, r25	; 0x07
    157e:	a8 87       	std	Y+8, r26	; 0x08
    1580:	b9 87       	std	Y+9, r27	; 0x09
	emg.hdr.slave_id = gEnv.id;
    1582:	80 91 d6 21 	lds	r24, 0x21D6
    1586:	90 91 d7 21 	lds	r25, 0x21D7
    158a:	a0 91 d8 21 	lds	r26, 0x21D8
    158e:	b0 91 d9 21 	lds	r27, 0x21D9
    1592:	8a 83       	std	Y+2, r24	; 0x02
    1594:	9b 83       	std	Y+3, r25	; 0x03
    1596:	ac 83       	std	Y+4, r26	; 0x04
    1598:	bd 83       	std	Y+5, r27	; 0x05
	emg.hdr.payload = PAYLOAD_EMG_DOOR;
    159a:	8e e0       	ldi	r24, 0x0E	; 14
    159c:	8c 87       	std	Y+12, r24	; 0x0c
	
	set_freq();
    159e:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&emg,sizeof(emg_door_t),1);
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	6c e1       	ldi	r22, 0x1C	; 28
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
}
    15ae:	6c 96       	adiw	r28, 0x1c	; 28
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	de bf       	out	0x3e, r29	; 62
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	08 95       	ret

000015ba <setup_ack>:
/*
setup_ack
*/

void setup_ack(u32 id)
{
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	6c 97       	sbiw	r28, 0x1c	; 28
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	de bf       	out	0x3e, r29	; 62
	setup_t setup;
	
	setup.hdr.master_id = gMasterId;
    15cc:	00 91 e2 21 	lds	r16, 0x21E2
    15d0:	10 91 e3 21 	lds	r17, 0x21E3
    15d4:	20 91 e4 21 	lds	r18, 0x21E4
    15d8:	30 91 e5 21 	lds	r19, 0x21E5
    15dc:	0e 83       	std	Y+6, r16	; 0x06
    15de:	1f 83       	std	Y+7, r17	; 0x07
    15e0:	28 87       	std	Y+8, r18	; 0x08
    15e2:	39 87       	std	Y+9, r19	; 0x09
	setup.hdr.slave_id = id;
    15e4:	6a 83       	std	Y+2, r22	; 0x02
    15e6:	7b 83       	std	Y+3, r23	; 0x03
    15e8:	8c 83       	std	Y+4, r24	; 0x04
    15ea:	9d 83       	std	Y+5, r25	; 0x05
	setup.hdr.payload = PAYLOAD_SETUP_ID;
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	8c 87       	std	Y+12, r24	; 0x0c
	//_delay_ms(300);
	set_freq();
    15f0:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&setup,sizeof(setup_t),1);
    15f4:	41 e0       	ldi	r20, 0x01	; 1
    15f6:	6c e1       	ldi	r22, 0x1C	; 28
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
}
    1600:	6c 96       	adiw	r28, 0x1c	; 28
    1602:	cd bf       	out	0x3d, r28	; 61
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	df 91       	pop	r29
    1608:	cf 91       	pop	r28
    160a:	1f 91       	pop	r17
    160c:	0f 91       	pop	r16
    160e:	08 95       	ret

00001610 <driver_door_err_report_ack>:



void driver_door_err_report_ack(void)
{
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	6c 97       	sbiw	r28, 0x1c	; 28
    161a:	cd bf       	out	0x3d, r28	; 61
    161c:	de bf       	out	0x3e, r29	; 62
	set_t set;
	
	set.hdr.master_id = gMasterId;
    161e:	80 91 e2 21 	lds	r24, 0x21E2
    1622:	90 91 e3 21 	lds	r25, 0x21E3
    1626:	a0 91 e4 21 	lds	r26, 0x21E4
    162a:	b0 91 e5 21 	lds	r27, 0x21E5
    162e:	8e 83       	std	Y+6, r24	; 0x06
    1630:	9f 83       	std	Y+7, r25	; 0x07
    1632:	a8 87       	std	Y+8, r26	; 0x08
    1634:	b9 87       	std	Y+9, r27	; 0x09
	set.hdr.slave_id = gEnv.id;
    1636:	80 91 d6 21 	lds	r24, 0x21D6
    163a:	90 91 d7 21 	lds	r25, 0x21D7
    163e:	a0 91 d8 21 	lds	r26, 0x21D8
    1642:	b0 91 d9 21 	lds	r27, 0x21D9
    1646:	8a 83       	std	Y+2, r24	; 0x02
    1648:	9b 83       	std	Y+3, r25	; 0x03
    164a:	ac 83       	std	Y+4, r26	; 0x04
    164c:	bd 83       	std	Y+5, r27	; 0x05
	set.hdr.payload = PAYLOAD_DRIVER_DOOR_ERR_REPORT;
    164e:	80 e1       	ldi	r24, 0x10	; 16
    1650:	8c 87       	std	Y+12, r24	; 0x0c
	
	set_freq();
    1652:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&set,sizeof(set_t),1);
    1656:	41 e0       	ldi	r20, 0x01	; 1
    1658:	6c e1       	ldi	r22, 0x1C	; 28
    165a:	ce 01       	movw	r24, r28
    165c:	01 96       	adiw	r24, 0x01	; 1
    165e:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
}
    1662:	6c 96       	adiw	r28, 0x1c	; 28
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	df 91       	pop	r29
    166a:	cf 91       	pop	r28
    166c:	08 95       	ret

0000166e <wait_input_freq_adjust>:




void wait_input_freq_adjust(void)
{
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cc e2       	ldi	r28, 0x2C	; 44
    1678:	d1 e0       	ldi	r29, 0x01	; 1
			set_security_mode_led(false);
		}
		else if(get_security_reset()==true)
		{
			
			gTele_env.ctl_data.adj_freq--;
    167a:	0f e5       	ldi	r16, 0x5F	; 95
    167c:	11 e2       	ldi	r17, 0x21	; 33
void wait_input_freq_adjust(void)
{
	int time_cnt=0;
	while(time_cnt < 300)
	{
		wdt_reset();
    167e:	a8 95       	wdr
		delay_ms(10);
    1680:	8a e0       	ldi	r24, 0x0A	; 10
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>
		time_cnt++;

		if(get_security_set()==true)
    1688:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	a1 f4       	brne	.+40     	; 0x16b8 <wait_input_freq_adjust+0x4a>
		{
			
			gTele_env.ctl_data.adj_freq++;
    1690:	f8 01       	movw	r30, r16
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
				gTele_env.ctl_data.adj_freq++;

			}
			#endif
			
			tele_env_save(&gTele_env);
    169c:	c8 01       	movw	r24, r16
    169e:	0e 94 b2 03 	call	0x764	; 0x764 <tele_env_save>
			
			set_security_mode_led(true);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
			delay_ms(100);
    16a8:	84 e6       	ldi	r24, 0x64	; 100
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>
			set_security_mode_led(false);
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    16b6:	17 c0       	rjmp	.+46     	; 0x16e6 <wait_input_freq_adjust+0x78>
		}
		else if(get_security_reset()==true)
    16b8:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	99 f4       	brne	.+38     	; 0x16e6 <wait_input_freq_adjust+0x78>
		{
			
			gTele_env.ctl_data.adj_freq--;
    16c0:	f8 01       	movw	r30, r16
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	80 83       	st	Z, r24
    16ca:	91 83       	std	Z+1, r25	; 0x01
				{
					gTele_env.ctl_data.freq_add_sub = 0x80;
				}
			}
			#endif
			tele_env_save(&gTele_env);
    16cc:	c8 01       	movw	r24, r16
    16ce:	0e 94 b2 03 	call	0x764	; 0x764 <tele_env_save>
			set_emg_led(true);
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
			delay_ms(100);
    16d8:	84 e6       	ldi	r24, 0x64	; 100
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>
			set_emg_led(false);
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
    16e6:	21 97       	sbiw	r28, 0x01	; 1


void wait_input_freq_adjust(void)
{
	int time_cnt=0;
	while(time_cnt < 300)
    16e8:	20 97       	sbiw	r28, 0x00	; 0
    16ea:	49 f6       	brne	.-110    	; 0x167e <wait_input_freq_adjust+0x10>
			delay_ms(100);
			set_emg_led(false);
		}

	}
}
    16ec:	df 91       	pop	r29
    16ee:	cf 91       	pop	r28
    16f0:	1f 91       	pop	r17
    16f2:	0f 91       	pop	r16
    16f4:	08 95       	ret

000016f6 <test_wave_mode>:




void test_wave_mode(u8 test_mode)
{
    16f6:	18 2f       	mov	r17, r24
	int i;
	int old,new;


	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
    16f8:	66 e0       	ldi	r22, 0x06	; 6
    16fa:	82 e0       	ldi	r24, 0x02	; 2
    16fc:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
	cc1101_init_reg();
    1700:	0e 94 56 02 	call	0x4ac	; 0x4ac <cc1101_init_reg>
	cc1101_8PATABLE_write_reg();
    1704:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <cc1101_8PATABLE_write_reg>
	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
    1708:	66 e0       	ldi	r22, 0x06	; 6
    170a:	82 e0       	ldi	r24, 0x02	; 2
    170c:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>


	while(1)
	{
		for(i = 0 ; i < 1 ; i++)
    1710:	c0 e0       	ldi	r28, 0x00	; 0
    1712:	d0 e0       	ldi	r29, 0x00	; 0
    1714:	19 c0       	rjmp	.+50     	; 0x1748 <test_wave_mode+0x52>
		{
			set_emg_led(1);
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
    171c:	2f ef       	ldi	r18, 0xFF	; 255
    171e:	81 ee       	ldi	r24, 0xE1	; 225
    1720:	94 e0       	ldi	r25, 0x04	; 4
    1722:	21 50       	subi	r18, 0x01	; 1
    1724:	80 40       	sbci	r24, 0x00	; 0
    1726:	90 40       	sbci	r25, 0x00	; 0
    1728:	e1 f7       	brne	.-8      	; 0x1722 <test_wave_mode+0x2c>
    172a:	00 c0       	rjmp	.+0      	; 0x172c <test_wave_mode+0x36>
    172c:	00 00       	nop
			_delay_ms(50);
			set_emg_led(0);
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
    1734:	2f ef       	ldi	r18, 0xFF	; 255
    1736:	81 ee       	ldi	r24, 0xE1	; 225
    1738:	94 e0       	ldi	r25, 0x04	; 4
    173a:	21 50       	subi	r18, 0x01	; 1
    173c:	80 40       	sbci	r24, 0x00	; 0
    173e:	90 40       	sbci	r25, 0x00	; 0
    1740:	e1 f7       	brne	.-8      	; 0x173a <test_wave_mode+0x44>
    1742:	00 c0       	rjmp	.+0      	; 0x1744 <test_wave_mode+0x4e>
    1744:	00 00       	nop
	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);


	while(1)
	{
		for(i = 0 ; i < 1 ; i++)
    1746:	21 96       	adiw	r28, 0x01	; 1
    1748:	1c 16       	cp	r1, r28
    174a:	1d 06       	cpc	r1, r29
    174c:	24 f7       	brge	.-56     	; 0x1716 <test_wave_mode+0x20>
			set_emg_led(0);
			_delay_ms(50);
		}		
		

		if(test_mode==0x0d)
    174e:	1d 30       	cpi	r17, 0x0D	; 13
    1750:	c9 f4       	brne	.+50     	; 0x1784 <test_wave_mode+0x8e>
		{
			cc1100_cmd_idle();
    1752:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
			set_freq();
    1756:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
			delay_ms(100);
    175a:	84 e6       	ldi	r24, 0x64	; 100
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>


			cc1101_rtx_reg_set(0); // tx
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	0e 94 6d 02 	call	0x4da	; 0x4da <cc1101_rtx_reg_set>
			cc1100_write_reg(CC1100_REG_PKTCTRL0,0x22);	//random TX mode
    1768:	62 e2       	ldi	r22, 0x22	; 34
    176a:	88 e0       	ldi	r24, 0x08	; 8
    176c:	0e 94 a9 01 	call	0x352	; 0x352 <cc1100_write_reg>
			cc1101_carrier_wave_setup();
    1770:	0e 94 e7 02 	call	0x5ce	; 0x5ce <cc1101_carrier_wave_setup>
			cc1100_cmd_idle();
    1774:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
			cc1100_cmd_calibrate();
    1778:	0e 94 49 02 	call	0x492	; 0x492 <cc1100_cmd_calibrate>
			cc1100_cmd_tx();			
    177c:	85 e3       	ldi	r24, 0x35	; 53
    177e:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
    1782:	0c c0       	rjmp	.+24     	; 0x179c <test_wave_mode+0xa6>
		}
		else if(test_mode==0x0e)
    1784:	1e 30       	cpi	r17, 0x0E	; 14
    1786:	51 f4       	brne	.+20     	; 0x179c <test_wave_mode+0xa6>
		{
			cc1100_cmd_idle();
    1788:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
			set_freq();
    178c:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
			delay_ms(100);
    1790:	84 e6       	ldi	r24, 0x64	; 100
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>
			cc1101_tx_carrier();
    1798:	0e 94 51 06 	call	0xca2	; 0xca2 <cc1101_tx_carrier>



		
		//delay_ms(3000);
		wait_input_freq_adjust();
    179c:	0e 94 37 0b 	call	0x166e	; 0x166e <wait_input_freq_adjust>

		cc1100_cmd_idle();
    17a0:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		//delay_ms(3000);
		wait_input_freq_adjust();
    17a4:	0e 94 37 0b 	call	0x166e	; 0x166e <wait_input_freq_adjust>
	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);


	while(1)
	{
		for(i = 0 ; i < 1 ; i++)
    17a8:	c0 e0       	ldi	r28, 0x00	; 0
    17aa:	d0 e0       	ldi	r29, 0x00	; 0

		cc1100_cmd_idle();
		//delay_ms(3000);
		wait_input_freq_adjust();

	}
    17ac:	cd cf       	rjmp	.-102    	; 0x1748 <test_wave_mode+0x52>

000017ae <test_sound_message_mode>:
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    17ae:	10 92 08 22 	sts	0x2208, r1
{
	buzzer_on(false);

	while(1)
	{
		for(int i=1;i<9;i++)
    17b2:	01 e0       	ldi	r16, 0x01	; 1
    17b4:	10 e0       	ldi	r17, 0x00	; 0
		{

			set_voice(i);
			while(PORTA.IN & 0x02)
    17b6:	c0 e0       	ldi	r28, 0x00	; 0
    17b8:	d6 e0       	ldi	r29, 0x06	; 6
	while(1)
	{
		for(int i=1;i<9;i++)
		{

			set_voice(i);
    17ba:	80 2f       	mov	r24, r16
    17bc:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
			while(PORTA.IN & 0x02)
    17c0:	88 85       	ldd	r24, Y+8	; 0x08
    17c2:	81 ff       	sbrs	r24, 1
    17c4:	0d c0       	rjmp	.+26     	; 0x17e0 <test_sound_message_mode+0x32>
			{
				wdt_reset();
    17c6:	a8 95       	wdr
    17c8:	2f ef       	ldi	r18, 0xFF	; 255
    17ca:	87 ea       	ldi	r24, 0xA7	; 167
    17cc:	91 e6       	ldi	r25, 0x61	; 97
    17ce:	21 50       	subi	r18, 0x01	; 1
    17d0:	80 40       	sbci	r24, 0x00	; 0
    17d2:	90 40       	sbci	r25, 0x00	; 0
    17d4:	e1 f7       	brne	.-8      	; 0x17ce <test_sound_message_mode+0x20>
    17d6:	00 c0       	rjmp	.+0      	; 0x17d8 <test_sound_message_mode+0x2a>
    17d8:	00 00       	nop
	{
		for(int i=1;i<9;i++)
		{

			set_voice(i);
			while(PORTA.IN & 0x02)
    17da:	88 85       	ldd	r24, Y+8	; 0x08
    17dc:	81 fd       	sbrc	r24, 1
    17de:	f3 cf       	rjmp	.-26     	; 0x17c6 <test_sound_message_mode+0x18>
{
	buzzer_on(false);

	while(1)
	{
		for(int i=1;i<9;i++)
    17e0:	0f 5f       	subi	r16, 0xFF	; 255
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
    17e4:	09 30       	cpi	r16, 0x09	; 9
    17e6:	11 05       	cpc	r17, r1
    17e8:	44 f3       	brlt	.-48     	; 0x17ba <test_sound_message_mode+0xc>
    17ea:	01 e0       	ldi	r16, 0x01	; 1
    17ec:	10 e0       	ldi	r17, 0x00	; 0
    17ee:	e5 cf       	rjmp	.-54     	; 0x17ba <test_sound_message_mode+0xc>

000017f0 <comm_led>:
	int i;
	
	
	for(i = 0 ; i < 1 ; i++)
	{
		set_communication_led(1);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <set_communication_led>
    17f6:	2f ef       	ldi	r18, 0xFF	; 255
    17f8:	81 ee       	ldi	r24, 0xE1	; 225
    17fa:	94 e0       	ldi	r25, 0x04	; 4
    17fc:	21 50       	subi	r18, 0x01	; 1
    17fe:	80 40       	sbci	r24, 0x00	; 0
    1800:	90 40       	sbci	r25, 0x00	; 0
    1802:	e1 f7       	brne	.-8      	; 0x17fc <comm_led+0xc>
    1804:	00 c0       	rjmp	.+0      	; 0x1806 <comm_led+0x16>
    1806:	00 00       	nop
		_delay_ms(50);
		set_communication_led(0);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <set_communication_led>
    180e:	2f ef       	ldi	r18, 0xFF	; 255
    1810:	81 ee       	ldi	r24, 0xE1	; 225
    1812:	94 e0       	ldi	r25, 0x04	; 4
    1814:	21 50       	subi	r18, 0x01	; 1
    1816:	80 40       	sbci	r24, 0x00	; 0
    1818:	90 40       	sbci	r25, 0x00	; 0
    181a:	e1 f7       	brne	.-8      	; 0x1814 <comm_led+0x24>
    181c:	00 c0       	rjmp	.+0      	; 0x181e <comm_led+0x2e>
    181e:	00 00       	nop
    1820:	08 95       	ret

00001822 <emg_send>:
{
	gBuzzer = buz;
}

u8 emg_send(u8 emg)
{
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	6e 97       	sbiw	r28, 0x1e	; 30
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	de bf       	out	0x3e, r29	; 62
	int length;
	remote_emg_t temg;
	u8 rssi,lqi;
	
	
	temg.hdr.slave_id = gEnv.id;
    1834:	40 91 d6 21 	lds	r20, 0x21D6
    1838:	50 91 d7 21 	lds	r21, 0x21D7
    183c:	60 91 d8 21 	lds	r22, 0x21D8
    1840:	70 91 d9 21 	lds	r23, 0x21D9
    1844:	4a 83       	std	Y+2, r20	; 0x02
    1846:	5b 83       	std	Y+3, r21	; 0x03
    1848:	6c 83       	std	Y+4, r22	; 0x04
    184a:	7d 83       	std	Y+5, r23	; 0x05
	temg.hdr.payload = PAYLOAD_REMOCON_EMG;
    184c:	95 e0       	ldi	r25, 0x05	; 5
    184e:	9c 87       	std	Y+12, r25	; 0x0c
	temg.emg = emg;
    1850:	8d 87       	std	Y+13, r24	; 0x0d

	set_freq();
    1852:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&temg,sizeof(emg_t),1);
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	6c e1       	ldi	r22, 0x1C	; 28
    185a:	ce 01       	movw	r24, r28
    185c:	01 96       	adiw	r24, 0x01	; 1
    185e:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
	
	send_timer = 0;
    1862:	10 92 1e 20 	sts	0x201E, r1
    1866:	10 92 1f 20 	sts	0x201F, r1
		
		set_freq();
		length = cc1101_rx((u8 *)&temg,&rssi,&lqi,RX_NOMAL);
		if(length > 0 )
		{
			if(temg.hdr.slave_id == gEnv.id && temg.hdr.payload == PAYLOAD_REMOCON_EMG)
    186a:	06 ed       	ldi	r16, 0xD6	; 214
    186c:	11 e2       	ldi	r17, 0x21	; 33
	send_timer = 0;
	
	while(1)
	{
		
		set_freq();
    186e:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		length = cc1101_rx((u8 *)&temg,&rssi,&lqi,RX_NOMAL);
    1872:	22 e0       	ldi	r18, 0x02	; 2
    1874:	ae 01       	movw	r20, r28
    1876:	42 5e       	subi	r20, 0xE2	; 226
    1878:	5f 4f       	sbci	r21, 0xFF	; 255
    187a:	be 01       	movw	r22, r28
    187c:	63 5e       	subi	r22, 0xE3	; 227
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	ce 01       	movw	r24, r28
    1882:	01 96       	adiw	r24, 0x01	; 1
    1884:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
		if(length > 0 )
    1888:	88 23       	and	r24, r24
    188a:	d9 f0       	breq	.+54     	; 0x18c2 <emg_send+0xa0>
		{
			if(temg.hdr.slave_id == gEnv.id && temg.hdr.payload == PAYLOAD_REMOCON_EMG)
    188c:	f8 01       	movw	r30, r16
    188e:	80 81       	ld	r24, Z
    1890:	91 81       	ldd	r25, Z+1	; 0x01
    1892:	a2 81       	ldd	r26, Z+2	; 0x02
    1894:	b3 81       	ldd	r27, Z+3	; 0x03
    1896:	4a 81       	ldd	r20, Y+2	; 0x02
    1898:	5b 81       	ldd	r21, Y+3	; 0x03
    189a:	6c 81       	ldd	r22, Y+4	; 0x04
    189c:	7d 81       	ldd	r23, Y+5	; 0x05
    189e:	48 17       	cp	r20, r24
    18a0:	59 07       	cpc	r21, r25
    18a2:	6a 07       	cpc	r22, r26
    18a4:	7b 07       	cpc	r23, r27
    18a6:	69 f4       	brne	.+26     	; 0x18c2 <emg_send+0xa0>
    18a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    18aa:	85 30       	cpi	r24, 0x05	; 5
    18ac:	51 f4       	brne	.+20     	; 0x18c2 <emg_send+0xa0>
			{
				send_timer = -1;
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	9f ef       	ldi	r25, 0xFF	; 255
    18b2:	80 93 1e 20 	sts	0x201E, r24
    18b6:	90 93 1f 20 	sts	0x201F, r25
				comm_led();
    18ba:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <comm_led>

				return true;
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	10 c0       	rjmp	.+32     	; 0x18e2 <emg_send+0xc0>
			}
		}
		cc1100_cmd_idle();
    18c2:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		
		if(send_timer > 1000)
    18c6:	80 91 1e 20 	lds	r24, 0x201E
    18ca:	90 91 1f 20 	lds	r25, 0x201F
    18ce:	89 3e       	cpi	r24, 0xE9	; 233
    18d0:	93 40       	sbci	r25, 0x03	; 3
    18d2:	6c f2       	brlt	.-102    	; 0x186e <emg_send+0x4c>
		{
			send_timer = -1;
    18d4:	8f ef       	ldi	r24, 0xFF	; 255
    18d6:	9f ef       	ldi	r25, 0xFF	; 255
    18d8:	80 93 1e 20 	sts	0x201E, r24
    18dc:	90 93 1f 20 	sts	0x201F, r25
		}
		// need timeout;
	}
	
	
	return false;
    18e0:	80 e0       	ldi	r24, 0x00	; 0
}
    18e2:	6e 96       	adiw	r28, 0x1e	; 30
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <emg_set_process>:
	//set_voice(5);
	
	
	//for(int i=0;i<7;i++)
	{
		if(emg_send(true))
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	0e 94 11 0c 	call	0x1822	; 0x1822 <emg_send>
    18f8:	88 23       	and	r24, r24
    18fa:	69 f0       	breq	.+26     	; 0x1916 <emg_set_process+0x24>
		{
			emg_state = true;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 5e 21 	sts	0x215E, r24
			remocon_emg = true;
    1902:	80 93 5b 21 	sts	0x215B, r24
			set_emg_led(true);
    1906:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
			set_emg_button_led(true);
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
			set_voice(5);
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
    1916:	08 95       	ret

00001918 <door_open_send>:
	
}


u8 door_open_send(u8 door)
{
    1918:	2f 92       	push	r2
    191a:	3f 92       	push	r3
    191c:	4f 92       	push	r4
    191e:	5f 92       	push	r5
    1920:	6f 92       	push	r6
    1922:	7f 92       	push	r7
    1924:	8f 92       	push	r8
    1926:	9f 92       	push	r9
    1928:	af 92       	push	r10
    192a:	bf 92       	push	r11
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	6e 97       	sbiw	r28, 0x1e	; 30
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	78 2e       	mov	r7, r24
	u8 rssi,lqi;
	u32 GetTime=0;
	u8	th;
	u8	carrier_sen_check=0;
	
	for(int i=0;i<8;i++)
    1948:	a1 2c       	mov	r10, r1
    194a:	b1 2c       	mov	r11, r1
	{	
		wdt_reset();
		
		tdoor.hdr.slave_id = gEnv.id;
    194c:	06 ed       	ldi	r16, 0xD6	; 214
    194e:	11 e2       	ldi	r17, 0x21	; 33
		tdoor.hdr.payload = PAYLOAD_DOOR_OPEN_CMD;
    1950:	0f 2e       	mov	r0, r31
    1952:	f3 e0       	ldi	r31, 0x03	; 3
    1954:	6f 2e       	mov	r6, r31
    1956:	f0 2d       	mov	r31, r0
		
		carrier_sen_check = cc1101_tx(&tdoor,sizeof(door_open_t),th);
		
		if(carrier_sen_check == CARRIER_SENSE_DETECT)
		{
			GetTime = RF_TIME_OUT_1SEC;
    1958:	0f 2e       	mov	r0, r31
    195a:	f2 eb       	ldi	r31, 0xB2	; 178
    195c:	2f 2e       	mov	r2, r31
    195e:	f0 2d       	mov	r31, r0
    1960:	0f 2e       	mov	r0, r31
    1962:	f5 e1       	ldi	r31, 0x15	; 21
    1964:	3f 2e       	mov	r3, r31
    1966:	f0 2d       	mov	r31, r0
    1968:	41 2c       	mov	r4, r1
    196a:	51 2c       	mov	r5, r1
			}
			cc1100_cmd_idle();
			
			if(send_timer > GetTime)
			{
				send_timer = -1;
    196c:	88 24       	eor	r8, r8
    196e:	8a 94       	dec	r8
    1970:	98 2c       	mov	r9, r8
	u8	th;
	u8	carrier_sen_check=0;
	
	for(int i=0;i<8;i++)
	{	
		wdt_reset();
    1972:	a8 95       	wdr
		
		tdoor.hdr.slave_id = gEnv.id;
    1974:	f8 01       	movw	r30, r16
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	a2 81       	ldd	r26, Z+2	; 0x02
    197c:	b3 81       	ldd	r27, Z+3	; 0x03
    197e:	8a 83       	std	Y+2, r24	; 0x02
    1980:	9b 83       	std	Y+3, r25	; 0x03
    1982:	ac 83       	std	Y+4, r26	; 0x04
    1984:	bd 83       	std	Y+5, r27	; 0x05
		tdoor.hdr.payload = PAYLOAD_DOOR_OPEN_CMD;
    1986:	6c 86       	std	Y+12, r6	; 0x0c
		if(door == 1)
    1988:	f1 e0       	ldi	r31, 0x01	; 1
    198a:	7f 12       	cpse	r7, r31
    198c:	07 c0       	rjmp	.+14     	; 0x199c <door_open_send+0x84>
			tdoor.door = gDriver == true ? 1 : 2;
    198e:	80 91 5c 21 	lds	r24, 0x215C
    1992:	81 30       	cpi	r24, 0x01	; 1
    1994:	09 f0       	breq	.+2      	; 0x1998 <door_open_send+0x80>
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	8d 87       	std	Y+13, r24	; 0x0d
    199a:	01 c0       	rjmp	.+2      	; 0x199e <door_open_send+0x86>
		else
			tdoor.door = door;
    199c:	7d 86       	std	Y+13, r7	; 0x0d
			
		tdoor.open = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	8e 87       	std	Y+14, r24	; 0x0e
		else
		{
			th = 0;
		}
		
		set_freq();
    19a2:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		else
			tdoor.door = door;
			
		tdoor.open = 1;
		
		if(i==4 || i==6)
    19a6:	41 e0       	ldi	r20, 0x01	; 1
    19a8:	c5 01       	movw	r24, r10
    19aa:	8d 7f       	andi	r24, 0xFD	; 253
    19ac:	04 97       	sbiw	r24, 0x04	; 4
    19ae:	09 f0       	breq	.+2      	; 0x19b2 <door_open_send+0x9a>
    19b0:	40 e0       	ldi	r20, 0x00	; 0
			th = 0;
		}
		
		set_freq();
		
		carrier_sen_check = cc1101_tx(&tdoor,sizeof(door_open_t),th);
    19b2:	6c e1       	ldi	r22, 0x1C	; 28
    19b4:	ce 01       	movw	r24, r28
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
		
		if(carrier_sen_check == CARRIER_SENSE_DETECT)
    19bc:	85 35       	cpi	r24, 0x55	; 85
    19be:	29 f4       	brne	.+10     	; 0x19ca <door_open_send+0xb2>
		{
			GetTime = RF_TIME_OUT_1SEC;
    19c0:	c2 2c       	mov	r12, r2
    19c2:	d3 2c       	mov	r13, r3
    19c4:	e4 2c       	mov	r14, r4
    19c6:	f5 2c       	mov	r15, r5
    19c8:	07 c0       	rjmp	.+14     	; 0x19d8 <door_open_send+0xc0>
		}
		else
		{
			GetTime = RF_TIME_OUT_10MSEC;
    19ca:	0f 2e       	mov	r0, r31
    19cc:	f7 e3       	ldi	r31, 0x37	; 55
    19ce:	cf 2e       	mov	r12, r31
    19d0:	d1 2c       	mov	r13, r1
    19d2:	e1 2c       	mov	r14, r1
    19d4:	f1 2c       	mov	r15, r1
    19d6:	f0 2d       	mov	r31, r0
		}
		
		send_timer = 0;
    19d8:	10 92 1e 20 	sts	0x201E, r1
    19dc:	10 92 1f 20 	sts	0x201F, r1
		while(1)
		{
			
			set_freq();
    19e0:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
			length = cc1101_rx((u8 *)&tdoor,&rssi,&lqi,RX_NOMAL);
    19e4:	22 e0       	ldi	r18, 0x02	; 2
    19e6:	ae 01       	movw	r20, r28
    19e8:	42 5e       	subi	r20, 0xE2	; 226
    19ea:	5f 4f       	sbci	r21, 0xFF	; 255
    19ec:	be 01       	movw	r22, r28
    19ee:	63 5e       	subi	r22, 0xE3	; 227
    19f0:	7f 4f       	sbci	r23, 0xFF	; 255
    19f2:	ce 01       	movw	r24, r28
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
			if(length > 0 )
    19fa:	88 23       	and	r24, r24
    19fc:	f1 f0       	breq	.+60     	; 0x1a3a <door_open_send+0x122>
			{
				if(tdoor.hdr.slave_id == gEnv.id && tdoor.hdr.payload == PAYLOAD_DOOR_OPEN_CMD)
    19fe:	f8 01       	movw	r30, r16
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	a2 81       	ldd	r26, Z+2	; 0x02
    1a06:	b3 81       	ldd	r27, Z+3	; 0x03
    1a08:	4a 81       	ldd	r20, Y+2	; 0x02
    1a0a:	5b 81       	ldd	r21, Y+3	; 0x03
    1a0c:	6c 81       	ldd	r22, Y+4	; 0x04
    1a0e:	7d 81       	ldd	r23, Y+5	; 0x05
    1a10:	48 17       	cp	r20, r24
    1a12:	59 07       	cpc	r21, r25
    1a14:	6a 07       	cpc	r22, r26
    1a16:	7b 07       	cpc	r23, r27
    1a18:	81 f4       	brne	.+32     	; 0x1a3a <door_open_send+0x122>
    1a1a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	69 f4       	brne	.+26     	; 0x1a3a <door_open_send+0x122>
				{
					send_timer = -1;
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
    1a24:	80 93 1e 20 	sts	0x201E, r24
    1a28:	90 93 1f 20 	sts	0x201F, r25
					comm_led();
    1a2c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <comm_led>
					
					if(tdoor.reserve[0]==false)
    1a30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a32:	81 11       	cpse	r24, r1
    1a34:	1e c0       	rjmp	.+60     	; 0x1a72 <door_open_send+0x15a>
					{
						return Door_open_deny;
    1a36:	84 e0       	ldi	r24, 0x04	; 4
    1a38:	1f c0       	rjmp	.+62     	; 0x1a78 <door_open_send+0x160>
					}

					return true;
				}
			}
			cc1100_cmd_idle();
    1a3a:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
			
			if(send_timer > GetTime)
    1a3e:	80 91 1e 20 	lds	r24, 0x201E
    1a42:	90 91 1f 20 	lds	r25, 0x201F
    1a46:	aa 27       	eor	r26, r26
    1a48:	97 fd       	sbrc	r25, 7
    1a4a:	a0 95       	com	r26
    1a4c:	ba 2f       	mov	r27, r26
    1a4e:	c8 16       	cp	r12, r24
    1a50:	d9 06       	cpc	r13, r25
    1a52:	ea 06       	cpc	r14, r26
    1a54:	fb 06       	cpc	r15, r27
    1a56:	20 f6       	brcc	.-120    	; 0x19e0 <door_open_send+0xc8>
			{
				send_timer = -1;
    1a58:	80 92 1e 20 	sts	0x201E, r8
    1a5c:	90 92 1f 20 	sts	0x201F, r9
	u8 rssi,lqi;
	u32 GetTime=0;
	u8	th;
	u8	carrier_sen_check=0;
	
	for(int i=0;i<8;i++)
    1a60:	ff ef       	ldi	r31, 0xFF	; 255
    1a62:	af 1a       	sub	r10, r31
    1a64:	bf 0a       	sbc	r11, r31
    1a66:	88 e0       	ldi	r24, 0x08	; 8
    1a68:	a8 16       	cp	r10, r24
    1a6a:	b1 04       	cpc	r11, r1
    1a6c:	09 f0       	breq	.+2      	; 0x1a70 <door_open_send+0x158>
    1a6e:	81 cf       	rjmp	.-254    	; 0x1972 <door_open_send+0x5a>
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <door_open_send+0x15e>
					if(tdoor.reserve[0]==false)
					{
						return Door_open_deny;
					}

					return true;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <door_open_send+0x160>
				break;
			}
		}
	}
		
	return false;
    1a76:	80 e0       	ldi	r24, 0x00	; 0
}
    1a78:	6e 96       	adiw	r28, 0x1e	; 30
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	ff 90       	pop	r15
    1a88:	ef 90       	pop	r14
    1a8a:	df 90       	pop	r13
    1a8c:	cf 90       	pop	r12
    1a8e:	bf 90       	pop	r11
    1a90:	af 90       	pop	r10
    1a92:	9f 90       	pop	r9
    1a94:	8f 90       	pop	r8
    1a96:	7f 90       	pop	r7
    1a98:	6f 90       	pop	r6
    1a9a:	5f 90       	pop	r5
    1a9c:	4f 90       	pop	r4
    1a9e:	3f 90       	pop	r3
    1aa0:	2f 90       	pop	r2
    1aa2:	08 95       	ret

00001aa4 <emg_driver_door_process>:

void emg_driver_door_process(void)
{
	if(door_open_send(1) == false)
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <door_open_send>
    1aaa:	81 11       	cpse	r24, r1
    1aac:	06 c0       	rjmp	.+12     	; 0x1aba <emg_driver_door_process+0x16>
	{
		set_voice(8);
    1aae:	88 e0       	ldi	r24, 0x08	; 8
    1ab0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
		buzzer_error();
    1ab4:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <buzzer_error>
		return;		
    1ab8:	08 95       	ret
	}
	
	if(sound_mute == -1)
    1aba:	80 91 26 20 	lds	r24, 0x2026
    1abe:	90 91 27 20 	lds	r25, 0x2027
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	19 f4       	brne	.+6      	; 0x1acc <emg_driver_door_process+0x28>
	{
		set_voice(3);
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
    1acc:	08 95       	ret

00001ace <emg_rear_door_process>:

void emg_rear_door_process(void)
{
	u8 ret;
	
	ret = door_open_send(3);
    1ace:	83 e0       	ldi	r24, 0x03	; 3
    1ad0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <door_open_send>
	
	
	//if(door_open_send(3) == false)
	if(ret == false)
    1ad4:	81 11       	cpse	r24, r1
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <emg_rear_door_process+0x16>
	{
		set_voice(8);
    1ad8:	88 e0       	ldi	r24, 0x08	; 8
    1ada:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
		buzzer_error();
    1ade:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <buzzer_error>
		return;
    1ae2:	08 95       	ret
	}
	
	if(ret == Door_open_deny)
    1ae4:	84 30       	cpi	r24, 0x04	; 4
    1ae6:	79 f0       	breq	.+30     	; 0x1b06 <emg_rear_door_process+0x38>
		//set_voice(8);
		//set_voice(6);
		return;
	}
	
	if(sound_mute == -1)
    1ae8:	80 91 26 20 	lds	r24, 0x2026
    1aec:	90 91 27 20 	lds	r25, 0x2027
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	19 f4       	brne	.+6      	; 0x1afa <emg_rear_door_process+0x2c>
	{
		set_voice(3);
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
	}

	btn_ctl_deny_timeout_count=0;
    1afa:	10 92 2e 20 	sts	0x202E, r1
    1afe:	10 92 2f 20 	sts	0x202F, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    1b02:	10 92 08 22 	sts	0x2208, r1
    1b06:	08 95       	ret

00001b08 <emg_side_door_process>:

void emg_side_door_process(void)
{
	u8 ret;
	
	ret = door_open_send(4);
    1b08:	84 e0       	ldi	r24, 0x04	; 4
    1b0a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <door_open_send>
	
	//if(door_open_send(4) == false)
	if(ret == false)
    1b0e:	81 11       	cpse	r24, r1
    1b10:	06 c0       	rjmp	.+12     	; 0x1b1e <emg_side_door_process+0x16>
	{
		set_voice(8);
    1b12:	88 e0       	ldi	r24, 0x08	; 8
    1b14:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
		buzzer_error();
    1b18:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <buzzer_error>
		return;
    1b1c:	08 95       	ret
	}
	
	if(ret == Door_open_deny)
    1b1e:	84 30       	cpi	r24, 0x04	; 4
    1b20:	79 f0       	breq	.+30     	; 0x1b40 <emg_side_door_process+0x38>
		//set_voice(8);
		//set_voice(6);
		return;
	}
	
	if(sound_mute == -1)
    1b22:	80 91 26 20 	lds	r24, 0x2026
    1b26:	90 91 27 20 	lds	r25, 0x2027
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	19 f4       	brne	.+6      	; 0x1b34 <emg_side_door_process+0x2c>
	{
		set_voice(3);
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
	}

	btn_ctl_deny_timeout_count=0;
    1b34:	10 92 2e 20 	sts	0x202E, r1
    1b38:	10 92 2f 20 	sts	0x202F, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    1b3c:	10 92 08 22 	sts	0x2208, r1
    1b40:	08 95       	ret

00001b42 <set_send>:




u8 set_send(u8 set)
{
    1b42:	af 92       	push	r10
    1b44:	bf 92       	push	r11
    1b46:	cf 92       	push	r12
    1b48:	df 92       	push	r13
    1b4a:	ef 92       	push	r14
    1b4c:	ff 92       	push	r15
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	6e 97       	sbiw	r28, 0x1e	; 30
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	a8 2e       	mov	r10, r24
    1b62:	0f 2e       	mov	r0, r31
    1b64:	f5 e0       	ldi	r31, 0x05	; 5
    1b66:	ef 2e       	mov	r14, r31
    1b68:	f1 2c       	mov	r15, r1
    1b6a:	f0 2d       	mov	r31, r0
		#if 0
		tdoor.hdr.slave_id = gEnv.id;
		tdoor.hdr.payload = PAYLOAD_SET_CMD;
		#endif
		
		lset.hdr.slave_id = gEnv.id;
    1b6c:	06 ed       	ldi	r16, 0xD6	; 214
    1b6e:	11 e2       	ldi	r17, 0x21	; 33
		lset.hdr.payload = PAYLOAD_SET_CMD;
    1b70:	68 94       	set
    1b72:	bb 24       	eor	r11, r11
    1b74:	b2 f8       	bld	r11, 2
			}
			cc1100_cmd_idle();
			
			if(send_timer > GetTime)
			{
				send_timer = -1;
    1b76:	cc 24       	eor	r12, r12
    1b78:	ca 94       	dec	r12
    1b7a:	dc 2c       	mov	r13, r12
	u8	th;
	u8	carrier_sen_check=0;
	
	for(int i=0;i<5;i++)
	{
		wdt_reset();
    1b7c:	a8 95       	wdr
		#if 0
		tdoor.hdr.slave_id = gEnv.id;
		tdoor.hdr.payload = PAYLOAD_SET_CMD;
		#endif
		
		lset.hdr.slave_id = gEnv.id;
    1b7e:	f8 01       	movw	r30, r16
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	a2 81       	ldd	r26, Z+2	; 0x02
    1b86:	b3 81       	ldd	r27, Z+3	; 0x03
    1b88:	8a 83       	std	Y+2, r24	; 0x02
    1b8a:	9b 83       	std	Y+3, r25	; 0x03
    1b8c:	ac 83       	std	Y+4, r26	; 0x04
    1b8e:	bd 83       	std	Y+5, r27	; 0x05
		lset.hdr.payload = PAYLOAD_SET_CMD;
    1b90:	bc 86       	std	Y+12, r11	; 0x0c
		lset.set = set;
    1b92:	ad 86       	std	Y+13, r10	; 0x0d
		else
		{
			th = 0;
		}
		
		set_freq();
    1b94:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		cc1101_tx(&lset,sizeof(set_cmd_t),1);
    1b98:	41 e0       	ldi	r20, 0x01	; 1
    1b9a:	6c e1       	ldi	r22, 0x1C	; 28
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	01 96       	adiw	r24, 0x01	; 1
    1ba0:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
		else
		{
			GetTime = RF_TIME_OUT_10MSEC;
		}
		
		send_timer = 0;
    1ba4:	10 92 1e 20 	sts	0x201E, r1
    1ba8:	10 92 1f 20 	sts	0x201F, r1
		while(1)
		{
			
			set_freq();
    1bac:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
			//length = cc1101_rx((u8 *)&tdoor,&rssi,&lqi,RX_NOMAL);
			length = cc1101_rx((u8 *)&lset,&rssi,&lqi,RX_NOMAL);
    1bb0:	22 e0       	ldi	r18, 0x02	; 2
    1bb2:	ae 01       	movw	r20, r28
    1bb4:	42 5e       	subi	r20, 0xE2	; 226
    1bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb8:	be 01       	movw	r22, r28
    1bba:	63 5e       	subi	r22, 0xE3	; 227
    1bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
			if(length > 0 )
    1bc6:	88 23       	and	r24, r24
    1bc8:	d9 f0       	breq	.+54     	; 0x1c00 <set_send+0xbe>
			{
				//if(tdoor.hdr.slave_id == gEnv.id && tdoor.hdr.payload == PAYLOAD_SET_CMD)
				if(lset.hdr.slave_id == gEnv.id && lset.hdr.payload == PAYLOAD_SET_CMD)
    1bca:	8a 81       	ldd	r24, Y+2	; 0x02
    1bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1bce:	ac 81       	ldd	r26, Y+4	; 0x04
    1bd0:	bd 81       	ldd	r27, Y+5	; 0x05
    1bd2:	f8 01       	movw	r30, r16
    1bd4:	40 81       	ld	r20, Z
    1bd6:	51 81       	ldd	r21, Z+1	; 0x01
    1bd8:	62 81       	ldd	r22, Z+2	; 0x02
    1bda:	73 81       	ldd	r23, Z+3	; 0x03
    1bdc:	84 17       	cp	r24, r20
    1bde:	95 07       	cpc	r25, r21
    1be0:	a6 07       	cpc	r26, r22
    1be2:	b7 07       	cpc	r27, r23
    1be4:	69 f4       	brne	.+26     	; 0x1c00 <set_send+0xbe>
    1be6:	8c 85       	ldd	r24, Y+12	; 0x0c
    1be8:	84 30       	cpi	r24, 0x04	; 4
    1bea:	51 f4       	brne	.+20     	; 0x1c00 <set_send+0xbe>
				{
					send_timer = -1;
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	9f ef       	ldi	r25, 0xFF	; 255
    1bf0:	80 93 1e 20 	sts	0x201E, r24
    1bf4:	90 93 1f 20 	sts	0x201F, r25
					comm_led();
    1bf8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <comm_led>
					{
						return Door_open_deny;
					}
					#endif

					return true;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	1b c0       	rjmp	.+54     	; 0x1c36 <set_send+0xf4>
				}
			}
			cc1100_cmd_idle();
    1c00:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
			
			if(send_timer > GetTime)
    1c04:	40 91 1e 20 	lds	r20, 0x201E
    1c08:	50 91 1f 20 	lds	r21, 0x201F
    1c0c:	66 27       	eor	r22, r22
    1c0e:	57 fd       	sbrc	r21, 7
    1c10:	60 95       	com	r22
    1c12:	76 2f       	mov	r23, r22
    1c14:	48 33       	cpi	r20, 0x38	; 56
    1c16:	51 05       	cpc	r21, r1
    1c18:	61 05       	cpc	r22, r1
    1c1a:	71 05       	cpc	r23, r1
    1c1c:	38 f2       	brcs	.-114    	; 0x1bac <set_send+0x6a>
			{
				send_timer = -1;
    1c1e:	c0 92 1e 20 	sts	0x201E, r12
    1c22:	d0 92 1f 20 	sts	0x201F, r13
    1c26:	f1 e0       	ldi	r31, 0x01	; 1
    1c28:	ef 1a       	sub	r14, r31
    1c2a:	f1 08       	sbc	r15, r1
	u8 rssi,lqi;
	u32 GetTime=0;
	u8	th;
	u8	carrier_sen_check=0;
	
	for(int i=0;i<5;i++)
    1c2c:	e1 14       	cp	r14, r1
    1c2e:	f1 04       	cpc	r15, r1
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <set_send+0xf2>
    1c32:	a4 cf       	rjmp	.-184    	; 0x1b7c <set_send+0x3a>
				break;
			}
		}
	}
	
	return false;
    1c34:	80 e0       	ldi	r24, 0x00	; 0
}
    1c36:	6e 96       	adiw	r28, 0x1e	; 30
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	cf 90       	pop	r12
    1c4c:	bf 90       	pop	r11
    1c4e:	af 90       	pop	r10
    1c50:	08 95       	ret

00001c52 <get_door_status>:

B,C -> A door open?
*/
//int get_door_status(void)
get_door_open_status_t get_door_status(void)
{
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	6e 97       	sbiw	r28, 0x1e	; 30
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	7c 01       	movw	r14, r24
	u8 rssi,lqi;
	int length;
	get_door_open_status_t door;
	
	door.hdr.slave_id = gEnv.id;
    1c6a:	80 91 d6 21 	lds	r24, 0x21D6
    1c6e:	90 91 d7 21 	lds	r25, 0x21D7
    1c72:	a0 91 d8 21 	lds	r26, 0x21D8
    1c76:	b0 91 d9 21 	lds	r27, 0x21D9
    1c7a:	8c 83       	std	Y+4, r24	; 0x04
    1c7c:	9d 83       	std	Y+5, r25	; 0x05
    1c7e:	ae 83       	std	Y+6, r26	; 0x06
    1c80:	bf 83       	std	Y+7, r27	; 0x07
	door.hdr.payload = PAYLOAD_GET_DOOR_STATUS;
    1c82:	8d e0       	ldi	r24, 0x0D	; 13
    1c84:	8e 87       	std	Y+14, r24	; 0x0e

	set_freq();
    1c86:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&door,sizeof(get_door_open_status_t),1);
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	6c e1       	ldi	r22, 0x1C	; 28
    1c8e:	ce 01       	movw	r24, r28
    1c90:	03 96       	adiw	r24, 0x03	; 3
    1c92:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>

	send_timer = 0;
    1c96:	10 92 1e 20 	sts	0x201E, r1
    1c9a:	10 92 1f 20 	sts	0x201F, r1
		
		set_freq();
		length = cc1101_rx((u8 *)&door,&rssi,&lqi,RX_NOMAL);
		if(length > 0 )
		{
			if(door.hdr.slave_id == gEnv.id && door.hdr.payload == PAYLOAD_GET_DOOR_STATUS)
    1c9e:	06 ed       	ldi	r16, 0xD6	; 214
    1ca0:	11 e2       	ldi	r17, 0x21	; 33
	send_timer = 0;
	
	while(1)
	{
		
		set_freq();
    1ca2:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		length = cc1101_rx((u8 *)&door,&rssi,&lqi,RX_NOMAL);
    1ca6:	22 e0       	ldi	r18, 0x02	; 2
    1ca8:	ae 01       	movw	r20, r28
    1caa:	4e 5f       	subi	r20, 0xFE	; 254
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
    1cae:	be 01       	movw	r22, r28
    1cb0:	6f 5f       	subi	r22, 0xFF	; 255
    1cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	03 96       	adiw	r24, 0x03	; 3
    1cb8:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
		if(length > 0 )
    1cbc:	88 23       	and	r24, r24
    1cbe:	11 f1       	breq	.+68     	; 0x1d04 <get_door_status+0xb2>
		{
			if(door.hdr.slave_id == gEnv.id && door.hdr.payload == PAYLOAD_GET_DOOR_STATUS)
    1cc0:	f8 01       	movw	r30, r16
    1cc2:	40 81       	ld	r20, Z
    1cc4:	51 81       	ldd	r21, Z+1	; 0x01
    1cc6:	62 81       	ldd	r22, Z+2	; 0x02
    1cc8:	73 81       	ldd	r23, Z+3	; 0x03
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cce:	ae 81       	ldd	r26, Y+6	; 0x06
    1cd0:	bf 81       	ldd	r27, Y+7	; 0x07
    1cd2:	84 17       	cp	r24, r20
    1cd4:	95 07       	cpc	r25, r21
    1cd6:	a6 07       	cpc	r26, r22
    1cd8:	b7 07       	cpc	r27, r23
    1cda:	a1 f4       	brne	.+40     	; 0x1d04 <get_door_status+0xb2>
    1cdc:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cde:	8d 30       	cpi	r24, 0x0D	; 13
    1ce0:	89 f4       	brne	.+34     	; 0x1d04 <get_door_status+0xb2>
			{
				send_timer = -1;
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	9f ef       	ldi	r25, 0xFF	; 255
    1ce6:	80 93 1e 20 	sts	0x201E, r24
    1cea:	90 93 1f 20 	sts	0x201F, r25
				comm_led();
    1cee:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <comm_led>
				
				//return (int)door.door;
				return (get_door_open_status_t)door;
    1cf2:	8c e1       	ldi	r24, 0x1C	; 28
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	33 96       	adiw	r30, 0x03	; 3
    1cf8:	d7 01       	movw	r26, r14
    1cfa:	01 90       	ld	r0, Z+
    1cfc:	0d 92       	st	X+, r0
    1cfe:	8a 95       	dec	r24
    1d00:	e1 f7       	brne	.-8      	; 0x1cfa <get_door_status+0xa8>
    1d02:	18 c0       	rjmp	.+48     	; 0x1d34 <get_door_status+0xe2>
			}
		}
		cc1100_cmd_idle();
    1d04:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		
		if(send_timer > 1000)
    1d08:	80 91 1e 20 	lds	r24, 0x201E
    1d0c:	90 91 1f 20 	lds	r25, 0x201F
    1d10:	89 3e       	cpi	r24, 0xE9	; 233
    1d12:	93 40       	sbci	r25, 0x03	; 3
    1d14:	34 f2       	brlt	.-116    	; 0x1ca2 <get_door_status+0x50>
		{
			send_timer = -1;
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	9f ef       	ldi	r25, 0xFF	; 255
    1d1a:	80 93 1e 20 	sts	0x201E, r24
    1d1e:	90 93 1f 20 	sts	0x201F, r25
			break;
		}
	}
	
	door.door = -1;
    1d22:	8f 87       	std	Y+15, r24	; 0x0f
	return door;
    1d24:	8c e1       	ldi	r24, 0x1C	; 28
    1d26:	fe 01       	movw	r30, r28
    1d28:	33 96       	adiw	r30, 0x03	; 3
    1d2a:	d7 01       	movw	r26, r14
    1d2c:	01 90       	ld	r0, Z+
    1d2e:	0d 92       	st	X+, r0
    1d30:	8a 95       	dec	r24
    1d32:	e1 f7       	brne	.-8      	; 0x1d2c <get_door_status+0xda>
	
	//return -1;
}
    1d34:	c7 01       	movw	r24, r14
    1d36:	6e 96       	adiw	r28, 0x1e	; 30
    1d38:	cd bf       	out	0x3d, r28	; 61
    1d3a:	de bf       	out	0x3e, r29	; 62
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	08 95       	ret

00001d4a <set_process>:




void set_process(u8 set)
{
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	6c 97       	sbiw	r28, 0x1c	; 28
    1d56:	cd bf       	out	0x3d, r28	; 61
    1d58:	de bf       	out	0x3e, r29	; 62
    1d5a:	18 2f       	mov	r17, r24
	get_door_open_status_t ret;
	int ret2;
	
	
	//if(set == true)
	if(set == SET)
    1d5c:	82 30       	cpi	r24, 0x02	; 2
    1d5e:	39 f4       	brne	.+14     	; 0x1d6e <set_process+0x24>
	{
		for(int i=0;i<4;i++)
		{
			//ret = get_door_status();
			//ret.door = get_door_status();
			ret = get_door_status();
    1d60:	ce 01       	movw	r24, r28
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <get_door_status>
		buzzer_error();
		return ;
	}
	
	//if(ret.door == 1 || ret.doorlock == 1)
	if(ret.door == true || ret.doorlock == true)
    1d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	19 f0       	breq	.+6      	; 0x1d74 <set_process+0x2a>
    1d6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	31 f4       	brne	.+12     	; 0x1d80 <set_process+0x36>
	{
		set_voice(6);
    1d74:	86 e0       	ldi	r24, 0x06	; 6
    1d76:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
		buzzer_error();
    1d7a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <buzzer_error>
    1d7e:	1f c0       	rjmp	.+62     	; 0x1dbe <set_process+0x74>
	}
	else
	{
		//for(int i=0;i<4;i++)
		{
			ret2 = set_send(set);
    1d80:	81 2f       	mov	r24, r17
    1d82:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <set_send>
    1d86:	90 e0       	ldi	r25, 0x00	; 0
			
			if(ret2 == true)
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <set_process+0x4e>
			{
							
				btn_ctl_deny_timeout_count = 0;
    1d8e:	10 92 2e 20 	sts	0x202E, r1
    1d92:	10 92 2f 20 	sts	0x202F, r1
    1d96:	08 c0       	rjmp	.+16     	; 0x1da8 <set_process+0x5e>
				//break;
			}
		}
		
		//if(set_send(set) == false)
		if(ret2 == false)
    1d98:	89 2b       	or	r24, r25
    1d9a:	31 f4       	brne	.+12     	; 0x1da8 <set_process+0x5e>
		{
			set_voice(8);
    1d9c:	88 e0       	ldi	r24, 0x08	; 8
    1d9e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
			buzzer_error();
    1da2:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <buzzer_error>
    1da6:	0b c0       	rjmp	.+22     	; 0x1dbe <set_process+0x74>
			return;
		}
		#if 1
		//set_state = set;
		
		if(set_state == SET)
    1da8:	80 91 5d 21 	lds	r24, 0x215D
    1dac:	82 30       	cpi	r24, 0x02	; 2
    1dae:	21 f4       	brne	.+8      	; 0x1db8 <set_process+0x6e>
		{
			set_security_mode_led(true);
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <set_process+0x74>
		}
		else
		{
			set_security_mode_led(false);	
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
		
			//set_car_emergency_led(0);
		}
		#endif 	
	}
}
    1dbe:	6c 96       	adiw	r28, 0x1c	; 28
    1dc0:	cd bf       	out	0x3d, r28	; 61
    1dc2:	de bf       	out	0x3e, r29	; 62
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	1f 91       	pop	r17
    1dca:	08 95       	ret

00001dcc <button_process>:
}



void button_process(void)
{
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
	if(btn_emg_count > 0)
    1dd2:	80 91 3c 20 	lds	r24, 0x203C
    1dd6:	90 91 3d 20 	lds	r25, 0x203D
    1dda:	18 16       	cp	r1, r24
    1ddc:	19 06       	cpc	r1, r25
    1dde:	0c f0       	brlt	.+2      	; 0x1de2 <button_process+0x16>
    1de0:	44 c0       	rjmp	.+136    	; 0x1e6a <button_process+0x9e>
	{
		if(get_emergency_button() == true)
    1de2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    1de6:	81 30       	cpi	r24, 0x01	; 1
    1de8:	d1 f5       	brne	.+116    	; 0x1e5e <button_process+0x92>
		{
			if(emg_state == false && (btn_emg_count > gEnv.emg_btn_set - 1))
    1dea:	80 91 5e 21 	lds	r24, 0x215E
    1dee:	81 11       	cpse	r24, r1
    1df0:	15 c0       	rjmp	.+42     	; 0x1e1c <button_process+0x50>
    1df2:	20 91 da 21 	lds	r18, 0x21DA
    1df6:	80 91 3c 20 	lds	r24, 0x203C
    1dfa:	90 91 3d 20 	lds	r25, 0x203D
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	21 50       	subi	r18, 0x01	; 1
    1e02:	31 09       	sbc	r19, r1
    1e04:	28 17       	cp	r18, r24
    1e06:	39 07       	cpc	r19, r25
    1e08:	4c f4       	brge	.+18     	; 0x1e1c <button_process+0x50>
			{
				// emg_set
				//set_emg_button_led(true);
				emg_set_process();
    1e0a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <emg_set_process>
				btn_emg_count = -1;
    1e0e:	8f ef       	ldi	r24, 0xFF	; 255
    1e10:	9f ef       	ldi	r25, 0xFF	; 255
    1e12:	80 93 3c 20 	sts	0x203C, r24
    1e16:	90 93 3d 20 	sts	0x203D, r25
    1e1a:	27 c0       	rjmp	.+78     	; 0x1e6a <button_process+0x9e>
				
			}
			else if(emg_state == true && (btn_emg_count > gEnv.emg_btn_reset -1))
    1e1c:	80 91 5e 21 	lds	r24, 0x215E
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	61 f4       	brne	.+24     	; 0x1e3c <button_process+0x70>
    1e24:	20 91 db 21 	lds	r18, 0x21DB
    1e28:	80 91 3c 20 	lds	r24, 0x203C
    1e2c:	90 91 3d 20 	lds	r25, 0x203D
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	21 50       	subi	r18, 0x01	; 1
    1e34:	31 09       	sbc	r19, r1
    1e36:	28 17       	cp	r18, r24
    1e38:	39 07       	cpc	r19, r25
    1e3a:	bc f0       	brlt	.+46     	; 0x1e6a <button_process+0x9e>
				btn_emg_count = -1;
				//set_emg_button_led(false);
				emg_reset_process();
				#endif
			}
			else if(emg_state != true && emg_state != false && btn_emg_count > 6)
    1e3c:	80 91 5e 21 	lds	r24, 0x215E
    1e40:	81 30       	cpi	r24, 0x01	; 1
    1e42:	99 f0       	breq	.+38     	; 0x1e6a <button_process+0x9e>
    1e44:	80 91 5e 21 	lds	r24, 0x215E
    1e48:	88 23       	and	r24, r24
    1e4a:	79 f0       	breq	.+30     	; 0x1e6a <button_process+0x9e>
    1e4c:	80 91 3c 20 	lds	r24, 0x203C
    1e50:	90 91 3d 20 	lds	r25, 0x203D
    1e54:	07 97       	sbiw	r24, 0x07	; 7
    1e56:	4c f0       	brlt	.+18     	; 0x1e6a <button_process+0x9e>
			{
				emg_state = false;
    1e58:	10 92 5e 21 	sts	0x215E, r1
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <button_process+0x9e>
			}
		}
		else
		{
			btn_emg_count = -1;
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
    1e60:	9f ef       	ldi	r25, 0xFF	; 255
    1e62:	80 93 3c 20 	sts	0x203C, r24
    1e66:	90 93 3d 20 	sts	0x203D, r25
		}
	}
	
	
	if(btn_open_count > 0)
    1e6a:	80 91 3a 20 	lds	r24, 0x203A
    1e6e:	90 91 3b 20 	lds	r25, 0x203B
    1e72:	18 16       	cp	r1, r24
    1e74:	19 06       	cpc	r1, r25
    1e76:	fc f4       	brge	.+62     	; 0x1eb6 <button_process+0xea>
	{
		if(get_cab_unlocked() == true)
    1e78:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_cab_unlocked>
    1e7c:	81 30       	cpi	r24, 0x01	; 1
    1e7e:	a9 f4       	brne	.+42     	; 0x1eaa <button_process+0xde>
		{
			if(btn_open_count > gEnv.set_time -1)
    1e80:	20 91 dc 21 	lds	r18, 0x21DC
    1e84:	80 91 3a 20 	lds	r24, 0x203A
    1e88:	90 91 3b 20 	lds	r25, 0x203B
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	21 50       	subi	r18, 0x01	; 1
    1e90:	31 09       	sbc	r19, r1
    1e92:	28 17       	cp	r18, r24
    1e94:	39 07       	cpc	r19, r25
    1e96:	7c f4       	brge	.+30     	; 0x1eb6 <button_process+0xea>
			{
				// driver door open
				btn_open_count = -1;
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	9f ef       	ldi	r25, 0xFF	; 255
    1e9c:	80 93 3a 20 	sts	0x203A, r24
    1ea0:	90 93 3b 20 	sts	0x203B, r25
				emg_driver_door_process();
    1ea4:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <emg_driver_door_process>
    1ea8:	06 c0       	rjmp	.+12     	; 0x1eb6 <button_process+0xea>
			}
		}
		else
		{
			btn_open_count = -1;
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	9f ef       	ldi	r25, 0xFF	; 255
    1eae:	80 93 3a 20 	sts	0x203A, r24
    1eb2:	90 93 3b 20 	sts	0x203B, r25
		}
	}
	
	
	if(btn_rear_open_count > 0)
    1eb6:	80 91 38 20 	lds	r24, 0x2038
    1eba:	90 91 39 20 	lds	r25, 0x2039
    1ebe:	18 16       	cp	r1, r24
    1ec0:	19 06       	cpc	r1, r25
    1ec2:	fc f4       	brge	.+62     	; 0x1f02 <button_process+0x136>
	{
		if(get_rear_door_unlocked() == true)
    1ec4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_rear_door_unlocked>
    1ec8:	81 30       	cpi	r24, 0x01	; 1
    1eca:	a9 f4       	brne	.+42     	; 0x1ef6 <button_process+0x12a>
		{
			if(btn_rear_open_count > gEnv.set_time -1)
    1ecc:	20 91 dc 21 	lds	r18, 0x21DC
    1ed0:	80 91 38 20 	lds	r24, 0x2038
    1ed4:	90 91 39 20 	lds	r25, 0x2039
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	21 50       	subi	r18, 0x01	; 1
    1edc:	31 09       	sbc	r19, r1
    1ede:	28 17       	cp	r18, r24
    1ee0:	39 07       	cpc	r19, r25
    1ee2:	7c f4       	brge	.+30     	; 0x1f02 <button_process+0x136>
			{
				// driver door open
				btn_rear_open_count = -1;
    1ee4:	8f ef       	ldi	r24, 0xFF	; 255
    1ee6:	9f ef       	ldi	r25, 0xFF	; 255
    1ee8:	80 93 38 20 	sts	0x2038, r24
    1eec:	90 93 39 20 	sts	0x2039, r25
				emg_rear_door_process();
    1ef0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <emg_rear_door_process>
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <button_process+0x136>
		
			}
		}
		else
		{
			btn_rear_open_count = -1;
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	9f ef       	ldi	r25, 0xFF	; 255
    1efa:	80 93 38 20 	sts	0x2038, r24
    1efe:	90 93 39 20 	sts	0x2039, r25
		}
	}
	
	
	if(btn_side_open_count > 0)
    1f02:	80 91 36 20 	lds	r24, 0x2036
    1f06:	90 91 37 20 	lds	r25, 0x2037
    1f0a:	18 16       	cp	r1, r24
    1f0c:	19 06       	cpc	r1, r25
    1f0e:	fc f4       	brge	.+62     	; 0x1f4e <button_process+0x182>
	{
		if(get_side_door_unlocked() == true)
    1f10:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
    1f14:	81 30       	cpi	r24, 0x01	; 1
    1f16:	a9 f4       	brne	.+42     	; 0x1f42 <button_process+0x176>
		{
			if(btn_side_open_count > gEnv.set_time -1)
    1f18:	20 91 dc 21 	lds	r18, 0x21DC
    1f1c:	80 91 36 20 	lds	r24, 0x2036
    1f20:	90 91 37 20 	lds	r25, 0x2037
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	21 50       	subi	r18, 0x01	; 1
    1f28:	31 09       	sbc	r19, r1
    1f2a:	28 17       	cp	r18, r24
    1f2c:	39 07       	cpc	r19, r25
    1f2e:	7c f4       	brge	.+30     	; 0x1f4e <button_process+0x182>
			{
				// driver door open
				btn_side_open_count = -1;
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	9f ef       	ldi	r25, 0xFF	; 255
    1f34:	80 93 36 20 	sts	0x2036, r24
    1f38:	90 93 37 20 	sts	0x2037, r25
				emg_side_door_process();
    1f3c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <emg_side_door_process>
    1f40:	06 c0       	rjmp	.+12     	; 0x1f4e <button_process+0x182>
			}
		}
		else
		{
			btn_side_open_count = -1;
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	9f ef       	ldi	r25, 0xFF	; 255
    1f46:	80 93 36 20 	sts	0x2036, r24
    1f4a:	90 93 37 20 	sts	0x2037, r25
		}
	}
	
	if(btn_set_count > 0)
    1f4e:	80 91 34 20 	lds	r24, 0x2034
    1f52:	90 91 35 20 	lds	r25, 0x2035
    1f56:	18 16       	cp	r1, r24
    1f58:	19 06       	cpc	r1, r25
    1f5a:	0c f0       	brlt	.+2      	; 0x1f5e <button_process+0x192>
    1f5c:	60 c0       	rjmp	.+192    	; 0x201e <button_process+0x252>
	{
		//if(temp_reset_count > -1 && ((door_open_msg_cancel == -1 && set_state == TEMP_RESET) || (door_open_msg_cancel == -1 && set_state == RESET)))
		//if(gPacket.hdr.payload == PAYLOAD_DRIVER_DOOR_ERR_REPORT && ((door_open_msg_cancel == -1 && set_state == TEMP_RESET) || (door_open_msg_cancel == -1 && set_state == RESET)))
		if(gPacket.hdr.payload == PAYLOAD_DRIVER_DOOR_ERR_REPORT && door_open_msg_cancel == -1)
    1f5e:	80 91 f4 21 	lds	r24, 0x21F4
    1f62:	80 31       	cpi	r24, 0x10	; 16
    1f64:	d1 f5       	brne	.+116    	; 0x1fda <button_process+0x20e>
    1f66:	80 91 22 20 	lds	r24, 0x2022
    1f6a:	90 91 23 20 	lds	r25, 0x2023
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	a1 f5       	brne	.+104    	; 0x1fda <button_process+0x20e>
		{
			if(get_security_set() == true)
    1f72:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    1f76:	81 30       	cpi	r24, 0x01	; 1
    1f78:	49 f5       	brne	.+82     	; 0x1fcc <button_process+0x200>
			{
				if(btn_set_count > gEnv.set_time -1)
    1f7a:	20 91 dc 21 	lds	r18, 0x21DC
    1f7e:	80 91 34 20 	lds	r24, 0x2034
    1f82:	90 91 35 20 	lds	r25, 0x2035
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	21 50       	subi	r18, 0x01	; 1
    1f8a:	31 09       	sbc	r19, r1
    1f8c:	28 17       	cp	r18, r24
    1f8e:	39 07       	cpc	r19, r25
    1f90:	0c f0       	brlt	.+2      	; 0x1f94 <button_process+0x1c8>
    1f92:	45 c0       	rjmp	.+138    	; 0x201e <button_process+0x252>
				{
					door_open_msg_cancel++;
    1f94:	80 91 22 20 	lds	r24, 0x2022
    1f98:	90 91 23 20 	lds	r25, 0x2023
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	80 93 22 20 	sts	0x2022, r24
    1fa2:	90 93 23 20 	sts	0x2023, r25
    1fa6:	c6 e0       	ldi	r28, 0x06	; 6
    1fa8:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    1faa:	11 e0       	ldi	r17, 0x01	; 1
    1fac:	10 93 08 22 	sts	0x2208, r17
				{
					door_open_msg_cancel++;
					for(int i=0;i<6;i++)
					{
						buzzer_on(true);
						delay_ms(100);
    1fb0:	84 e6       	ldi	r24, 0x64	; 100
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    1fb8:	10 92 08 22 	sts	0x2208, r1
					for(int i=0;i<6;i++)
					{
						buzzer_on(true);
						delay_ms(100);
						buzzer_on(false);
						delay_ms(100);
    1fbc:	84 e6       	ldi	r24, 0x64	; 100
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	0e 94 e6 03 	call	0x7cc	; 0x7cc <delay_ms>
    1fc4:	21 97       	sbiw	r28, 0x01	; 1
			if(get_security_set() == true)
			{
				if(btn_set_count > gEnv.set_time -1)
				{
					door_open_msg_cancel++;
					for(int i=0;i<6;i++)
    1fc6:	20 97       	sbiw	r28, 0x00	; 0
    1fc8:	89 f7       	brne	.-30     	; 0x1fac <button_process+0x1e0>
    1fca:	29 c0       	rjmp	.+82     	; 0x201e <button_process+0x252>
					}
				}
			}
			else
			{
				btn_set_count = -1;
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	9f ef       	ldi	r25, 0xFF	; 255
    1fd0:	80 93 34 20 	sts	0x2034, r24
    1fd4:	90 93 35 20 	sts	0x2035, r25
    1fd8:	22 c0       	rjmp	.+68     	; 0x201e <button_process+0x252>
			}		
		}
		else
		{
			if(get_security_set() == true)
    1fda:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	c1 f4       	brne	.+48     	; 0x2012 <button_process+0x246>
			{
				if(btn_set_count > gEnv.set_time -1)
    1fe2:	20 91 dc 21 	lds	r18, 0x21DC
    1fe6:	80 91 34 20 	lds	r24, 0x2034
    1fea:	90 91 35 20 	lds	r25, 0x2035
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	21 50       	subi	r18, 0x01	; 1
    1ff2:	31 09       	sbc	r19, r1
    1ff4:	28 17       	cp	r18, r24
    1ff6:	39 07       	cpc	r19, r25
    1ff8:	94 f4       	brge	.+36     	; 0x201e <button_process+0x252>
				{
					// driver door open
					btn_set_count = -1;
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	9f ef       	ldi	r25, 0xFF	; 255
    1ffe:	80 93 34 20 	sts	0x2034, r24
    2002:	90 93 35 20 	sts	0x2035, r25
					set_process(SET);
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <set_process>
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    200c:	10 92 08 22 	sts	0x2208, r1
    2010:	06 c0       	rjmp	.+12     	; 0x201e <button_process+0x252>
					buzzer_on(false);
				}
			}
			else
			{
				btn_set_count = -1;
    2012:	8f ef       	ldi	r24, 0xFF	; 255
    2014:	9f ef       	ldi	r25, 0xFF	; 255
    2016:	80 93 34 20 	sts	0x2034, r24
    201a:	90 93 35 20 	sts	0x2035, r25
			}		
		}
	}
	
	
	if(btn_reset_count > 0)
    201e:	80 91 32 20 	lds	r24, 0x2032
    2022:	90 91 33 20 	lds	r25, 0x2033
    2026:	18 16       	cp	r1, r24
    2028:	19 06       	cpc	r1, r25
    202a:	54 f5       	brge	.+84     	; 0x2080 <button_process+0x2b4>
	{
		if(get_security_reset() == true)
    202c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    2030:	81 30       	cpi	r24, 0x01	; 1
    2032:	01 f5       	brne	.+64     	; 0x2074 <button_process+0x2a8>
		{
			
			if(btn_reset_count > gEnv.reset_time -1)
    2034:	20 91 dd 21 	lds	r18, 0x21DD
    2038:	80 91 32 20 	lds	r24, 0x2032
    203c:	90 91 33 20 	lds	r25, 0x2033
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	21 50       	subi	r18, 0x01	; 1
    2044:	31 09       	sbc	r19, r1
    2046:	28 17       	cp	r18, r24
    2048:	39 07       	cpc	r19, r25
    204a:	d4 f4       	brge	.+52     	; 0x2080 <button_process+0x2b4>
			{
				// driver door open
				btn_reset_count = -1;
    204c:	8f ef       	ldi	r24, 0xFF	; 255
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	80 93 32 20 	sts	0x2032, r24
    2054:	90 93 33 20 	sts	0x2033, r25
				set_process(RESET);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <set_process>
				
				set_emg_led(false);
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
				set_emg_button_led(false);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
				remocon_emg = false;
    206a:	10 92 5b 21 	sts	0x215B, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    206e:	10 92 08 22 	sts	0x2208, r1
    2072:	06 c0       	rjmp	.+12     	; 0x2080 <button_process+0x2b4>
				buzzer_on(false);
			}
		}
		else
		{
				btn_reset_count = -1;
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	9f ef       	ldi	r25, 0xFF	; 255
    2078:	80 93 32 20 	sts	0x2032, r24
    207c:	90 93 33 20 	sts	0x2033, r25
		}
	}

}
    2080:	df 91       	pop	r29
    2082:	cf 91       	pop	r28
    2084:	1f 91       	pop	r17
    2086:	08 95       	ret

00002088 <sync2_send>:
}



u8 sync2_send(void)
{
    2088:	0f 93       	push	r16
    208a:	1f 93       	push	r17
    208c:	cf 93       	push	r28
    208e:	df 93       	push	r29
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	6e 97       	sbiw	r28, 0x1e	; 30
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	de bf       	out	0x3e, r29	; 62
	int length;
	sync2_t sync;
	u8 rssi,lqi;
	
	
	sync.hdr.slave_id = gEnv.id;
    209a:	80 91 d6 21 	lds	r24, 0x21D6
    209e:	90 91 d7 21 	lds	r25, 0x21D7
    20a2:	a0 91 d8 21 	lds	r26, 0x21D8
    20a6:	b0 91 d9 21 	lds	r27, 0x21D9
    20aa:	8a 83       	std	Y+2, r24	; 0x02
    20ac:	9b 83       	std	Y+3, r25	; 0x03
    20ae:	ac 83       	std	Y+4, r26	; 0x04
    20b0:	bd 83       	std	Y+5, r27	; 0x05
	sync.hdr.payload = PAYLOAD_SYNC2;
    20b2:	1c 86       	std	Y+12, r1	; 0x0c
	
	set_freq();
    20b4:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
	cc1101_tx(&sync,sizeof(sync2_t),1);
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	6c e1       	ldi	r22, 0x1C	; 28
    20bc:	ce 01       	movw	r24, r28
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	0e 94 b7 04 	call	0x96e	; 0x96e <cc1101_tx>
	
	send_timer = 0;
    20c4:	10 92 1e 20 	sts	0x201E, r1
    20c8:	10 92 1f 20 	sts	0x201F, r1
		
		set_freq();
		length = cc1101_rx((u8 *)&sync,&rssi,&lqi,RX_NOMAL);
		if(length > 0 )
		{
			if(sync.hdr.slave_id == gEnv.id && sync.hdr.payload == PAYLOAD_SYNC2)
    20cc:	06 ed       	ldi	r16, 0xD6	; 214
    20ce:	11 e2       	ldi	r17, 0x21	; 33
	
	send_timer = 0;
	while(1)
	{
		
		set_freq();
    20d0:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		length = cc1101_rx((u8 *)&sync,&rssi,&lqi,RX_NOMAL);
    20d4:	22 e0       	ldi	r18, 0x02	; 2
    20d6:	ae 01       	movw	r20, r28
    20d8:	42 5e       	subi	r20, 0xE2	; 226
    20da:	5f 4f       	sbci	r21, 0xFF	; 255
    20dc:	be 01       	movw	r22, r28
    20de:	63 5e       	subi	r22, 0xE3	; 227
    20e0:	7f 4f       	sbci	r23, 0xFF	; 255
    20e2:	ce 01       	movw	r24, r28
    20e4:	01 96       	adiw	r24, 0x01	; 1
    20e6:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
		if(length > 0 )
    20ea:	88 23       	and	r24, r24
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <sync2_send+0x68>
    20ee:	3f c0       	rjmp	.+126    	; 0x216e <sync2_send+0xe6>
		{
			if(sync.hdr.slave_id == gEnv.id && sync.hdr.payload == PAYLOAD_SYNC2)
    20f0:	f8 01       	movw	r30, r16
    20f2:	80 81       	ld	r24, Z
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	a2 81       	ldd	r26, Z+2	; 0x02
    20f8:	b3 81       	ldd	r27, Z+3	; 0x03
    20fa:	4a 81       	ldd	r20, Y+2	; 0x02
    20fc:	5b 81       	ldd	r21, Y+3	; 0x03
    20fe:	6c 81       	ldd	r22, Y+4	; 0x04
    2100:	7d 81       	ldd	r23, Y+5	; 0x05
    2102:	48 17       	cp	r20, r24
    2104:	59 07       	cpc	r21, r25
    2106:	6a 07       	cpc	r22, r26
    2108:	7b 07       	cpc	r23, r27
    210a:	89 f5       	brne	.+98     	; 0x216e <sync2_send+0xe6>
    210c:	8c 85       	ldd	r24, Y+12	; 0x0c
    210e:	81 11       	cpse	r24, r1
    2110:	2e c0       	rjmp	.+92     	; 0x216e <sync2_send+0xe6>
			{
				gEnv.emg_btn_set = sync.reserve[0];
    2112:	2e 85       	ldd	r18, Y+14	; 0x0e
    2114:	20 93 da 21 	sts	0x21DA, r18
				gEnv.emg_btn_reset = sync.reserve[1];
    2118:	9f 85       	ldd	r25, Y+15	; 0x0f
    211a:	90 93 db 21 	sts	0x21DB, r25
				gEnv.set_time=sync.reserve[2];
    211e:	88 89       	ldd	r24, Y+16	; 0x10
    2120:	80 93 dc 21 	sts	0x21DC, r24
				gEnvDown.emg_btn_set = sync.reserve[0];
    2124:	20 93 ce 21 	sts	0x21CE, r18
				gEnvDown.emg_btn_reset = sync.reserve[1];
    2128:	90 93 cf 21 	sts	0x21CF, r25
				gEnvDown.set_time=sync.reserve[2];
    212c:	80 93 d0 21 	sts	0x21D0, r24
				emg_state = sync.reserve[3] ;
    2130:	89 89       	ldd	r24, Y+17	; 0x11
    2132:	80 93 5e 21 	sts	0x215E, r24
				set_state = sync.reserve[4] ;
    2136:	8a 89       	ldd	r24, Y+18	; 0x12
    2138:	80 93 5d 21 	sts	0x215D, r24
				
				if(set_state == SET)
    213c:	80 91 5d 21 	lds	r24, 0x215D
    2140:	82 30       	cpi	r24, 0x02	; 2
    2142:	21 f4       	brne	.+8      	; 0x214c <sync2_send+0xc4>
				{
					set_security_mode_led(true);
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    214a:	03 c0       	rjmp	.+6      	; 0x2152 <sync2_send+0xca>
				}
				else
				{
					set_security_mode_led(false);					
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
				}
				
				
				//set_security_mode_led(set_state);
				set_emg_led(emg_state);
    2152:	80 91 5e 21 	lds	r24, 0x215E
    2156:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>

				
				send_timer = -1;
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	9f ef       	ldi	r25, 0xFF	; 255
    215e:	80 93 1e 20 	sts	0x201E, r24
    2162:	90 93 1f 20 	sts	0x201F, r25
				comm_led();
    2166:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <comm_led>

				return true;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	11 c0       	rjmp	.+34     	; 0x2190 <sync2_send+0x108>
			}
		}
		cc1100_cmd_idle();
    216e:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		
		if(send_timer > 2000)
    2172:	80 91 1e 20 	lds	r24, 0x201E
    2176:	90 91 1f 20 	lds	r25, 0x201F
    217a:	81 3d       	cpi	r24, 0xD1	; 209
    217c:	97 40       	sbci	r25, 0x07	; 7
    217e:	0c f4       	brge	.+2      	; 0x2182 <sync2_send+0xfa>
    2180:	a7 cf       	rjmp	.-178    	; 0x20d0 <sync2_send+0x48>
		{
			send_timer = -1;
    2182:	8f ef       	ldi	r24, 0xFF	; 255
    2184:	9f ef       	ldi	r25, 0xFF	; 255
    2186:	80 93 1e 20 	sts	0x201E, r24
    218a:	90 93 1f 20 	sts	0x201F, r25
			break;
		}
	}
	
	
	return false;
    218e:	80 e0       	ldi	r24, 0x00	; 0
}
    2190:	6e 96       	adiw	r28, 0x1e	; 30
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <main>:
//packet_t gPacket;
u16 adc_value;


int main(void)
{
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	25 97       	sbiw	r28, 0x05	; 5
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	de bf       	out	0x3e, r29	; 62
	int length;
	u8 test_mode=0;
	volatile u16 temp;
	
	
	setClockTo32MHz();	
    21ae:	0e 94 04 04 	call	0x808	; 0x808 <setClockTo32MHz>
	
	port_init();
    21b2:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <port_init>
	spi_init();
    21b6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <spi_init>
	env_init();
    21ba:	0e 94 32 03 	call	0x664	; 0x664 <env_init>
	tele_env_init();
    21be:	0e 94 7f 03 	call	0x6fe	; 0x6fe <tele_env_init>
	timer_setup();
    21c2:	0e 94 88 06 	call	0xd10	; 0xd10 <timer_setup>
	TCC0_INTCTRLA = 0x03;				// enable OVF interrupt with high level
    21c6:	83 e0       	ldi	r24, 0x03	; 3
    21c8:	80 93 06 08 	sts	0x0806, r24
	
	set_speaker_power(true);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <set_speaker_power>
	//set_speaker_power(false);
	
	set_voice(0xff);
    21d4:	8f ef       	ldi	r24, 0xFF	; 255
    21d6:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
	
	gEnv.emg_btn_set = 4;
    21da:	24 e0       	ldi	r18, 0x04	; 4
    21dc:	20 93 da 21 	sts	0x21DA, r18
	gEnv.emg_btn_reset = 5;
    21e0:	95 e0       	ldi	r25, 0x05	; 5
    21e2:	90 93 db 21 	sts	0x21DB, r25
	gEnv.set_time = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 dc 21 	sts	0x21DC, r24
	gEnv.reset_time = 1;
    21ec:	80 93 dd 21 	sts	0x21DD, r24
	gEnvDown.emg_btn_set = 4;
    21f0:	20 93 ce 21 	sts	0x21CE, r18
	gEnvDown.emg_btn_reset = 5;
    21f4:	90 93 cf 21 	sts	0x21CF, r25
	gEnvDown.set_time = 1;
    21f8:	80 93 d0 21 	sts	0x21D0, r24
	gEnvDown.reset_time = 1;
    21fc:	80 93 d1 21 	sts	0x21D1, r24
	
	cc1100_init(delay_ms,spi_write_single,spi_read_single,spi_write,spi_read,spi_select,spi_deselect,spi_read_somi);
    2200:	0f 2e       	mov	r0, r31
    2202:	fc e2       	ldi	r31, 0x2C	; 44
    2204:	af 2e       	mov	r10, r31
    2206:	f7 e1       	ldi	r31, 0x17	; 23
    2208:	bf 2e       	mov	r11, r31
    220a:	f0 2d       	mov	r31, r0
    220c:	0f 2e       	mov	r0, r31
    220e:	f8 e2       	ldi	r31, 0x28	; 40
    2210:	cf 2e       	mov	r12, r31
    2212:	f7 e1       	ldi	r31, 0x17	; 23
    2214:	df 2e       	mov	r13, r31
    2216:	f0 2d       	mov	r31, r0
    2218:	0f 2e       	mov	r0, r31
    221a:	f4 e2       	ldi	r31, 0x24	; 36
    221c:	ef 2e       	mov	r14, r31
    221e:	f7 e1       	ldi	r31, 0x17	; 23
    2220:	ff 2e       	mov	r15, r31
    2222:	f0 2d       	mov	r31, r0
    2224:	02 e1       	ldi	r16, 0x12	; 18
    2226:	17 e1       	ldi	r17, 0x17	; 23
    2228:	2e ef       	ldi	r18, 0xFE	; 254
    222a:	36 e1       	ldi	r19, 0x16	; 22
    222c:	4a ef       	ldi	r20, 0xFA	; 250
    222e:	56 e1       	ldi	r21, 0x16	; 22
    2230:	6b ee       	ldi	r22, 0xEB	; 235
    2232:	76 e1       	ldi	r23, 0x16	; 22
    2234:	86 ee       	ldi	r24, 0xE6	; 230
    2236:	93 e0       	ldi	r25, 0x03	; 3
    2238:	0e 94 1f 01 	call	0x23e	; 0x23e <cc1100_init>
	cc1101_init_reg();
    223c:	0e 94 56 02 	call	0x4ac	; 0x4ac <cc1101_init_reg>
	cc1101_8PATABLE_write_reg();
    2240:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <cc1101_8PATABLE_write_reg>

	wdt_enable(0x26);		//wdt timeout 4sec enable
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	97 e2       	ldi	r25, 0x27	; 39
    2248:	88 ed       	ldi	r24, 0xD8	; 216
    224a:	08 b6       	in	r0, 0x38	; 56
    224c:	18 be       	out	0x38, r1	; 56
    224e:	84 bf       	out	0x34, r24	; 52
    2250:	90 93 80 00 	sts	0x0080, r25
    2254:	20 91 82 00 	lds	r18, 0x0082
    2258:	21 fd       	sbrc	r18, 1
    225a:	fc cf       	rjmp	.-8      	; 0x2254 <main+0xb4>
    225c:	08 be       	out	0x38, r0	; 56
	//wdt_enable(9);
	//WDT.CTRL = 0x11;		//wdt_setting
	//WDT.CTRL |= 0x03;		//wdt_enable
	wdt_reset();
    225e:	a8 95       	wdr
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2260:	87 e0       	ldi	r24, 0x07	; 7
    2262:	e0 ea       	ldi	r30, 0xA0	; 160
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	82 83       	std	Z+2, r24	; 0x02
	sei();	
    2268:	78 94       	sei
	

	btn_emg = get_emergency_button();
    226a:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    226e:	80 93 07 22 	sts	0x2207, r24
	btn_open = get_cab_unlocked();
    2272:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_cab_unlocked>
    2276:	80 93 06 22 	sts	0x2206, r24
	btn_rear_open = get_rear_door_unlocked();
    227a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_rear_door_unlocked>
    227e:	80 93 0a 22 	sts	0x220A, r24
	btn_side_open = get_side_door_unlocked();
    2282:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
    2286:	80 93 df 21 	sts	0x21DF, r24
	btn_set = get_security_set();
    228a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    228e:	80 93 de 21 	sts	0x21DE, r24
	btn_reset = get_security_reset();
    2292:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    2296:	80 93 05 22 	sts	0x2205, r24

	
	test_mode = ~get_test() & 0x0f;
    229a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <get_test>
    229e:	80 95       	com	r24
    22a0:	8f 70       	andi	r24, 0x0F	; 15
    22a2:	8d 83       	std	Y+5, r24	; 0x05

	if((~get_dly() & 0x0f) == 0x04)
    22a4:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <get_dly>
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	80 95       	com	r24
    22ac:	90 95       	com	r25
    22ae:	8f 70       	andi	r24, 0x0F	; 15
    22b0:	99 27       	eor	r25, r25
    22b2:	04 97       	sbiw	r24, 0x04	; 4
    22b4:	21 f4       	brne	.+8      	; 0x22be <main+0x11e>
	{
		gDriver = true;
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	80 93 5c 21 	sts	0x215C, r24
    22bc:	12 c0       	rjmp	.+36     	; 0x22e2 <main+0x142>
	}
	else if((~get_dly() & 0x0f) == 0x0c)
    22be:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <get_dly>
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	80 95       	com	r24
    22c6:	90 95       	com	r25
    22c8:	8f 70       	andi	r24, 0x0F	; 15
    22ca:	99 27       	eor	r25, r25
    22cc:	0c 97       	sbiw	r24, 0x0c	; 12
    22ce:	19 f4       	brne	.+6      	; 0x22d6 <main+0x136>
	{
		gDriver = false;
    22d0:	10 92 5c 21 	sts	0x215C, r1
    22d4:	06 c0       	rjmp	.+12     	; 0x22e2 <main+0x142>
	}
	else
	{
		gDriver = false;
    22d6:	10 92 5c 21 	sts	0x215C, r1
		mentenece_mode = 0;
    22da:	10 92 28 20 	sts	0x2028, r1
    22de:	10 92 29 20 	sts	0x2029, r1
	}
	
	
	if((test_mode != 0x00) && (test_mode != 0x01))
    22e2:	2d 81       	ldd	r18, Y+5	; 0x05
    22e4:	22 30       	cpi	r18, 0x02	; 2
    22e6:	28 f0       	brcs	.+10     	; 0x22f2 <main+0x152>
	{
		mentenece_mode = 0;
    22e8:	10 92 28 20 	sts	0x2028, r1
    22ec:	10 92 29 20 	sts	0x2029, r1
    22f0:	a8 c3       	rjmp	.+1872   	; 0x2a42 <main+0x8a2>
	}
	else if(test_mode == 0x01)
    22f2:	8d 81       	ldd	r24, Y+5	; 0x05
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	09 f0       	breq	.+2      	; 0x22fa <main+0x15a>
    22f8:	a4 c3       	rjmp	.+1864   	; 0x2a42 <main+0x8a2>
	{
		sound_mute = 0;
    22fa:	10 92 26 20 	sts	0x2026, r1
    22fe:	10 92 27 20 	sts	0x2027, r1
    2302:	9f c3       	rjmp	.+1854   	; 0x2a42 <main+0x8a2>
    while(1)
    {

		
		
		set_freq();
    2304:	0e 94 5f 04 	call	0x8be	; 0x8be <set_freq>
		test_wave_mode();
		
		continue;
		#endif 		

		wdt_reset();
    2308:	a8 95       	wdr

		if(temp_reset_count > 5)
    230a:	80 91 24 20 	lds	r24, 0x2024
    230e:	90 91 25 20 	lds	r25, 0x2025
    2312:	06 97       	sbiw	r24, 0x06	; 6
    2314:	3c f0       	brlt	.+14     	; 0x2324 <main+0x184>
		{
			temp_reset_count=-1;
    2316:	a0 92 24 20 	sts	0x2024, r10
    231a:	b0 92 25 20 	sts	0x2025, r11
			set_security_mode_led(false);
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
			}
			#endif
		}
		
		
		if(set_state != TEMP_RESET && set_state != RESET)
    2324:	80 91 5d 21 	lds	r24, 0x215D
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	71 f0       	breq	.+28     	; 0x2348 <main+0x1a8>
    232c:	80 91 5d 21 	lds	r24, 0x215D
    2330:	88 23       	and	r24, r24
    2332:	51 f0       	breq	.+20     	; 0x2348 <main+0x1a8>
		{
			if(door_open_msg_cancel != -1)
    2334:	80 91 22 20 	lds	r24, 0x2022
    2338:	90 91 23 20 	lds	r25, 0x2023
    233c:	01 96       	adiw	r24, 0x01	; 1
    233e:	21 f0       	breq	.+8      	; 0x2348 <main+0x1a8>
			{
				door_open_msg_cancel = -1;
    2340:	a0 92 22 20 	sts	0x2022, r10
    2344:	b0 92 23 20 	sts	0x2023, r11
		}
		



		if((btn_emg_count > -1) || (btn_open_count > -1) || (btn_rear_open_count > -1) || (btn_side_open_count > -1) || (btn_set_count > -1) || (btn_reset_count > -1) || (btn_powerdown_count > -1) || (sleep_cansel_count > -1) || (btn_ctl_deny_timeout_count > -1) || (PORTA.IN & 0x02) || mentenece_mode > -1 || temp_reset_count > -1)
    2348:	80 91 3c 20 	lds	r24, 0x203C
    234c:	90 91 3d 20 	lds	r25, 0x203D
    2350:	99 23       	and	r25, r25
    2352:	0c f0       	brlt	.+2      	; 0x2356 <main+0x1b6>
    2354:	40 c0       	rjmp	.+128    	; 0x23d6 <main+0x236>
    2356:	80 91 3a 20 	lds	r24, 0x203A
    235a:	90 91 3b 20 	lds	r25, 0x203B
    235e:	99 23       	and	r25, r25
    2360:	d4 f5       	brge	.+116    	; 0x23d6 <main+0x236>
    2362:	80 91 38 20 	lds	r24, 0x2038
    2366:	90 91 39 20 	lds	r25, 0x2039
    236a:	99 23       	and	r25, r25
    236c:	a4 f5       	brge	.+104    	; 0x23d6 <main+0x236>
    236e:	80 91 36 20 	lds	r24, 0x2036
    2372:	90 91 37 20 	lds	r25, 0x2037
    2376:	99 23       	and	r25, r25
    2378:	74 f5       	brge	.+92     	; 0x23d6 <main+0x236>
    237a:	80 91 34 20 	lds	r24, 0x2034
    237e:	90 91 35 20 	lds	r25, 0x2035
    2382:	99 23       	and	r25, r25
    2384:	44 f5       	brge	.+80     	; 0x23d6 <main+0x236>
    2386:	80 91 32 20 	lds	r24, 0x2032
    238a:	90 91 33 20 	lds	r25, 0x2033
    238e:	99 23       	and	r25, r25
    2390:	14 f5       	brge	.+68     	; 0x23d6 <main+0x236>
    2392:	80 91 2c 20 	lds	r24, 0x202C
    2396:	90 91 2d 20 	lds	r25, 0x202D
    239a:	99 23       	and	r25, r25
    239c:	e4 f4       	brge	.+56     	; 0x23d6 <main+0x236>
    239e:	80 91 2a 20 	lds	r24, 0x202A
    23a2:	90 91 2b 20 	lds	r25, 0x202B
    23a6:	99 23       	and	r25, r25
    23a8:	b4 f4       	brge	.+44     	; 0x23d6 <main+0x236>
    23aa:	80 91 2e 20 	lds	r24, 0x202E
    23ae:	90 91 2f 20 	lds	r25, 0x202F
    23b2:	99 23       	and	r25, r25
    23b4:	84 f4       	brge	.+32     	; 0x23d6 <main+0x236>
    23b6:	80 91 08 06 	lds	r24, 0x0608
    23ba:	81 fd       	sbrc	r24, 1
    23bc:	0c c0       	rjmp	.+24     	; 0x23d6 <main+0x236>
    23be:	80 91 28 20 	lds	r24, 0x2028
    23c2:	90 91 29 20 	lds	r25, 0x2029
    23c6:	99 23       	and	r25, r25
    23c8:	34 f4       	brge	.+12     	; 0x23d6 <main+0x236>
    23ca:	80 91 24 20 	lds	r24, 0x2024
    23ce:	90 91 25 20 	lds	r25, 0x2025
    23d2:	99 23       	and	r25, r25
    23d4:	8c f0       	brlt	.+34     	; 0x23f8 <main+0x258>
		{
			g_length = cc1101_rx((u8 *)&gPacket,&rssi,&lqi,RX_NOMAL);
    23d6:	22 e0       	ldi	r18, 0x02	; 2
    23d8:	ae 01       	movw	r20, r28
    23da:	4e 5f       	subi	r20, 0xFE	; 254
    23dc:	5f 4f       	sbci	r21, 0xFF	; 255
    23de:	be 01       	movw	r22, r28
    23e0:	6f 5f       	subi	r22, 0xFF	; 255
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255
    23e4:	89 ee       	ldi	r24, 0xE9	; 233
    23e6:	91 e2       	ldi	r25, 0x21	; 33
    23e8:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	80 93 e0 21 	sts	0x21E0, r24
    23f2:	90 93 e1 21 	sts	0x21E1, r25
    23f6:	14 c0       	rjmp	.+40     	; 0x2420 <main+0x280>
		}
		else
		{
			g_length = cc1101_rx((u8 *)&gPacket,&rssi,&lqi,RX_WOR);
    23f8:	21 e0       	ldi	r18, 0x01	; 1
    23fa:	ae 01       	movw	r20, r28
    23fc:	4e 5f       	subi	r20, 0xFE	; 254
    23fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2400:	be 01       	movw	r22, r28
    2402:	6f 5f       	subi	r22, 0xFF	; 255
    2404:	7f 4f       	sbci	r23, 0xFF	; 255
    2406:	89 ee       	ldi	r24, 0xE9	; 233
    2408:	91 e2       	ldi	r25, 0x21	; 33
    240a:	0e 94 2b 05 	call	0xa56	; 0xa56 <cc1101_rx>
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	80 93 e0 21 	sts	0x21E0, r24
    2414:	90 93 e1 21 	sts	0x21E1, r25
			//if(g_length != 0)
			{
				sleep_cansel_count = 0;				
    2418:	10 92 2a 20 	sts	0x202A, r1
    241c:	10 92 2b 20 	sts	0x202B, r1
			}
	
		}

		temp = read_adc();
    2420:	0e 94 1c 04 	call	0x838	; 0x838 <read_adc>
    2424:	8b 83       	std	Y+3, r24	; 0x03
    2426:	9c 83       	std	Y+4, r25	; 0x04
		//if(temp < 0x0744 && batt_low_voice == -1)	//batt volt less than 3.7v
		//if(temp < 0x0750 && batt_low_voice == -1)	//batt volt less than 3.7v
		//if(temp < 0x0762 && batt_low_voice == -1)	//batt volt less than 3.7v
		//if(temp < 0x06f8 && batt_low_voice == -1)	//batt volt less than 3.7v		
		//if(temp < 0x071a && batt_low_voice == -1)	//batt volt less than 3.7v
		if(temp < 0x072c && batt_low_voice == -1)	//batt volt less than 3.7v
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	8c 32       	cpi	r24, 0x2C	; 44
    242e:	97 40       	sbci	r25, 0x07	; 7
    2430:	90 f5       	brcc	.+100    	; 0x2496 <main+0x2f6>
    2432:	80 91 30 20 	lds	r24, 0x2030
    2436:	90 91 31 20 	lds	r25, 0x2031
    243a:	01 96       	adiw	r24, 0x01	; 1
    243c:	61 f5       	brne	.+88     	; 0x2496 <main+0x2f6>
    243e:	03 e0       	ldi	r16, 0x03	; 3
    2440:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(int i=0;i<3;i++)
			{
				set_bat_led(true);
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
    2448:	8f ef       	ldi	r24, 0xFF	; 255
    244a:	93 ec       	ldi	r25, 0xC3	; 195
    244c:	e9 e0       	ldi	r30, 0x09	; 9
    244e:	81 50       	subi	r24, 0x01	; 1
    2450:	90 40       	sbci	r25, 0x00	; 0
    2452:	e0 40       	sbci	r30, 0x00	; 0
    2454:	e1 f7       	brne	.-8      	; 0x244e <main+0x2ae>
    2456:	00 c0       	rjmp	.+0      	; 0x2458 <main+0x2b8>
    2458:	00 00       	nop
				_delay_ms(100);
				set_bat_led(false);
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
    2460:	ff ef       	ldi	r31, 0xFF	; 255
    2462:	23 ec       	ldi	r18, 0xC3	; 195
    2464:	89 e0       	ldi	r24, 0x09	; 9
    2466:	f1 50       	subi	r31, 0x01	; 1
    2468:	20 40       	sbci	r18, 0x00	; 0
    246a:	80 40       	sbci	r24, 0x00	; 0
    246c:	e1 f7       	brne	.-8      	; 0x2466 <main+0x2c6>
    246e:	00 c0       	rjmp	.+0      	; 0x2470 <main+0x2d0>
    2470:	00 00       	nop
    2472:	01 50       	subi	r16, 0x01	; 1
    2474:	11 09       	sbc	r17, r1
		//if(temp < 0x0762 && batt_low_voice == -1)	//batt volt less than 3.7v
		//if(temp < 0x06f8 && batt_low_voice == -1)	//batt volt less than 3.7v		
		//if(temp < 0x071a && batt_low_voice == -1)	//batt volt less than 3.7v
		if(temp < 0x072c && batt_low_voice == -1)	//batt volt less than 3.7v
		{
			for(int i=0;i<3;i++)
    2476:	01 15       	cp	r16, r1
    2478:	11 05       	cpc	r17, r1
    247a:	19 f7       	brne	.-58     	; 0x2442 <main+0x2a2>
				_delay_ms(100);
				set_bat_led(false);
				_delay_ms(100);
			}
			
			if(batt_low_voice == -1)
    247c:	80 91 30 20 	lds	r24, 0x2030
    2480:	90 91 31 20 	lds	r25, 0x2031
    2484:	01 96       	adiw	r24, 0x01	; 1
    2486:	39 f4       	brne	.+14     	; 0x2496 <main+0x2f6>
			{
				set_voice(7);
    2488:	87 e0       	ldi	r24, 0x07	; 7
    248a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
				batt_low_voice=0;
    248e:	10 92 30 20 	sts	0x2030, r1
    2492:	10 92 31 20 	sts	0x2031, r1
			}

		}
		

		if(g_length == sizeof(packet_t))
    2496:	80 91 e0 21 	lds	r24, 0x21E0
    249a:	90 91 e1 21 	lds	r25, 0x21E1
    249e:	4c 97       	sbiw	r24, 0x1c	; 28
    24a0:	09 f0       	breq	.+2      	; 0x24a4 <main+0x304>
    24a2:	65 c1       	rjmp	.+714    	; 0x276e <main+0x5ce>
		{
			gMasterId = gPacket.hdr.master_id;
    24a4:	f3 01       	movw	r30, r6
    24a6:	80 81       	ld	r24, Z
    24a8:	91 81       	ldd	r25, Z+1	; 0x01
    24aa:	a2 81       	ldd	r26, Z+2	; 0x02
    24ac:	b3 81       	ldd	r27, Z+3	; 0x03
    24ae:	80 93 e2 21 	sts	0x21E2, r24
    24b2:	90 93 e3 21 	sts	0x21E3, r25
    24b6:	a0 93 e4 21 	sts	0x21E4, r26
    24ba:	b0 93 e5 21 	sts	0x21E5, r27
			//gtemp = ~get_dly() & 0x0c;
			gtemp = ~get_test() & 0x0f;
    24be:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <get_test>
    24c2:	80 95       	com	r24
    24c4:	8f 70       	andi	r24, 0x0F	; 15
    24c6:	80 93 09 22 	sts	0x2209, r24
			if((gtemp) == 0x06)
    24ca:	86 30       	cpi	r24, 0x06	; 6
    24cc:	09 f0       	breq	.+2      	; 0x24d0 <main+0x330>
    24ce:	50 c0       	rjmp	.+160    	; 0x2570 <main+0x3d0>
			{
				if(gPacket.hdr.slave_id == 0xffffffff && gPacket.hdr.payload == PAYLOAD_SETUP_ID && deny_setup_id < 600)
    24d0:	f1 01       	movw	r30, r2
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	a2 81       	ldd	r26, Z+2	; 0x02
    24d8:	b3 81       	ldd	r27, Z+3	; 0x03
    24da:	8f 3f       	cpi	r24, 0xFF	; 255
    24dc:	9f 4f       	sbci	r25, 0xFF	; 255
    24de:	af 4f       	sbci	r26, 0xFF	; 255
    24e0:	bf 4f       	sbci	r27, 0xFF	; 255
    24e2:	09 f0       	breq	.+2      	; 0x24e6 <main+0x346>
    24e4:	44 c1       	rjmp	.+648    	; 0x276e <main+0x5ce>
    24e6:	e4 ef       	ldi	r30, 0xF4	; 244
    24e8:	f1 e2       	ldi	r31, 0x21	; 33
    24ea:	80 81       	ld	r24, Z
    24ec:	88 30       	cpi	r24, 0x08	; 8
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <main+0x352>
    24f0:	3e c1       	rjmp	.+636    	; 0x276e <main+0x5ce>
    24f2:	80 91 54 21 	lds	r24, 0x2154
    24f6:	90 91 55 21 	lds	r25, 0x2155
    24fa:	88 35       	cpi	r24, 0x58	; 88
    24fc:	92 40       	sbci	r25, 0x02	; 2
    24fe:	0c f0       	brlt	.+2      	; 0x2502 <main+0x362>
    2500:	36 c1       	rjmp	.+620    	; 0x276e <main+0x5ce>
					
					setup_t * setup;
					int kk;
					

					comm_led();
    2502:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <comm_led>
					setup = (set_t *)	&gPacket;

					setup_ack(setup->id);
    2506:	f4 01       	movw	r30, r8
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <setup_ack>
					
					gEnv.id = setup->id;
    2514:	f4 01       	movw	r30, r8
    2516:	80 81       	ld	r24, Z
    2518:	91 81       	ldd	r25, Z+1	; 0x01
    251a:	a2 81       	ldd	r26, Z+2	; 0x02
    251c:	b3 81       	ldd	r27, Z+3	; 0x03
    251e:	f2 01       	movw	r30, r4
    2520:	80 83       	st	Z, r24
    2522:	91 83       	std	Z+1, r25	; 0x01
    2524:	a2 83       	std	Z+2, r26	; 0x02
    2526:	b3 83       	std	Z+3, r27	; 0x03
					env_save(&gEnv);
    2528:	82 ed       	ldi	r24, 0xD2	; 210
    252a:	91 e2       	ldi	r25, 0x21	; 33
    252c:	0e 94 0c 03 	call	0x618	; 0x618 <env_save>
    2530:	0a e0       	ldi	r16, 0x0A	; 10
    2532:	10 e0       	ldi	r17, 0x00	; 0
					
					for(kk = 0 ; kk < 10 ; kk++)
					{
						set_emg_led(1);
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
    253a:	ff ef       	ldi	r31, 0xFF	; 255
    253c:	23 ec       	ldi	r18, 0xC3	; 195
    253e:	89 e0       	ldi	r24, 0x09	; 9
    2540:	f1 50       	subi	r31, 0x01	; 1
    2542:	20 40       	sbci	r18, 0x00	; 0
    2544:	80 40       	sbci	r24, 0x00	; 0
    2546:	e1 f7       	brne	.-8      	; 0x2540 <main+0x3a0>
    2548:	00 c0       	rjmp	.+0      	; 0x254a <main+0x3aa>
    254a:	00 00       	nop
						_delay_ms(100);
						set_emg_led(0);
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
    2552:	9f ef       	ldi	r25, 0xFF	; 255
    2554:	e3 ec       	ldi	r30, 0xC3	; 195
    2556:	f9 e0       	ldi	r31, 0x09	; 9
    2558:	91 50       	subi	r25, 0x01	; 1
    255a:	e0 40       	sbci	r30, 0x00	; 0
    255c:	f0 40       	sbci	r31, 0x00	; 0
    255e:	e1 f7       	brne	.-8      	; 0x2558 <main+0x3b8>
    2560:	00 c0       	rjmp	.+0      	; 0x2562 <main+0x3c2>
    2562:	00 00       	nop
    2564:	01 50       	subi	r16, 0x01	; 1
    2566:	11 09       	sbc	r17, r1
					setup_ack(setup->id);
					
					gEnv.id = setup->id;
					env_save(&gEnv);
					
					for(kk = 0 ; kk < 10 ; kk++)
    2568:	01 15       	cp	r16, r1
    256a:	11 05       	cpc	r17, r1
    256c:	19 f7       	brne	.-58     	; 0x2534 <main+0x394>
    256e:	ff c0       	rjmp	.+510    	; 0x276e <main+0x5ce>
						set_emg_led(0);
						_delay_ms(100);
					}
				}
			}
			else if(gPacket.hdr.slave_id == gEnv.id)
    2570:	f2 01       	movw	r30, r4
    2572:	80 81       	ld	r24, Z
    2574:	91 81       	ldd	r25, Z+1	; 0x01
    2576:	a2 81       	ldd	r26, Z+2	; 0x02
    2578:	b3 81       	ldd	r27, Z+3	; 0x03
    257a:	f1 01       	movw	r30, r2
    257c:	40 81       	ld	r20, Z
    257e:	51 81       	ldd	r21, Z+1	; 0x01
    2580:	62 81       	ldd	r22, Z+2	; 0x02
    2582:	73 81       	ldd	r23, Z+3	; 0x03
    2584:	48 17       	cp	r20, r24
    2586:	59 07       	cpc	r21, r25
    2588:	6a 07       	cpc	r22, r26
    258a:	7b 07       	cpc	r23, r27
    258c:	09 f0       	breq	.+2      	; 0x2590 <main+0x3f0>
    258e:	ef c0       	rjmp	.+478    	; 0x276e <main+0x5ce>
			{
				switch(gPacket.hdr.payload)
    2590:	e4 ef       	ldi	r30, 0xF4	; 244
    2592:	f1 e2       	ldi	r31, 0x21	; 33
    2594:	80 81       	ld	r24, Z
    2596:	82 30       	cpi	r24, 0x02	; 2
    2598:	09 f4       	brne	.+2      	; 0x259c <main+0x3fc>
    259a:	7f c0       	rjmp	.+254    	; 0x269a <main+0x4fa>
    259c:	28 f4       	brcc	.+10     	; 0x25a8 <main+0x408>
    259e:	88 23       	and	r24, r24
    25a0:	51 f0       	breq	.+20     	; 0x25b6 <main+0x416>
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	59 f1       	breq	.+86     	; 0x25fc <main+0x45c>
    25a6:	e1 c0       	rjmp	.+450    	; 0x276a <main+0x5ca>
    25a8:	8e 30       	cpi	r24, 0x0E	; 14
    25aa:	09 f4       	brne	.+2      	; 0x25ae <main+0x40e>
    25ac:	9a c0       	rjmp	.+308    	; 0x26e2 <main+0x542>
    25ae:	80 31       	cpi	r24, 0x10	; 16
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <main+0x414>
    25b2:	b0 c0       	rjmp	.+352    	; 0x2714 <main+0x574>
    25b4:	da c0       	rjmp	.+436    	; 0x276a <main+0x5ca>
				{
					case PAYLOAD_SYNC:
						sync_ack();
    25b6:	0e 94 22 0a 	call	0x1444	; 0x1444 <sync_ack>
						
						gEnv.emg_btn_set = gPacket.payload[1];
    25ba:	e6 ef       	ldi	r30, 0xF6	; 246
    25bc:	f1 e2       	ldi	r31, 0x21	; 33
    25be:	20 81       	ld	r18, Z
    25c0:	f6 01       	movw	r30, r12
    25c2:	20 83       	st	Z, r18
						gEnv.emg_btn_reset = gPacket.payload[2];
    25c4:	e7 ef       	ldi	r30, 0xF7	; 247
    25c6:	f1 e2       	ldi	r31, 0x21	; 33
    25c8:	90 81       	ld	r25, Z
    25ca:	f7 01       	movw	r30, r14
    25cc:	90 83       	st	Z, r25
						gEnv.set_time=gPacket.payload[3];
    25ce:	80 91 f8 21 	lds	r24, 0x21F8
    25d2:	80 93 dc 21 	sts	0x21DC, r24
						gEnv.reset_time=gPacket.payload[3];
    25d6:	80 93 dd 21 	sts	0x21DD, r24
						gEnvDown.emg_btn_set = gPacket.payload[1];
    25da:	20 93 ce 21 	sts	0x21CE, r18
						gEnvDown.emg_btn_reset = gPacket.payload[2];
    25de:	90 93 cf 21 	sts	0x21CF, r25
						gEnvDown.set_time=gPacket.payload[3];
    25e2:	80 93 d0 21 	sts	0x21D0, r24
						gEnvDown.reset_time=gPacket.payload[3];
    25e6:	80 93 d1 21 	sts	0x21D1, r24
						emg_state = gPacket.payload[4] ;
    25ea:	80 91 f9 21 	lds	r24, 0x21F9
    25ee:	80 93 5e 21 	sts	0x215E, r24
						set_state = gPacket.payload[5] ;
    25f2:	80 91 fa 21 	lds	r24, 0x21FA
    25f6:	80 93 5d 21 	sts	0x215D, r24

						break;
    25fa:	b7 c0       	rjmp	.+366    	; 0x276a <main+0x5ca>
					case SET_STATE:
					{
						set_t * set;
						
						set_state_ack();
    25fc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <set_state_ack>

						set = (set_t *)	&gPacket;
						
						
						if(set_state != set->set)
    2600:	f4 01       	movw	r30, r8
    2602:	80 81       	ld	r24, Z
    2604:	90 91 5d 21 	lds	r25, 0x215D
    2608:	89 17       	cp	r24, r25
    260a:	09 f4       	brne	.+2      	; 0x260e <main+0x46e>
    260c:	ae c0       	rjmp	.+348    	; 0x276a <main+0x5ca>
						{
							set_state = set->set ;
    260e:	80 93 5d 21 	sts	0x215D, r24
							//set_security_mode_led(set->set);
						
							//if(set->set == true)
							//if(set->set == 1 || set->set == 2)
							if(set->set == SET)
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	79 f4       	brne	.+30     	; 0x2634 <main+0x494>
							{
								set_security_mode_led(true);
    2616:	81 e0       	ldi	r24, 0x01	; 1
    2618:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
								set_voice(1);
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
								temp_reset_count=-1;
    2622:	a0 92 24 20 	sts	0x2024, r10
    2626:	b0 92 25 20 	sts	0x2025, r11
								door_open_msg_cancel=-1;
    262a:	a0 92 22 20 	sts	0x2022, r10
    262e:	b0 92 23 20 	sts	0x2023, r11
    2632:	9b c0       	rjmp	.+310    	; 0x276a <main+0x5ca>
							}
							else if(set->set == TEMP_RESET)
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	b9 f4       	brne	.+46     	; 0x2666 <main+0x4c6>
							{
								set_security_mode_led(false);
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
								if(sound_mute == -1)
    263e:	80 91 26 20 	lds	r24, 0x2026
    2642:	90 91 27 20 	lds	r25, 0x2027
    2646:	01 96       	adiw	r24, 0x01	; 1
    2648:	19 f4       	brne	.+6      	; 0x2650 <main+0x4b0>
								{
									set_voice(2);
    264a:	82 e0       	ldi	r24, 0x02	; 2
    264c:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
								}

								set_car_emergency_led(0);
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
								set_emg_led(false);
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
								temp_reset_count=0;
    265c:	10 92 24 20 	sts	0x2024, r1
    2660:	10 92 25 20 	sts	0x2025, r1
    2664:	82 c0       	rjmp	.+260    	; 0x276a <main+0x5ca>
																
							}
							else
							{
								set_security_mode_led(false);
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
								if(sound_mute == -1)
    266c:	80 91 26 20 	lds	r24, 0x2026
    2670:	90 91 27 20 	lds	r25, 0x2027
    2674:	01 96       	adiw	r24, 0x01	; 1
    2676:	19 f4       	brne	.+6      	; 0x267e <main+0x4de>
								{
									set_voice(2);
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
								}
								set_car_emergency_led(0);
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
								set_emg_led(false);
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
								set_emg_button_led(false);
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
								temp_reset_count=-1;
    2690:	a0 92 24 20 	sts	0x2024, r10
    2694:	b0 92 25 20 	sts	0x2025, r11
    2698:	68 c0       	rjmp	.+208    	; 0x276a <main+0x5ca>
					}
					case PAYLOAD_EMG:
					{
						emg_t * emg;
						
						emg_ack();
    269a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <emg_ack>

						emg = (emg_t *)	&gPacket;
						
						
						
						emg_state = emg->emg ;
    269e:	f4 01       	movw	r30, r8
    26a0:	80 81       	ld	r24, Z
    26a2:	80 93 5e 21 	sts	0x215E, r24
						
						if(remocon_emg == true)
    26a6:	80 91 5b 21 	lds	r24, 0x215B
    26aa:	81 30       	cpi	r24, 0x01	; 1
    26ac:	19 f4       	brne	.+6      	; 0x26b4 <main+0x514>
						{
							remocon_emg = false;
    26ae:	10 92 5b 21 	sts	0x215B, r1
							break;
    26b2:	5b c0       	rjmp	.+182    	; 0x276a <main+0x5ca>
						}
						
						set_emg_led(emg_state);
    26b4:	80 91 5e 21 	lds	r24, 0x215E
    26b8:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
						
						if(emg_state == true)
    26bc:	80 91 5e 21 	lds	r24, 0x215E
    26c0:	81 30       	cpi	r24, 0x01	; 1
    26c2:	31 f4       	brne	.+12     	; 0x26d0 <main+0x530>
						{
							//set_voice(1);
							main_emg = true;
    26c4:	80 93 5a 21 	sts	0x215A, r24
							set_voice(5);
    26c8:	85 e0       	ldi	r24, 0x05	; 5
    26ca:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
    26ce:	4d c0       	rjmp	.+154    	; 0x276a <main+0x5ca>
							// 
						}
						else
						{
							main_emg = false;
    26d0:	10 92 5a 21 	sts	0x215A, r1
							set_emg_button_led(false);
    26d4:	80 e0       	ldi	r24, 0x00	; 0
    26d6:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
							set_car_emergency_led(false);
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
    26e0:	44 c0       	rjmp	.+136    	; 0x276a <main+0x5ca>
						
					case PAYLOAD_EMG_DOOR:
					{
						emg_door_t * emg;
						
						emg_door_ack();
    26e2:	0e 94 ae 0a 	call	0x155c	; 0x155c <emg_door_ack>

						emg = (emg_door_t *)	&gPacket;
						
					
						set_car_emergency_led(emg->emg);
    26e6:	f4 01       	movw	r30, r8
    26e8:	80 81       	ld	r24, Z
    26ea:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
						
						emg_state = emg->emg ;
    26ee:	f4 01       	movw	r30, r8
    26f0:	80 81       	ld	r24, Z
    26f2:	80 93 5e 21 	sts	0x215E, r24
						set_emg_led(emg_state);
    26f6:	80 91 5e 21 	lds	r24, 0x215E
    26fa:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
						set_emg_button_led(false);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
						
						if(emg->emg == true)
    2704:	f4 01       	movw	r30, r8
    2706:	80 81       	ld	r24, Z
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	79 f5       	brne	.+94     	; 0x276a <main+0x5ca>
						{
							//set_voice(1);
							set_voice(4);
    270c:	84 e0       	ldi	r24, 0x04	; 4
    270e:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
    2712:	2b c0       	rjmp	.+86     	; 0x276a <main+0x5ca>
					
					case PAYLOAD_DRIVER_DOOR_ERR_REPORT:
					{
						set_t * set;
						
						driver_door_err_report_ack();
    2714:	0e 94 08 0b 	call	0x1610	; 0x1610 <driver_door_err_report_ack>
						

						set = (set_t *)	&gPacket;						
						
						if(door_open_msg_cancel == -1 || door_open_msg_cancel > 18)
    2718:	80 91 22 20 	lds	r24, 0x2022
    271c:	90 91 23 20 	lds	r25, 0x2023
    2720:	01 96       	adiw	r24, 0x01	; 1
    2722:	31 f0       	breq	.+12     	; 0x2730 <main+0x590>
    2724:	80 91 22 20 	lds	r24, 0x2022
    2728:	90 91 23 20 	lds	r25, 0x2023
    272c:	43 97       	sbiw	r24, 0x13	; 19
    272e:	84 f0       	brlt	.+32     	; 0x2750 <main+0x5b0>
						{
							set_voice(6);
    2730:	86 e0       	ldi	r24, 0x06	; 6
    2732:	0e 94 22 16 	call	0x2c44	; 0x2c44 <set_voice>
							buzzer_error();
    2736:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <buzzer_error>
							
							if(door_open_msg_cancel != -1)
    273a:	80 91 22 20 	lds	r24, 0x2022
    273e:	90 91 23 20 	lds	r25, 0x2023
    2742:	01 96       	adiw	r24, 0x01	; 1
    2744:	71 f0       	breq	.+28     	; 0x2762 <main+0x5c2>
							{
								door_open_msg_cancel = 0;
    2746:	10 92 22 20 	sts	0x2022, r1
    274a:	10 92 23 20 	sts	0x2023, r1
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <main+0x5c2>
							}
						}
						else
						{
							door_open_msg_cancel++;
    2750:	80 91 22 20 	lds	r24, 0x2022
    2754:	90 91 23 20 	lds	r25, 0x2023
    2758:	01 96       	adiw	r24, 0x01	; 1
    275a:	80 93 22 20 	sts	0x2022, r24
    275e:	90 93 23 20 	sts	0x2023, r25
						}
						
						temp_reset_count=0;
    2762:	10 92 24 20 	sts	0x2024, r1
    2766:	10 92 25 20 	sts	0x2025, r1
						break;
					}
					
				}
				comm_led();
    276a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <comm_led>

			} 
		}
		cc1100_cmd_idle();
    276e:	0e 94 2b 02 	call	0x456	; 0x456 <cc1100_cmd_idle>
		
		if(get_dly() & 0x01)
    2772:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <get_dly>
    2776:	80 ff       	sbrs	r24, 0
    2778:	11 c0       	rjmp	.+34     	; 0x279c <main+0x5fc>
		{
			gEnv.emg_btn_set = gEnvDown.emg_btn_set;
    277a:	80 91 ce 21 	lds	r24, 0x21CE
    277e:	f6 01       	movw	r30, r12
    2780:	80 83       	st	Z, r24
			gEnv.emg_btn_reset = gEnvDown.emg_btn_reset;
    2782:	80 91 cf 21 	lds	r24, 0x21CF
    2786:	f7 01       	movw	r30, r14
    2788:	80 83       	st	Z, r24
			gEnv.set_time = gEnvDown.set_time;
    278a:	e0 ed       	ldi	r30, 0xD0	; 208
    278c:	f1 e2       	ldi	r31, 0x21	; 33
    278e:	80 81       	ld	r24, Z
    2790:	80 93 dc 21 	sts	0x21DC, r24
			gEnv.reset_time = gEnvDown.set_time;
    2794:	80 81       	ld	r24, Z
    2796:	80 93 dd 21 	sts	0x21DD, r24
    279a:	0b c0       	rjmp	.+22     	; 0x27b2 <main+0x612>
		}
		else
		{
			gEnv.emg_btn_set = 4;
    279c:	84 e0       	ldi	r24, 0x04	; 4
    279e:	f6 01       	movw	r30, r12
    27a0:	80 83       	st	Z, r24
			gEnv.emg_btn_reset = 5;
    27a2:	85 e0       	ldi	r24, 0x05	; 5
    27a4:	f7 01       	movw	r30, r14
    27a6:	80 83       	st	Z, r24
			gEnv.set_time = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	80 93 dc 21 	sts	0x21DC, r24
			gEnv.reset_time = 1;
    27ae:	80 93 dd 21 	sts	0x21DD, r24
		}
		
		if(btn_ctl_deny_timeout_count == -1)
    27b2:	80 91 2e 20 	lds	r24, 0x202E
    27b6:	90 91 2f 20 	lds	r25, 0x202F
    27ba:	01 96       	adiw	r24, 0x01	; 1
    27bc:	21 f4       	brne	.+8      	; 0x27c6 <main+0x626>
		{	
			button_check();
    27be:	0e 94 6d 09 	call	0x12da	; 0x12da <button_check>
			button_process();
    27c2:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <button_process>





		if(get_security_set()==true && get_security_reset()==true)
    27c6:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    27ca:	81 30       	cpi	r24, 0x01	; 1
    27cc:	09 f0       	breq	.+2      	; 0x27d0 <main+0x630>
    27ce:	2c c1       	rjmp	.+600    	; 0x2a28 <main+0x888>
    27d0:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    27d4:	81 30       	cpi	r24, 0x01	; 1
    27d6:	09 f0       	breq	.+2      	; 0x27da <main+0x63a>
    27d8:	27 c1       	rjmp	.+590    	; 0x2a28 <main+0x888>
		{
			btn_powerdown_count = 0;
    27da:	10 92 2c 20 	sts	0x202C, r1
    27de:	10 92 2d 20 	sts	0x202D, r1
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    27e2:	80 93 08 22 	sts	0x2208, r24
			btn_powerdown_count = 0;
			buzzer_on(true);
			
			while(1)
			{
				wdt_reset();
    27e6:	a8 95       	wdr
				
				if(get_security_set() != true || get_security_reset() != true)
    27e8:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    27ec:	81 30       	cpi	r24, 0x01	; 1
    27ee:	21 f4       	brne	.+8      	; 0x27f8 <main+0x658>
    27f0:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    27f4:	81 30       	cpi	r24, 0x01	; 1
    27f6:	29 f0       	breq	.+10     	; 0x2802 <main+0x662>
				{
					btn_powerdown_count = -1;
    27f8:	a0 92 2c 20 	sts	0x202C, r10
    27fc:	b0 92 2d 20 	sts	0x202D, r11
					break;
    2800:	0d c1       	rjmp	.+538    	; 0x2a1c <main+0x87c>
				}
				
				
				if(btn_powerdown_count > 2)
    2802:	80 91 2c 20 	lds	r24, 0x202C
    2806:	90 91 2d 20 	lds	r25, 0x202D
    280a:	03 97       	sbiw	r24, 0x03	; 3
    280c:	0c f4       	brge	.+2      	; 0x2810 <main+0x670>
    280e:	fe c0       	rjmp	.+508    	; 0x2a0c <main+0x86c>
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    2810:	10 92 08 22 	sts	0x2208, r1
    2814:	0a e0       	ldi	r16, 0x0A	; 10
    2816:	10 e0       	ldi	r17, 0x00	; 0

					//btn_powerdown_count = -1;
					buzzer_on(false);
					for(int i=0;i<10;i++)
					{
						wdt_reset();
    2818:	a8 95       	wdr
						set_bat_led(true);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
						set_communication_led(true);
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <set_communication_led>
						set_car_emergency_led(true);
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
						set_emg_led(true);
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
						set_emg_button_led(true);
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
						set_security_mode_led(true);
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    283e:	2f ef       	ldi	r18, 0xFF	; 255
    2840:	8b e4       	ldi	r24, 0x4B	; 75
    2842:	9d e1       	ldi	r25, 0x1D	; 29
    2844:	21 50       	subi	r18, 0x01	; 1
    2846:	80 40       	sbci	r24, 0x00	; 0
    2848:	90 40       	sbci	r25, 0x00	; 0
    284a:	e1 f7       	brne	.-8      	; 0x2844 <main+0x6a4>
    284c:	00 c0       	rjmp	.+0      	; 0x284e <main+0x6ae>
    284e:	00 00       	nop
						_delay_ms(300);
						set_bat_led(false);
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
						set_communication_led(false);
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <set_communication_led>
						set_car_emergency_led(false);
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
						set_emg_led(false);
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
						set_emg_button_led(false);
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
						set_security_mode_led(false);
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    2874:	ef ef       	ldi	r30, 0xFF	; 255
    2876:	fb e4       	ldi	r31, 0x4B	; 75
    2878:	2d e1       	ldi	r18, 0x1D	; 29
    287a:	e1 50       	subi	r30, 0x01	; 1
    287c:	f0 40       	sbci	r31, 0x00	; 0
    287e:	20 40       	sbci	r18, 0x00	; 0
    2880:	e1 f7       	brne	.-8      	; 0x287a <main+0x6da>
    2882:	00 c0       	rjmp	.+0      	; 0x2884 <main+0x6e4>
    2884:	00 00       	nop
    2886:	01 50       	subi	r16, 0x01	; 1
    2888:	11 09       	sbc	r17, r1
				if(btn_powerdown_count > 2)
				{

					//btn_powerdown_count = -1;
					buzzer_on(false);
					for(int i=0;i<10;i++)
    288a:	01 15       	cp	r16, r1
    288c:	11 05       	cpc	r17, r1
    288e:	21 f6       	brne	.-120    	; 0x2818 <main+0x678>
					#endif
					
					
					for(int i=0;i<3;i++)
					{
						wdt_reset();
    2890:	a8 95       	wdr
						sync_version_send();
    2892:	0e 94 a2 08 	call	0x1144	; 0x1144 <sync_version_send>
					#endif
					
					
					for(int i=0;i<3;i++)
					{
						wdt_reset();
    2896:	a8 95       	wdr
						sync_version_send();
    2898:	0e 94 a2 08 	call	0x1144	; 0x1144 <sync_version_send>
					#endif
					
					
					for(int i=0;i<3;i++)
					{
						wdt_reset();
    289c:	a8 95       	wdr
						sync_version_send();
    289e:	0e 94 a2 08 	call	0x1144	; 0x1144 <sync_version_send>
					}
					
					set_speaker_power(false);
    28a2:	80 e0       	ldi	r24, 0x00	; 0
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <set_speaker_power>

					PORTC.INT1MASK=0x04;
    28aa:	e0 e4       	ldi	r30, 0x40	; 64
    28ac:	f6 e0       	ldi	r31, 0x06	; 6
    28ae:	84 e0       	ldi	r24, 0x04	; 4
    28b0:	83 87       	std	Z+11, r24	; 0x0b
					PORTC.INTCTRL=0x0C;
    28b2:	8c e0       	ldi	r24, 0x0C	; 12
    28b4:	81 87       	std	Z+9, r24	; 0x09
					PORTA.INT1MASK=0xf8;
    28b6:	e0 e0       	ldi	r30, 0x00	; 0
    28b8:	f6 e0       	ldi	r31, 0x06	; 6
    28ba:	98 ef       	ldi	r25, 0xF8	; 248
    28bc:	93 87       	std	Z+11, r25	; 0x0b
					PORTA.INTCTRL=0x0C;
    28be:	81 87       	std	Z+9, r24	; 0x09
				
					cc1100_strobe_cmd(CC1100_STROBE_SPWD);
    28c0:	89 e3       	ldi	r24, 0x39	; 57
    28c2:	0e 94 c6 01 	call	0x38c	; 0x38c <cc1100_strobe_cmd>
					
					SLEEP_CTRL |= SLEEP_SMODE_PDOWN_gc;
    28c6:	e8 e4       	ldi	r30, 0x48	; 72
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	84 60       	ori	r24, 0x04	; 4
    28ce:	80 83       	st	Z, r24
					SLEEP_CTRL |= SLEEP_SEN_bm;
    28d0:	80 81       	ld	r24, Z
    28d2:	81 60       	ori	r24, 0x01	; 1
    28d4:	80 83       	st	Z, r24
	
	
					while(1)
					{
						wdt_disable();
    28d6:	0f 2e       	mov	r0, r31
    28d8:	f8 ed       	ldi	r31, 0xD8	; 216
    28da:	ff 2e       	mov	r15, r31
    28dc:	f0 2d       	mov	r31, r0
    28de:	0f 2e       	mov	r0, r31
    28e0:	fd ef       	ldi	r31, 0xFD	; 253
    28e2:	cf 2e       	mov	r12, r31
    28e4:	f0 2d       	mov	r31, r0
						
						sleep();
						
						wdt_enable(0x26);		//wdt timeout 4sec enable
    28e6:	0f 2e       	mov	r0, r31
    28e8:	f7 e2       	ldi	r31, 0x27	; 39
    28ea:	df 2e       	mov	r13, r31
    28ec:	f0 2d       	mov	r31, r0
    28ee:	e1 2c       	mov	r14, r1
								
								}
								
								if(!get_security_reset() && !get_security_set() && !get_side_door_unlocked() && !get_rear_door_unlocked() && !get_emergency_button())
								{
									btn_powerdown_count = -1;
    28f0:	0f ef       	ldi	r16, 0xFF	; 255
    28f2:	1f ef       	ldi	r17, 0xFF	; 255
					SLEEP_CTRL |= SLEEP_SEN_bm;
	
	
					while(1)
					{
						wdt_disable();
    28f4:	08 b6       	in	r0, 0x38	; 56
    28f6:	18 be       	out	0x38, r1	; 56
    28f8:	f4 be       	out	0x34, r15	; 52
    28fa:	c0 92 80 00 	sts	0x0080, r12
    28fe:	08 be       	out	0x38, r0	; 56
						
						sleep();
    2900:	88 95       	sleep
						
						wdt_enable(0x26);		//wdt timeout 4sec enable
    2902:	08 b6       	in	r0, 0x38	; 56
    2904:	18 be       	out	0x38, r1	; 56
    2906:	f4 be       	out	0x34, r15	; 52
    2908:	d0 92 80 00 	sts	0x0080, r13
    290c:	e0 90 82 00 	lds	r14, 0x0082
    2910:	e1 fc       	sbrc	r14, 1
    2912:	fc cf       	rjmp	.-8      	; 0x290c <main+0x76c>
    2914:	08 be       	out	0x38, r0	; 56
						
						if(get_security_reset() || get_security_set() || get_side_door_unlocked() || get_rear_door_unlocked() || get_emergency_button() || get_cab_unlocked())
    2916:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    291a:	81 11       	cpse	r24, r1
    291c:	14 c0       	rjmp	.+40     	; 0x2946 <main+0x7a6>
    291e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    2922:	81 11       	cpse	r24, r1
    2924:	10 c0       	rjmp	.+32     	; 0x2946 <main+0x7a6>
    2926:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
    292a:	81 11       	cpse	r24, r1
    292c:	0c c0       	rjmp	.+24     	; 0x2946 <main+0x7a6>
    292e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_rear_door_unlocked>
    2932:	81 11       	cpse	r24, r1
    2934:	08 c0       	rjmp	.+16     	; 0x2946 <main+0x7a6>
    2936:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    293a:	81 11       	cpse	r24, r1
    293c:	04 c0       	rjmp	.+8      	; 0x2946 <main+0x7a6>
    293e:	0e 94 f7 15 	call	0x2bee	; 0x2bee <get_cab_unlocked>
    2942:	88 23       	and	r24, r24
    2944:	b9 f2       	breq	.-82     	; 0x28f4 <main+0x754>
						{
							btn_powerdown_count = 0;
    2946:	10 92 2c 20 	sts	0x202C, r1
    294a:	10 92 2d 20 	sts	0x202D, r1
							}
							#endif
							
							while(1)
							{
								if(btn_powerdown_count > 2)
    294e:	80 91 2c 20 	lds	r24, 0x202C
    2952:	90 91 2d 20 	lds	r25, 0x202D
    2956:	03 97       	sbiw	r24, 0x03	; 3
    2958:	0c f4       	brge	.+2      	; 0x295c <main+0x7bc>
    295a:	3f c0       	rjmp	.+126    	; 0x29da <main+0x83a>
    295c:	0a e0       	ldi	r16, 0x0A	; 10
    295e:	10 e0       	ldi	r17, 0x00	; 0
								{
	
									for(int i=0;i<10;i++)
									{
										wdt_reset();
    2960:	a8 95       	wdr
										set_bat_led(true);
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
										set_communication_led(true);
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <set_communication_led>
										set_car_emergency_led(true);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
										set_emg_led(true);
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
										set_emg_button_led(true);
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
										set_security_mode_led(true);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	93 ec       	ldi	r25, 0xC3	; 195
    298a:	e9 e0       	ldi	r30, 0x09	; 9
    298c:	81 50       	subi	r24, 0x01	; 1
    298e:	90 40       	sbci	r25, 0x00	; 0
    2990:	e0 40       	sbci	r30, 0x00	; 0
    2992:	e1 f7       	brne	.-8      	; 0x298c <main+0x7ec>
    2994:	00 c0       	rjmp	.+0      	; 0x2996 <main+0x7f6>
    2996:	00 00       	nop
										_delay_ms(100);
										set_bat_led(false);
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <set_bat_led>
										set_communication_led(false);
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <set_communication_led>
										set_car_emergency_led(false);
    29a4:	80 e0       	ldi	r24, 0x00	; 0
    29a6:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <set_car_emergency_led>
										set_emg_led(false);
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <set_emg_led>
										set_emg_button_led(false);
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <set_emg_button_led>
										set_security_mode_led(false);
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <set_security_mode_led>
    29bc:	ff ef       	ldi	r31, 0xFF	; 255
    29be:	23 ec       	ldi	r18, 0xC3	; 195
    29c0:	89 e0       	ldi	r24, 0x09	; 9
    29c2:	f1 50       	subi	r31, 0x01	; 1
    29c4:	20 40       	sbci	r18, 0x00	; 0
    29c6:	80 40       	sbci	r24, 0x00	; 0
    29c8:	e1 f7       	brne	.-8      	; 0x29c2 <main+0x822>
    29ca:	00 c0       	rjmp	.+0      	; 0x29cc <main+0x82c>
    29cc:	00 00       	nop
    29ce:	01 50       	subi	r16, 0x01	; 1
    29d0:	11 09       	sbc	r17, r1
							while(1)
							{
								if(btn_powerdown_count > 2)
								{
	
									for(int i=0;i<10;i++)
    29d2:	01 15       	cp	r16, r1
    29d4:	11 05       	cpc	r17, r1
    29d6:	21 f6       	brne	.-120    	; 0x2960 <main+0x7c0>
    29d8:	ff cf       	rjmp	.-2      	; 0x29d8 <main+0x838>
									while(1);
								
								
								}
								
								if(!get_security_reset() && !get_security_set() && !get_side_door_unlocked() && !get_rear_door_unlocked() && !get_emergency_button())
    29da:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    29de:	81 11       	cpse	r24, r1
    29e0:	b6 cf       	rjmp	.-148    	; 0x294e <main+0x7ae>
    29e2:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    29e6:	81 11       	cpse	r24, r1
    29e8:	b2 cf       	rjmp	.-156    	; 0x294e <main+0x7ae>
    29ea:	0e 94 08 16 	call	0x2c10	; 0x2c10 <get_side_door_unlocked>
    29ee:	81 11       	cpse	r24, r1
    29f0:	ae cf       	rjmp	.-164    	; 0x294e <main+0x7ae>
    29f2:	0e 94 00 16 	call	0x2c00	; 0x2c00 <get_rear_door_unlocked>
    29f6:	81 11       	cpse	r24, r1
    29f8:	aa cf       	rjmp	.-172    	; 0x294e <main+0x7ae>
    29fa:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <get_emergency_button>
    29fe:	81 11       	cpse	r24, r1
    2a00:	a6 cf       	rjmp	.-180    	; 0x294e <main+0x7ae>
								{
									btn_powerdown_count = -1;
    2a02:	00 93 2c 20 	sts	0x202C, r16
    2a06:	10 93 2d 20 	sts	0x202D, r17
									break;
    2a0a:	74 cf       	rjmp	.-280    	; 0x28f4 <main+0x754>
					PORTA.INT1MASK=0x00;
					
					break;
				}
				
				if(get_security_reset()==false || get_security_set()==false)
    2a0c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <get_security_reset>
    2a10:	88 23       	and	r24, r24
    2a12:	21 f0       	breq	.+8      	; 0x2a1c <main+0x87c>
    2a14:	0e 94 11 16 	call	0x2c22	; 0x2c22 <get_security_set>
    2a18:	81 11       	cpse	r24, r1
    2a1a:	e5 ce       	rjmp	.-566    	; 0x27e6 <main+0x646>
	_delay_ms(300);
}

volatile void buzzer_on(u8 buz)
{
	gBuzzer = buz;
    2a1c:	10 92 08 22 	sts	0x2208, r1
				

			}
			
			buzzer_on(false);
			btn_powerdown_count = -1;
    2a20:	a0 92 2c 20 	sts	0x202C, r10
    2a24:	b0 92 2d 20 	sts	0x202D, r11
		}	

		
		
		if(test_mode == 0x0d || test_mode == 0x0e)
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	8d 50       	subi	r24, 0x0D	; 13
    2a2c:	82 30       	cpi	r24, 0x02	; 2
    2a2e:	18 f4       	brcc	.+6      	; 0x2a36 <main+0x896>
		{
			test_wave_mode(test_mode);
    2a30:	8d 81       	ldd	r24, Y+5	; 0x05
    2a32:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <test_wave_mode>
		}
		
		
		
		if(test_mode == 0x02)
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	92 30       	cpi	r25, 0x02	; 2
    2a3a:	09 f0       	breq	.+2      	; 0x2a3e <main+0x89e>
    2a3c:	63 cc       	rjmp	.-1850   	; 0x2304 <main+0x164>
		{
			test_sound_message_mode();
    2a3e:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <test_sound_message_mode>
	}
	
	
	for(int i=0;i<3;i++)
	{
		wdt_reset();
    2a42:	a8 95       	wdr
		sync_version_send();
    2a44:	0e 94 a2 08 	call	0x1144	; 0x1144 <sync_version_send>
	}
	
	
	for(int i=0;i<3;i++)
	{
		wdt_reset();
    2a48:	a8 95       	wdr
		sync_version_send();
    2a4a:	0e 94 a2 08 	call	0x1144	; 0x1144 <sync_version_send>
	}
	
	
	for(int i=0;i<3;i++)
	{
		wdt_reset();
    2a4e:	a8 95       	wdr
		sync_version_send();
    2a50:	0e 94 a2 08 	call	0x1144	; 0x1144 <sync_version_send>
	}

	sync_rssi_send(&rssi,&lqi);
    2a54:	be 01       	movw	r22, r28
    2a56:	6e 5f       	subi	r22, 0xFE	; 254
    2a58:	7f 4f       	sbci	r23, 0xFF	; 255
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	01 96       	adiw	r24, 0x01	; 1
    2a5e:	0e 94 09 09 	call	0x1212	; 0x1212 <sync_rssi_send>
	sync2_send();
    2a62:	0e 94 44 10 	call	0x2088	; 0x2088 <sync2_send>

	//sound IC reset
	{
		PORTD.OUTCLR = PIN7_bm;
    2a66:	80 e8       	ldi	r24, 0x80	; 128
    2a68:	e0 e6       	ldi	r30, 0x60	; 96
    2a6a:	f6 e0       	ldi	r31, 0x06	; 6
    2a6c:	86 83       	std	Z+6, r24	; 0x06
    2a6e:	ef ef       	ldi	r30, 0xFF	; 255
    2a70:	f7 e8       	ldi	r31, 0x87	; 135
    2a72:	23 e1       	ldi	r18, 0x13	; 19
    2a74:	e1 50       	subi	r30, 0x01	; 1
    2a76:	f0 40       	sbci	r31, 0x00	; 0
    2a78:	20 40       	sbci	r18, 0x00	; 0
    2a7a:	e1 f7       	brne	.-8      	; 0x2a74 <main+0x8d4>
    2a7c:	00 c0       	rjmp	.+0      	; 0x2a7e <main+0x8de>
    2a7e:	00 00       	nop
		_delay_ms(200);
		PORTD.OUTSET = PIN7_bm;
    2a80:	e0 e6       	ldi	r30, 0x60	; 96
    2a82:	f6 e0       	ldi	r31, 0x06	; 6
    2a84:	85 83       	std	Z+5, r24	; 0x05

		wdt_reset();

		if(temp_reset_count > 5)
		{
			temp_reset_count=-1;
    2a86:	aa 24       	eor	r10, r10
    2a88:	aa 94       	dec	r10
    2a8a:	ba 2c       	mov	r11, r10
		}
		

		if(g_length == sizeof(packet_t))
		{
			gMasterId = gPacket.hdr.master_id;
    2a8c:	0f 2e       	mov	r0, r31
    2a8e:	fe ee       	ldi	r31, 0xEE	; 238
    2a90:	6f 2e       	mov	r6, r31
    2a92:	f1 e2       	ldi	r31, 0x21	; 33
    2a94:	7f 2e       	mov	r7, r31
    2a96:	f0 2d       	mov	r31, r0
						set_emg_led(0);
						_delay_ms(100);
					}
				}
			}
			else if(gPacket.hdr.slave_id == gEnv.id)
    2a98:	0f 2e       	mov	r0, r31
    2a9a:	f6 ed       	ldi	r31, 0xD6	; 214
    2a9c:	4f 2e       	mov	r4, r31
    2a9e:	f1 e2       	ldi	r31, 0x21	; 33
    2aa0:	5f 2e       	mov	r5, r31
    2aa2:	f0 2d       	mov	r31, r0
    2aa4:	0f 2e       	mov	r0, r31
    2aa6:	fa ee       	ldi	r31, 0xEA	; 234
    2aa8:	2f 2e       	mov	r2, r31
    2aaa:	f1 e2       	ldi	r31, 0x21	; 33
    2aac:	3f 2e       	mov	r3, r31
    2aae:	f0 2d       	mov	r31, r0

						emg = (emg_t *)	&gPacket;
						
						
						
						emg_state = emg->emg ;
    2ab0:	0f 2e       	mov	r0, r31
    2ab2:	f5 ef       	ldi	r31, 0xF5	; 245
    2ab4:	8f 2e       	mov	r8, r31
    2ab6:	f1 e2       	ldi	r31, 0x21	; 33
    2ab8:	9f 2e       	mov	r9, r31
    2aba:	f0 2d       	mov	r31, r0
				switch(gPacket.hdr.payload)
				{
					case PAYLOAD_SYNC:
						sync_ack();
						
						gEnv.emg_btn_set = gPacket.payload[1];
    2abc:	0f 2e       	mov	r0, r31
    2abe:	fa ed       	ldi	r31, 0xDA	; 218
    2ac0:	cf 2e       	mov	r12, r31
    2ac2:	f1 e2       	ldi	r31, 0x21	; 33
    2ac4:	df 2e       	mov	r13, r31
    2ac6:	f0 2d       	mov	r31, r0
						gEnv.emg_btn_reset = gPacket.payload[2];
    2ac8:	0f 2e       	mov	r0, r31
    2aca:	fb ed       	ldi	r31, 0xDB	; 219
    2acc:	ef 2e       	mov	r14, r31
    2ace:	f1 e2       	ldi	r31, 0x21	; 33
    2ad0:	ff 2e       	mov	r15, r31
    2ad2:	f0 2d       	mov	r31, r0
    2ad4:	17 cc       	rjmp	.-2002   	; 0x2304 <main+0x164>

00002ad6 <port_init_direction>:
#include <util/delay.h>
#include "port.h"


void port_init_direction(void)
{
    2ad6:	cf 93       	push	r28
    2ad8:	df 93       	push	r29
	/*in-out setup */
	PORTA.DIR = 0x00;
    2ada:	40 e0       	ldi	r20, 0x00	; 0
    2adc:	56 e0       	ldi	r21, 0x06	; 6
    2ade:	ea 01       	movw	r28, r20
    2ae0:	18 82       	st	Y, r1
	PORTB.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN6_bm | PIN7_bm;
    2ae2:	8f ef       	ldi	r24, 0xFF	; 255
    2ae4:	80 93 20 06 	sts	0x0620, r24
	PORTC.DIR = PIN0_bm | PIN1_bm |PIN4_bm | PIN5_bm | PIN7_bm;
    2ae8:	80 e4       	ldi	r24, 0x40	; 64
    2aea:	96 e0       	ldi	r25, 0x06	; 6
    2aec:	23 eb       	ldi	r18, 0xB3	; 179
    2aee:	fc 01       	movw	r30, r24
    2af0:	20 83       	st	Z, r18
	PORTD.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm | PIN5_bm | PIN7_bm;
    2af2:	2f eb       	ldi	r18, 0xBF	; 191
    2af4:	20 93 60 06 	sts	0x0660, r18
	PORTE.DIR = 0x00;
    2af8:	a0 e8       	ldi	r26, 0x80	; 128
    2afa:	b6 e0       	ldi	r27, 0x06	; 6
    2afc:	1c 92       	st	X, r1
	PORTF.DIR = 0x00;
    2afe:	e0 ea       	ldi	r30, 0xA0	; 160
    2b00:	f6 e0       	ldi	r31, 0x06	; 6
    2b02:	10 82       	st	Z, r1
	
	PORTC.PIN2CTRL = 0x18; // pullup , both edge
    2b04:	28 e1       	ldi	r18, 0x18	; 24
    2b06:	ec 01       	movw	r28, r24
    2b08:	2a 8b       	std	Y+18, r18	; 0x12
	
	PORTA.PIN3CTRL = 0x18; // pullup , both edge
    2b0a:	ea 01       	movw	r28, r20
    2b0c:	2b 8b       	std	Y+19, r18	; 0x13
	PORTA.PIN4CTRL = 0x18; // pullup , both edge
    2b0e:	2c 8b       	std	Y+20, r18	; 0x14
	PORTA.PIN5CTRL = 0x18; // pullup , both edge
    2b10:	2d 8b       	std	Y+21, r18	; 0x15
	PORTA.PIN6CTRL = 0x18; // pullup , both edge
    2b12:	2e 8b       	std	Y+22, r18	; 0x16
	PORTA.PIN7CTRL = 0x18; // pullup , both edge
    2b14:	2f 8b       	std	Y+23, r18	; 0x17

	PORTC.PIN1CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
    2b16:	ec 01       	movw	r28, r24
    2b18:	29 89       	ldd	r18, Y+17	; 0x11
    2b1a:	28 61       	ori	r18, 0x18	; 24
    2b1c:	29 8b       	std	Y+17, r18	; 0x11
	
	PORTF.PIN0CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
    2b1e:	80 89       	ldd	r24, Z+16	; 0x10
    2b20:	88 61       	ori	r24, 0x18	; 24
    2b22:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
    2b24:	81 89       	ldd	r24, Z+17	; 0x11
    2b26:	88 61       	ori	r24, 0x18	; 24
    2b28:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
    2b2a:	82 89       	ldd	r24, Z+18	; 0x12
    2b2c:	88 61       	ori	r24, 0x18	; 24
    2b2e:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
    2b30:	83 89       	ldd	r24, Z+19	; 0x13
    2b32:	88 61       	ori	r24, 0x18	; 24
    2b34:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b36:	84 89       	ldd	r24, Z+20	; 0x14
    2b38:	88 61       	ori	r24, 0x18	; 24
    2b3a:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b3c:	85 89       	ldd	r24, Z+21	; 0x15
    2b3e:	88 61       	ori	r24, 0x18	; 24
    2b40:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b42:	86 89       	ldd	r24, Z+22	; 0x16
    2b44:	88 61       	ori	r24, 0x18	; 24
    2b46:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b48:	87 89       	ldd	r24, Z+23	; 0x17
    2b4a:	88 61       	ori	r24, 0x18	; 24
    2b4c:	87 8b       	std	Z+23, r24	; 0x17
	
	
	PORTE.PIN0CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b4e:	50 96       	adiw	r26, 0x10	; 16
    2b50:	8c 91       	ld	r24, X
    2b52:	50 97       	sbiw	r26, 0x10	; 16
    2b54:	88 61       	ori	r24, 0x18	; 24
    2b56:	50 96       	adiw	r26, 0x10	; 16
    2b58:	8c 93       	st	X, r24
    2b5a:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b5c:	51 96       	adiw	r26, 0x11	; 17
    2b5e:	8c 91       	ld	r24, X
    2b60:	51 97       	sbiw	r26, 0x11	; 17
    2b62:	88 61       	ori	r24, 0x18	; 24
    2b64:	51 96       	adiw	r26, 0x11	; 17
    2b66:	8c 93       	st	X, r24
    2b68:	51 97       	sbiw	r26, 0x11	; 17
	PORTE.PIN2CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b6a:	52 96       	adiw	r26, 0x12	; 18
    2b6c:	8c 91       	ld	r24, X
    2b6e:	52 97       	sbiw	r26, 0x12	; 18
    2b70:	88 61       	ori	r24, 0x18	; 24
    2b72:	52 96       	adiw	r26, 0x12	; 18
    2b74:	8c 93       	st	X, r24
    2b76:	52 97       	sbiw	r26, 0x12	; 18
	PORTE.PIN3CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
    2b78:	53 96       	adiw	r26, 0x13	; 19
    2b7a:	8c 91       	ld	r24, X
    2b7c:	53 97       	sbiw	r26, 0x13	; 19
    2b7e:	88 61       	ori	r24, 0x18	; 24
    2b80:	53 96       	adiw	r26, 0x13	; 19
    2b82:	8c 93       	st	X, r24
	
	

	// adc setup
	PORTA.PIN0CTRL = 7;	
    2b84:	87 e0       	ldi	r24, 0x07	; 7
    2b86:	fa 01       	movw	r30, r20
    2b88:	80 8b       	std	Z+16, r24	; 0x10
	
	
}
    2b8a:	df 91       	pop	r29
    2b8c:	cf 91       	pop	r28
    2b8e:	08 95       	ret

00002b90 <port_init_value>:

void port_init_value(void)
{
	PORTB.OUT = 0xff;
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	e0 e2       	ldi	r30, 0x20	; 32
    2b94:	f6 e0       	ldi	r31, 0x06	; 6
    2b96:	84 83       	std	Z+4, r24	; 0x04
	
	PORTC.OUTCLR = PIN0_bm;
    2b98:	e0 e4       	ldi	r30, 0x40	; 64
    2b9a:	f6 e0       	ldi	r31, 0x06	; 6
    2b9c:	31 e0       	ldi	r19, 0x01	; 1
    2b9e:	36 83       	std	Z+6, r19	; 0x06
	PORTC.OUTSET = PIN4_bm;
    2ba0:	20 e1       	ldi	r18, 0x10	; 16
    2ba2:	25 83       	std	Z+5, r18	; 0x05
	PORTC.OUTCLR = PIN5_bm;
    2ba4:	90 e2       	ldi	r25, 0x20	; 32
    2ba6:	96 83       	std	Z+6, r25	; 0x06
	PORTC.OUTCLR = PIN7_bm;
    2ba8:	80 e8       	ldi	r24, 0x80	; 128
    2baa:	86 83       	std	Z+6, r24	; 0x06

	PORTD.OUTCLR = PIN0_bm;
    2bac:	e0 e6       	ldi	r30, 0x60	; 96
    2bae:	f6 e0       	ldi	r31, 0x06	; 6
    2bb0:	36 83       	std	Z+6, r19	; 0x06
	PORTD.OUTCLR = PIN1_bm;
    2bb2:	32 e0       	ldi	r19, 0x02	; 2
    2bb4:	36 83       	std	Z+6, r19	; 0x06
	PORTD.OUTCLR = PIN2_bm;
    2bb6:	34 e0       	ldi	r19, 0x04	; 4
    2bb8:	36 83       	std	Z+6, r19	; 0x06
	PORTD.OUTCLR = PIN3_bm;
    2bba:	38 e0       	ldi	r19, 0x08	; 8
    2bbc:	36 83       	std	Z+6, r19	; 0x06
	PORTD.OUTCLR = PIN4_bm;
    2bbe:	26 83       	std	Z+6, r18	; 0x06
	PORTD.OUTCLR = PIN5_bm;
    2bc0:	96 83       	std	Z+6, r25	; 0x06
	PORTD.OUTSET = PIN7_bm;
    2bc2:	85 83       	std	Z+5, r24	; 0x05
    2bc4:	08 95       	ret

00002bc6 <port_init>:
	
}

void port_init(void)
{	
	port_init_direction();
    2bc6:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <port_init_direction>
	port_init_value();
    2bca:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <port_init_value>
    2bce:	08 95       	ret

00002bd0 <get_voice_busy>:
}


u8 get_voice_busy(void)
{
	return (PORTA.IN & PIN1_bm) ? true : false;
    2bd0:	e0 e0       	ldi	r30, 0x00	; 0
    2bd2:	f6 e0       	ldi	r31, 0x06	; 6
    2bd4:	80 85       	ldd	r24, Z+8	; 0x08
}
    2bd6:	86 95       	lsr	r24
    2bd8:	81 70       	andi	r24, 0x01	; 1
    2bda:	08 95       	ret

00002bdc <get_emergency_button>:

u8 get_emergency_button(void)
{
	return (PORTC.IN & PIN2_bm) ? false : true;
    2bdc:	e0 e4       	ldi	r30, 0x40	; 64
    2bde:	f6 e0       	ldi	r31, 0x06	; 6
    2be0:	80 85       	ldd	r24, Z+8	; 0x08
    2be2:	82 fb       	bst	r24, 2
    2be4:	88 27       	eor	r24, r24
    2be6:	80 f9       	bld	r24, 0
}
    2be8:	91 e0       	ldi	r25, 0x01	; 1
    2bea:	89 27       	eor	r24, r25
    2bec:	08 95       	ret

00002bee <get_cab_unlocked>:

u8 get_cab_unlocked(void)
{
	return (PORTA.IN & PIN3_bm) ? false : true;
    2bee:	e0 e0       	ldi	r30, 0x00	; 0
    2bf0:	f6 e0       	ldi	r31, 0x06	; 6
    2bf2:	80 85       	ldd	r24, Z+8	; 0x08
    2bf4:	83 fb       	bst	r24, 3
    2bf6:	88 27       	eor	r24, r24
    2bf8:	80 f9       	bld	r24, 0
}
    2bfa:	91 e0       	ldi	r25, 0x01	; 1
    2bfc:	89 27       	eor	r24, r25
    2bfe:	08 95       	ret

00002c00 <get_rear_door_unlocked>:

u8 get_rear_door_unlocked(void)
{
	return (PORTA.IN & PIN4_bm) ? false : true;
    2c00:	e0 e0       	ldi	r30, 0x00	; 0
    2c02:	f6 e0       	ldi	r31, 0x06	; 6
    2c04:	80 85       	ldd	r24, Z+8	; 0x08
    2c06:	82 95       	swap	r24
    2c08:	81 70       	andi	r24, 0x01	; 1
}
    2c0a:	91 e0       	ldi	r25, 0x01	; 1
    2c0c:	89 27       	eor	r24, r25
    2c0e:	08 95       	ret

00002c10 <get_side_door_unlocked>:

u8 get_side_door_unlocked(void)
{
	return (PORTA.IN & PIN5_bm) ? false : true;
    2c10:	e0 e0       	ldi	r30, 0x00	; 0
    2c12:	f6 e0       	ldi	r31, 0x06	; 6
    2c14:	80 85       	ldd	r24, Z+8	; 0x08
    2c16:	85 fb       	bst	r24, 5
    2c18:	88 27       	eor	r24, r24
    2c1a:	80 f9       	bld	r24, 0
}
    2c1c:	91 e0       	ldi	r25, 0x01	; 1
    2c1e:	89 27       	eor	r24, r25
    2c20:	08 95       	ret

00002c22 <get_security_set>:

u8 get_security_set(void)
{
	return (PORTA.IN & PIN6_bm) ? false : true;
    2c22:	e0 e0       	ldi	r30, 0x00	; 0
    2c24:	f6 e0       	ldi	r31, 0x06	; 6
    2c26:	80 85       	ldd	r24, Z+8	; 0x08
    2c28:	86 fb       	bst	r24, 6
    2c2a:	88 27       	eor	r24, r24
    2c2c:	80 f9       	bld	r24, 0
}
    2c2e:	91 e0       	ldi	r25, 0x01	; 1
    2c30:	89 27       	eor	r24, r25
    2c32:	08 95       	ret

00002c34 <get_security_reset>:

u8 get_security_reset(void)
{
	return (PORTA.IN & PIN7_bm) ? false : true;
    2c34:	e0 e0       	ldi	r30, 0x00	; 0
    2c36:	f6 e0       	ldi	r31, 0x06	; 6
    2c38:	80 85       	ldd	r24, Z+8	; 0x08
    2c3a:	80 95       	com	r24
}
    2c3c:	88 1f       	adc	r24, r24
    2c3e:	88 27       	eor	r24, r24
    2c40:	88 1f       	adc	r24, r24
    2c42:	08 95       	ret

00002c44 <set_voice>:



void set_voice(u8 voice)
{
    2c44:	cf 93       	push	r28
    2c46:	df 93       	push	r29
    2c48:	00 d0       	rcall	.+0      	; 0x2c4a <set_voice+0x6>
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
	volatile int count;
	
	if(voice == 0xff)	
    2c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2c50:	21 f4       	brne	.+8      	; 0x2c5a <set_voice+0x16>
	{
		PORTB.OUT = 0xff;
    2c52:	e0 e2       	ldi	r30, 0x20	; 32
    2c54:	f6 e0       	ldi	r31, 0x06	; 6
    2c56:	84 83       	std	Z+4, r24	; 0x04
		return ;	
    2c58:	29 c0       	rjmp	.+82     	; 0x2cac <set_voice+0x68>
	}
	else
		PORTB.OUT = ~(0x01 << (voice-1));
    2c5a:	81 50       	subi	r24, 0x01	; 1
    2c5c:	21 e0       	ldi	r18, 0x01	; 1
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	a9 01       	movw	r20, r18
    2c62:	02 c0       	rjmp	.+4      	; 0x2c68 <set_voice+0x24>
    2c64:	44 0f       	add	r20, r20
    2c66:	55 1f       	adc	r21, r21
    2c68:	8a 95       	dec	r24
    2c6a:	e2 f7       	brpl	.-8      	; 0x2c64 <set_voice+0x20>
    2c6c:	ca 01       	movw	r24, r20
    2c6e:	80 95       	com	r24
    2c70:	e0 e2       	ldi	r30, 0x20	; 32
    2c72:	f6 e0       	ldi	r31, 0x06	; 6
    2c74:	84 83       	std	Z+4, r24	; 0x04
	
	count = 0;	
    2c76:	19 82       	std	Y+1, r1	; 0x01
    2c78:	1a 82       	std	Y+2, r1	; 0x02
	while(1)
	{
		if(get_voice_busy() == true)
    2c7a:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <get_voice_busy>
    2c7e:	81 30       	cpi	r24, 0x01	; 1
    2c80:	29 f4       	brne	.+10     	; 0x2c8c <set_voice+0x48>
		{
			PORTB.OUT = 0xff;
    2c82:	8f ef       	ldi	r24, 0xFF	; 255
    2c84:	e0 e2       	ldi	r30, 0x20	; 32
    2c86:	f6 e0       	ldi	r31, 0x06	; 6
    2c88:	84 83       	std	Z+4, r24	; 0x04
			break;
    2c8a:	10 c0       	rjmp	.+32     	; 0x2cac <set_voice+0x68>
    2c8c:	8f e3       	ldi	r24, 0x3F	; 63
    2c8e:	9f e1       	ldi	r25, 0x1F	; 31
    2c90:	01 97       	sbiw	r24, 0x01	; 1
    2c92:	f1 f7       	brne	.-4      	; 0x2c90 <set_voice+0x4c>
    2c94:	00 c0       	rjmp	.+0      	; 0x2c96 <set_voice+0x52>
    2c96:	00 00       	nop
			
		}
		_delay_ms(1);
		if(count++ > 1000)
    2c98:	89 81       	ldd	r24, Y+1	; 0x01
    2c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9c:	9c 01       	movw	r18, r24
    2c9e:	2f 5f       	subi	r18, 0xFF	; 255
    2ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca2:	29 83       	std	Y+1, r18	; 0x01
    2ca4:	3a 83       	std	Y+2, r19	; 0x02
    2ca6:	89 3e       	cpi	r24, 0xE9	; 233
    2ca8:	93 40       	sbci	r25, 0x03	; 3
    2caa:	3c f3       	brlt	.-50     	; 0x2c7a <set_voice+0x36>
			break;
	}
}
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	08 95       	ret

00002cb6 <set_speaker_power>:



void set_speaker_power(u8 set)
{
	if(set == true)
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	21 f4       	brne	.+8      	; 0x2cc2 <set_speaker_power+0xc>
	PORTC.OUTSET = PIN0_bm;
    2cba:	e0 e4       	ldi	r30, 0x40	; 64
    2cbc:	f6 e0       	ldi	r31, 0x06	; 6
    2cbe:	85 83       	std	Z+5, r24	; 0x05
    2cc0:	08 95       	ret
	else
	PORTC.OUTCLR = PIN0_bm;
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	e0 e4       	ldi	r30, 0x40	; 64
    2cc6:	f6 e0       	ldi	r31, 0x06	; 6
    2cc8:	86 83       	std	Z+6, r24	; 0x06
    2cca:	08 95       	ret

00002ccc <set_buzzer>:



void set_buzzer(u8 set)
{
	if(set == true)
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	29 f4       	brne	.+10     	; 0x2cda <set_buzzer+0xe>
		PORTC.OUTSET = PIN1_bm;
    2cd0:	82 e0       	ldi	r24, 0x02	; 2
    2cd2:	e0 e4       	ldi	r30, 0x40	; 64
    2cd4:	f6 e0       	ldi	r31, 0x06	; 6
    2cd6:	85 83       	std	Z+5, r24	; 0x05
    2cd8:	08 95       	ret
	else
		PORTC.OUTCLR = PIN1_bm;
    2cda:	82 e0       	ldi	r24, 0x02	; 2
    2cdc:	e0 e4       	ldi	r30, 0x40	; 64
    2cde:	f6 e0       	ldi	r31, 0x06	; 6
    2ce0:	86 83       	std	Z+6, r24	; 0x06
    2ce2:	08 95       	ret

00002ce4 <get_gdoa>:



u8 get_gdoa(void)
{
	return (PORTA.IN & 0x04) ? true : false;
    2ce4:	e0 e0       	ldi	r30, 0x00	; 0
    2ce6:	f6 e0       	ldi	r31, 0x06	; 6
    2ce8:	80 85       	ldd	r24, Z+8	; 0x08
}
    2cea:	82 fb       	bst	r24, 2
    2cec:	88 27       	eor	r24, r24
    2cee:	80 f9       	bld	r24, 0
    2cf0:	08 95       	ret

00002cf2 <set_spi_ss>:
	return (PORTC.IN & 0x08) ? true : false;
}

void set_spi_ss(u8 set)
{
	if(set == true)
    2cf2:	81 30       	cpi	r24, 0x01	; 1
    2cf4:	29 f4       	brne	.+10     	; 0x2d00 <set_spi_ss+0xe>
		PORTC.OUTSET = PIN4_bm;
    2cf6:	80 e1       	ldi	r24, 0x10	; 16
    2cf8:	e0 e4       	ldi	r30, 0x40	; 64
    2cfa:	f6 e0       	ldi	r31, 0x06	; 6
    2cfc:	85 83       	std	Z+5, r24	; 0x05
    2cfe:	08 95       	ret
	else
		PORTC.OUTCLR = PIN4_bm;
    2d00:	80 e1       	ldi	r24, 0x10	; 16
    2d02:	e0 e4       	ldi	r30, 0x40	; 64
    2d04:	f6 e0       	ldi	r31, 0x06	; 6
    2d06:	86 83       	std	Z+6, r24	; 0x06
    2d08:	08 95       	ret

00002d0a <get_spi_ss>:
}

u8 get_spi_ss(void)
{
	return (PORTC.IN & PIN4_bm) ? true : false;
    2d0a:	e0 e4       	ldi	r30, 0x40	; 64
    2d0c:	f6 e0       	ldi	r31, 0x06	; 6
    2d0e:	80 85       	ldd	r24, Z+8	; 0x08
}
    2d10:	82 95       	swap	r24
    2d12:	81 70       	andi	r24, 0x01	; 1
    2d14:	08 95       	ret

00002d16 <set_communication_led>:
		PORTC.OUTCLR = PIN7_bm;
}

void set_communication_led(u8 onoff)
{
	if(onoff == true)
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	21 f4       	brne	.+8      	; 0x2d22 <set_communication_led+0xc>
		PORTD.OUTSET = PIN0_bm;
    2d1a:	e0 e6       	ldi	r30, 0x60	; 96
    2d1c:	f6 e0       	ldi	r31, 0x06	; 6
    2d1e:	85 83       	std	Z+5, r24	; 0x05
    2d20:	08 95       	ret
	else
		PORTD.OUTCLR = PIN0_bm;
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	e0 e6       	ldi	r30, 0x60	; 96
    2d26:	f6 e0       	ldi	r31, 0x06	; 6
    2d28:	86 83       	std	Z+6, r24	; 0x06
    2d2a:	08 95       	ret

00002d2c <set_bat_led>:
}

void set_bat_led(u8 onoff)
{
	if(onoff == true)
    2d2c:	81 30       	cpi	r24, 0x01	; 1
    2d2e:	29 f4       	brne	.+10     	; 0x2d3a <set_bat_led+0xe>
		PORTD.OUTSET = PIN1_bm;
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	e0 e6       	ldi	r30, 0x60	; 96
    2d34:	f6 e0       	ldi	r31, 0x06	; 6
    2d36:	85 83       	std	Z+5, r24	; 0x05
    2d38:	08 95       	ret
	else
		PORTD.OUTCLR = PIN1_bm;
    2d3a:	82 e0       	ldi	r24, 0x02	; 2
    2d3c:	e0 e6       	ldi	r30, 0x60	; 96
    2d3e:	f6 e0       	ldi	r31, 0x06	; 6
    2d40:	86 83       	std	Z+6, r24	; 0x06
    2d42:	08 95       	ret

00002d44 <set_car_emergency_led>:
}

void set_car_emergency_led(u8 state)
{
	if(state == true)
    2d44:	81 30       	cpi	r24, 0x01	; 1
    2d46:	29 f4       	brne	.+10     	; 0x2d52 <set_car_emergency_led+0xe>
		PORTD.OUTSET = PIN2_bm;
    2d48:	84 e0       	ldi	r24, 0x04	; 4
    2d4a:	e0 e6       	ldi	r30, 0x60	; 96
    2d4c:	f6 e0       	ldi	r31, 0x06	; 6
    2d4e:	85 83       	std	Z+5, r24	; 0x05
    2d50:	08 95       	ret
	else
		PORTD.OUTCLR = PIN2_bm;
    2d52:	84 e0       	ldi	r24, 0x04	; 4
    2d54:	e0 e6       	ldi	r30, 0x60	; 96
    2d56:	f6 e0       	ldi	r31, 0x06	; 6
    2d58:	86 83       	std	Z+6, r24	; 0x06
    2d5a:	08 95       	ret

00002d5c <set_emg_led>:
}

void set_emg_led(u8 unlock)
{
	if(unlock == true)
    2d5c:	81 30       	cpi	r24, 0x01	; 1
    2d5e:	29 f4       	brne	.+10     	; 0x2d6a <set_emg_led+0xe>
		PORTD.OUTSET = PIN3_bm;
    2d60:	88 e0       	ldi	r24, 0x08	; 8
    2d62:	e0 e6       	ldi	r30, 0x60	; 96
    2d64:	f6 e0       	ldi	r31, 0x06	; 6
    2d66:	85 83       	std	Z+5, r24	; 0x05
    2d68:	08 95       	ret
	else
		PORTD.OUTCLR = PIN3_bm;
    2d6a:	88 e0       	ldi	r24, 0x08	; 8
    2d6c:	e0 e6       	ldi	r30, 0x60	; 96
    2d6e:	f6 e0       	ldi	r31, 0x06	; 6
    2d70:	86 83       	std	Z+6, r24	; 0x06
    2d72:	08 95       	ret

00002d74 <set_emg_button_led>:
}

void set_emg_button_led(u8 lock)
{
	if(lock == true)
    2d74:	81 30       	cpi	r24, 0x01	; 1
    2d76:	29 f4       	brne	.+10     	; 0x2d82 <set_emg_button_led+0xe>
		PORTD.OUTSET = PIN4_bm;
    2d78:	80 e1       	ldi	r24, 0x10	; 16
    2d7a:	e0 e6       	ldi	r30, 0x60	; 96
    2d7c:	f6 e0       	ldi	r31, 0x06	; 6
    2d7e:	85 83       	std	Z+5, r24	; 0x05
    2d80:	08 95       	ret
	else
		PORTD.OUTCLR = PIN4_bm;
    2d82:	80 e1       	ldi	r24, 0x10	; 16
    2d84:	e0 e6       	ldi	r30, 0x60	; 96
    2d86:	f6 e0       	ldi	r31, 0x06	; 6
    2d88:	86 83       	std	Z+6, r24	; 0x06
    2d8a:	08 95       	ret

00002d8c <set_security_mode_led>:
}

void set_security_mode_led(u8 lock)
{
	if(lock == true)
    2d8c:	81 30       	cpi	r24, 0x01	; 1
    2d8e:	29 f4       	brne	.+10     	; 0x2d9a <set_security_mode_led+0xe>
	PORTD.OUTSET = PIN5_bm;
    2d90:	80 e2       	ldi	r24, 0x20	; 32
    2d92:	e0 e6       	ldi	r30, 0x60	; 96
    2d94:	f6 e0       	ldi	r31, 0x06	; 6
    2d96:	85 83       	std	Z+5, r24	; 0x05
    2d98:	08 95       	ret
	else
	PORTD.OUTCLR = PIN5_bm;
    2d9a:	80 e2       	ldi	r24, 0x20	; 32
    2d9c:	e0 e6       	ldi	r30, 0x60	; 96
    2d9e:	f6 e0       	ldi	r31, 0x06	; 6
    2da0:	86 83       	std	Z+6, r24	; 0x06
    2da2:	08 95       	ret

00002da4 <get_test>:
}

u8 get_test(void)
{
	return PORTE.IN & 0x0f;
    2da4:	e0 e8       	ldi	r30, 0x80	; 128
    2da6:	f6 e0       	ldi	r31, 0x06	; 6
    2da8:	80 85       	ldd	r24, Z+8	; 0x08
}
    2daa:	8f 70       	andi	r24, 0x0F	; 15
    2dac:	08 95       	ret

00002dae <get_freq>:



u8 get_freq(void)
{
	return PORTF.IN & 0x0f;
    2dae:	e0 ea       	ldi	r30, 0xA0	; 160
    2db0:	f6 e0       	ldi	r31, 0x06	; 6
    2db2:	80 85       	ldd	r24, Z+8	; 0x08
}
    2db4:	8f 70       	andi	r24, 0x0F	; 15
    2db6:	08 95       	ret

00002db8 <get_dly>:

u8 get_dly(void)
{
	return (PORTF.IN & 0xf0) >> 4;
    2db8:	e0 ea       	ldi	r30, 0xA0	; 160
    2dba:	f6 e0       	ldi	r31, 0x06	; 6
    2dbc:	80 85       	ldd	r24, Z+8	; 0x08
}
    2dbe:	82 95       	swap	r24
    2dc0:	8f 70       	andi	r24, 0x0F	; 15
    2dc2:	08 95       	ret

00002dc4 <spi_init>:
	// -set to mast mode
	// -SPI clk = 32MHz/4=8MHz
	// -mode set to 0
		
	//SPIC.CTRL = SPI_PRESCALER_DIV16_gc |  SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc;// | SPI_CLK2X_bm 
	SPIC_CTRL |= (1<<SPIC_BIT_ENABLE) | (1<<SPIC_BIT_MASTER);
    2dc4:	e0 ec       	ldi	r30, 0xC0	; 192
    2dc6:	f8 e0       	ldi	r31, 0x08	; 8
    2dc8:	80 81       	ld	r24, Z
    2dca:	80 65       	ori	r24, 0x50	; 80
    2dcc:	80 83       	st	Z, r24
	SPIC_INTCTRL = 0x02;	
    2dce:	82 e0       	ldi	r24, 0x02	; 2
    2dd0:	80 93 c1 08 	sts	0x08C1, r24
    2dd4:	08 95       	ret

00002dd6 <spi_write_single>:

u8 spi_write_single(u8 byte)
{
	u8 dummy;

	SPIC.DATA = byte;
    2dd6:	e0 ec       	ldi	r30, 0xC0	; 192
    2dd8:	f8 e0       	ldi	r31, 0x08	; 8
    2dda:	83 83       	std	Z+3, r24	; 0x03
	while (! (SPIC.STATUS & SPI_IF_bm)) 
    2ddc:	82 81       	ldd	r24, Z+2	; 0x02
    2dde:	88 23       	and	r24, r24
    2de0:	ec f7       	brge	.-6      	; 0x2ddc <spi_write_single+0x6>
	{
		; 
	}

	WAIT_EORX();
    2de2:	e0 ec       	ldi	r30, 0xC0	; 192
    2de4:	f8 e0       	ldi	r31, 0x08	; 8
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	88 23       	and	r24, r24
    2dea:	ec f7       	brge	.-6      	; 0x2de6 <spi_write_single+0x10>
	dummy = SPIC.DATA;
    2dec:	e0 ec       	ldi	r30, 0xC0	; 192
    2dee:	f8 e0       	ldi	r31, 0x08	; 8
    2df0:	83 81       	ldd	r24, Z+3	; 0x03
	return dummy;
}
    2df2:	08 95       	ret

00002df4 <spi_read_single>:

u8 spi_read_single(void)
{
	return spi_write_single(0x0);
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <spi_write_single>
}
    2dfa:	08 95       	ret

00002dfc <spi_write>:
u8 spi_write(u8* data, u16 len)
{
	u8 dummy=0;
	u16 i;
	
	for (i=0; i<len; i++)
    2dfc:	61 15       	cp	r22, r1
    2dfe:	71 05       	cpc	r23, r1
    2e00:	79 f0       	breq	.+30     	; 0x2e20 <spi_write+0x24>
    2e02:	dc 01       	movw	r26, r24
    2e04:	68 0f       	add	r22, r24
    2e06:	79 1f       	adc	r23, r25
	{
		SPIC.DATA = data[i];
    2e08:	e0 ec       	ldi	r30, 0xC0	; 192
    2e0a:	f8 e0       	ldi	r31, 0x08	; 8
    2e0c:	8d 91       	ld	r24, X+
    2e0e:	83 83       	std	Z+3, r24	; 0x03
		WAIT_EORX();
    2e10:	82 81       	ldd	r24, Z+2	; 0x02
    2e12:	88 23       	and	r24, r24
    2e14:	ec f7       	brge	.-6      	; 0x2e10 <spi_write+0x14>
		dummy = SPIC.DATA;
    2e16:	83 81       	ldd	r24, Z+3	; 0x03
u8 spi_write(u8* data, u16 len)
{
	u8 dummy=0;
	u16 i;
	
	for (i=0; i<len; i++)
    2e18:	a6 17       	cp	r26, r22
    2e1a:	b7 07       	cpc	r27, r23
    2e1c:	b9 f7       	brne	.-18     	; 0x2e0c <spi_write+0x10>
    2e1e:	08 95       	ret
	return spi_write_single(0x0);
}

u8 spi_write(u8* data, u16 len)
{
	u8 dummy=0;
    2e20:	80 e0       	ldi	r24, 0x00	; 0
		SPIC.DATA = data[i];
		WAIT_EORX();
		dummy = SPIC.DATA;
	}
	return dummy;
}
    2e22:	08 95       	ret

00002e24 <spi_read>:

void spi_read(u8* data, u16 len)
{
	u16 i;
	
	for (i=0; i<len; i++)
    2e24:	61 15       	cp	r22, r1
    2e26:	71 05       	cpc	r23, r1
    2e28:	71 f0       	breq	.+28     	; 0x2e46 <spi_read+0x22>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	86 0f       	add	r24, r22
    2e2e:	97 1f       	adc	r25, r23
	{
		SPIC.DATA = 0x0;
    2e30:	e0 ec       	ldi	r30, 0xC0	; 192
    2e32:	f8 e0       	ldi	r31, 0x08	; 8
    2e34:	13 82       	std	Z+3, r1	; 0x03
		WAIT_EORX();
    2e36:	22 81       	ldd	r18, Z+2	; 0x02
    2e38:	22 23       	and	r18, r18
    2e3a:	ec f7       	brge	.-6      	; 0x2e36 <spi_read+0x12>
		data[i] = SPIC.DATA;
    2e3c:	23 81       	ldd	r18, Z+3	; 0x03
    2e3e:	2d 93       	st	X+, r18

void spi_read(u8* data, u16 len)
{
	u16 i;
	
	for (i=0; i<len; i++)
    2e40:	a8 17       	cp	r26, r24
    2e42:	b9 07       	cpc	r27, r25
    2e44:	b9 f7       	brne	.-18     	; 0x2e34 <spi_read+0x10>
    2e46:	08 95       	ret

00002e48 <spi_select>:
	}
}

void spi_select(void)
{
	set_spi_ss(false);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <set_spi_ss>
    2e4e:	08 95       	ret

00002e50 <spi_deselect>:
}

void spi_deselect(void) 
{
	set_spi_ss(true);
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <set_spi_ss>
    2e56:	08 95       	ret

00002e58 <spi_read_somi>:
}

u16 spi_read_somi(void)
{
	return (u16)get_spi_ss();
    2e58:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <get_spi_ss>
}
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	08 95       	ret

00002e60 <__umulhisi3>:
    2e60:	a2 9f       	mul	r26, r18
    2e62:	b0 01       	movw	r22, r0
    2e64:	b3 9f       	mul	r27, r19
    2e66:	c0 01       	movw	r24, r0
    2e68:	a3 9f       	mul	r26, r19
    2e6a:	70 0d       	add	r23, r0
    2e6c:	81 1d       	adc	r24, r1
    2e6e:	11 24       	eor	r1, r1
    2e70:	91 1d       	adc	r25, r1
    2e72:	b2 9f       	mul	r27, r18
    2e74:	70 0d       	add	r23, r0
    2e76:	81 1d       	adc	r24, r1
    2e78:	11 24       	eor	r1, r1
    2e7a:	91 1d       	adc	r25, r1
    2e7c:	08 95       	ret

00002e7e <__eerd_block_x64a3u>:
    2e7e:	e0 ec       	ldi	r30, 0xC0	; 192
    2e80:	f1 e0       	ldi	r31, 0x01	; 1
    2e82:	a7 85       	ldd	r26, Z+15	; 0x0f
    2e84:	a7 fd       	sbrc	r26, 7
    2e86:	fd cf       	rjmp	.-6      	; 0x2e82 <__eerd_block_x64a3u+0x4>
    2e88:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e8a:	a8 60       	ori	r26, 0x08	; 8
    2e8c:	a4 87       	std	Z+12, r26	; 0x0c
    2e8e:	60 50       	subi	r22, 0x00	; 0
    2e90:	70 4f       	sbci	r23, 0xF0	; 240
    2e92:	0c 94 99 17 	jmp	0x2f32	; 0x2f32 <memcpy>

00002e96 <__eerd_byte_x64a3u>:
    2e96:	03 d0       	rcall	.+6      	; 0x2e9e <eeprom_mapen>
    2e98:	80 81       	ld	r24, Z
    2e9a:	99 27       	eor	r25, r25
    2e9c:	08 95       	ret

00002e9e <eeprom_mapen>:
    2e9e:	e0 ec       	ldi	r30, 0xC0	; 192
    2ea0:	f1 e0       	ldi	r31, 0x01	; 1
    2ea2:	37 85       	ldd	r19, Z+15	; 0x0f
    2ea4:	37 fd       	sbrc	r19, 7
    2ea6:	fd cf       	rjmp	.-6      	; 0x2ea2 <eeprom_mapen+0x4>
    2ea8:	34 85       	ldd	r19, Z+12	; 0x0c
    2eaa:	38 60       	ori	r19, 0x08	; 8
    2eac:	34 87       	std	Z+12, r19	; 0x0c
    2eae:	fc 01       	movw	r30, r24
    2eb0:	e0 50       	subi	r30, 0x00	; 0
    2eb2:	f0 4f       	sbci	r31, 0xF0	; 240
    2eb4:	08 95       	ret

00002eb6 <__eeupd_block_x64a3u>:
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	a4 0f       	add	r26, r20
    2eba:	b5 1f       	adc	r27, r21
    2ebc:	41 50       	subi	r20, 0x01	; 1
    2ebe:	50 40       	sbci	r21, 0x00	; 0
    2ec0:	48 f0       	brcs	.+18     	; 0x2ed4 <__eeupd_block_x64a3u+0x1e>
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	84 0f       	add	r24, r20
    2ec6:	95 1f       	adc	r25, r21
    2ec8:	2e 91       	ld	r18, -X
    2eca:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__eeupd_r18_x64a3u>
    2ece:	41 50       	subi	r20, 0x01	; 1
    2ed0:	50 40       	sbci	r21, 0x00	; 0
    2ed2:	d0 f7       	brcc	.-12     	; 0x2ec8 <__eeupd_block_x64a3u+0x12>
    2ed4:	08 95       	ret

00002ed6 <__eeupd_byte_x64a3u>:
    2ed6:	26 2f       	mov	r18, r22

00002ed8 <__eeupd_r18_x64a3u>:
    2ed8:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <eeprom_mapen>
    2edc:	00 80       	ld	r0, Z
    2ede:	02 16       	cp	r0, r18
    2ee0:	19 f0       	breq	.+6      	; 0x2ee8 <__eeupd_r18_x64a3u+0x10>
    2ee2:	0e 94 77 17 	call	0x2eee	; 0x2eee <__eewr_r18_x64a3u>
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	08 95       	ret

00002eec <__eewr_byte_x64a3u>:
    2eec:	26 2f       	mov	r18, r22

00002eee <__eewr_r18_x64a3u>:
    2eee:	e0 ec       	ldi	r30, 0xC0	; 192
    2ef0:	f1 e0       	ldi	r31, 0x01	; 1
    2ef2:	37 85       	ldd	r19, Z+15	; 0x0f
    2ef4:	37 fd       	sbrc	r19, 7
    2ef6:	fd cf       	rjmp	.-6      	; 0x2ef2 <__eewr_r18_x64a3u+0x4>
    2ef8:	34 85       	ldd	r19, Z+12	; 0x0c
    2efa:	37 7f       	andi	r19, 0xF7	; 247
    2efc:	34 87       	std	Z+12, r19	; 0x0c
    2efe:	37 85       	ldd	r19, Z+15	; 0x0f
    2f00:	31 ff       	sbrs	r19, 1
    2f02:	09 c0       	rjmp	.+18     	; 0x2f16 <__eewr_r18_x64a3u+0x28>
    2f04:	36 e3       	ldi	r19, 0x36	; 54
    2f06:	32 87       	std	Z+10, r19	; 0x0a
    2f08:	38 ed       	ldi	r19, 0xD8	; 216
    2f0a:	34 bf       	out	0x34, r19	; 52
    2f0c:	31 e0       	ldi	r19, 0x01	; 1
    2f0e:	33 87       	std	Z+11, r19	; 0x0b
    2f10:	37 85       	ldd	r19, Z+15	; 0x0f
    2f12:	37 fd       	sbrc	r19, 7
    2f14:	fd cf       	rjmp	.-6      	; 0x2f10 <__eewr_r18_x64a3u+0x22>
    2f16:	33 e3       	ldi	r19, 0x33	; 51
    2f18:	32 87       	std	Z+10, r19	; 0x0a
    2f1a:	80 83       	st	Z, r24
    2f1c:	91 83       	std	Z+1, r25	; 0x01
    2f1e:	12 82       	std	Z+2, r1	; 0x02
    2f20:	24 83       	std	Z+4, r18	; 0x04
    2f22:	25 e3       	ldi	r18, 0x35	; 53
    2f24:	22 87       	std	Z+10, r18	; 0x0a
    2f26:	28 ed       	ldi	r18, 0xD8	; 216
    2f28:	31 e0       	ldi	r19, 0x01	; 1
    2f2a:	24 bf       	out	0x34, r18	; 52
    2f2c:	33 87       	std	Z+11, r19	; 0x0b
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	08 95       	ret

00002f32 <memcpy>:
    2f32:	fb 01       	movw	r30, r22
    2f34:	dc 01       	movw	r26, r24
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <memcpy+0xa>
    2f38:	01 90       	ld	r0, Z+
    2f3a:	0d 92       	st	X+, r0
    2f3c:	41 50       	subi	r20, 0x01	; 1
    2f3e:	50 40       	sbci	r21, 0x00	; 0
    2f40:	d8 f7       	brcc	.-10     	; 0x2f38 <memcpy+0x6>
    2f42:	08 95       	ret

00002f44 <_exit>:
    2f44:	f8 94       	cli

00002f46 <__stop_program>:
    2f46:	ff cf       	rjmp	.-2      	; 0x2f46 <__stop_program>
