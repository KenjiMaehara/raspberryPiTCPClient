
unlock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b8c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00802000  00002b8c  00002c20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000f9  00802136  00802136  00002d56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002d56  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000378  00000000  00000000  00002d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000058a4  00000000  00000000  000030fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cbf  00000000  00000000  000089a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013fa  00000000  00000000  00009661  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a40  00000000  00000000  0000aa5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001e3b  00000000  00000000  0000b49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000022fa  00000000  00000000  0000d2d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d0  00000000  00000000  0000f5d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 10 01 	jmp	0x220	; 0x220 <__ctors_end>
       4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       c:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__vector_3>
      10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      14:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      18:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      20:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      28:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      30:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      34:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      38:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__vector_14>
      3c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      48:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      54:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      58:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      5c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      60:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      68:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      6c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      70:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      74:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      7c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      80:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      84:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      8c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      90:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      94:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      98:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      9c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      a8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      ac:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      b0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      b4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      b8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      bc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      c0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      c4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      c8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      cc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      d0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      d4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      d8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      dc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      e0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      e4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      e8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      ec:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      f0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      f4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      f8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      fc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     100:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     104:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     108:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     10c:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <__vector_67>
     110:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     114:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     118:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     11c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     120:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     124:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     128:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     12c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     130:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     134:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     138:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     13c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     140:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     144:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     148:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     14c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     150:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     154:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     158:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     15c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     160:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     164:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     168:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     16c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     170:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     174:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     178:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     17c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     180:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     184:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     188:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     18c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     190:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     194:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     198:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     19c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1a0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1a4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1a8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1ac:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1b0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1b4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1b8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1bc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1c0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1c4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1c8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1cc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1d0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1d4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1d8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1dc:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1e0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1e4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1e8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1ec:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1f0:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1f4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1f8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
     1fc:	cb 0c       	add	r12, r11
     1fe:	4d 0d       	add	r20, r13
     200:	68 0d       	add	r22, r8
     202:	87 0d       	add	r24, r7
     204:	cd 0d       	add	r28, r13
     206:	ef 0d       	add	r30, r15
     208:	79 0e       	add	r7, r25
     20a:	0b 0e       	add	r0, r27
     20c:	41 0e       	add	r4, r17
     20e:	92 0f       	add	r25, r18
     210:	14 10       	cpse	r1, r4
     212:	2f 10       	cpse	r2, r15
     214:	4e 10       	cpse	r4, r14
     216:	94 10       	cpse	r9, r4
     218:	b7 10       	cpse	r11, r7
     21a:	41 11       	cpse	r20, r1
     21c:	d3 10       	cpse	r13, r3
     21e:	09 11       	cpse	r16, r9

00000220 <__ctors_end>:
     220:	11 24       	eor	r1, r1
     222:	1f be       	out	0x3f, r1	; 63
     224:	cf ef       	ldi	r28, 0xFF	; 255
     226:	cd bf       	out	0x3d, r28	; 61
     228:	df e2       	ldi	r29, 0x2F	; 47
     22a:	de bf       	out	0x3e, r29	; 62

0000022c <__do_copy_data>:
     22c:	11 e2       	ldi	r17, 0x21	; 33
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b0 e2       	ldi	r27, 0x20	; 32
     232:	ec e8       	ldi	r30, 0x8C	; 140
     234:	fb e2       	ldi	r31, 0x2B	; 43
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	0b bf       	out	0x3b, r16	; 59
     23a:	02 c0       	rjmp	.+4      	; 0x240 <__do_copy_data+0x14>
     23c:	07 90       	elpm	r0, Z+
     23e:	0d 92       	st	X+, r0
     240:	a6 33       	cpi	r26, 0x36	; 54
     242:	b1 07       	cpc	r27, r17
     244:	d9 f7       	brne	.-10     	; 0x23c <__do_copy_data+0x10>

00000246 <__do_clear_bss>:
     246:	22 e2       	ldi	r18, 0x22	; 34
     248:	a6 e3       	ldi	r26, 0x36	; 54
     24a:	b1 e2       	ldi	r27, 0x21	; 33
     24c:	01 c0       	rjmp	.+2      	; 0x250 <.do_clear_bss_start>

0000024e <.do_clear_bss_loop>:
     24e:	1d 92       	st	X+, r1

00000250 <.do_clear_bss_start>:
     250:	af 32       	cpi	r26, 0x2F	; 47
     252:	b2 07       	cpc	r27, r18
     254:	e1 f7       	brne	.-8      	; 0x24e <.do_clear_bss_loop>
     256:	0e 94 bf 12 	call	0x257e	; 0x257e <main>
     25a:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <_exit>

0000025e <__bad_interrupt>:
     25e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000262 <cc1100_init>:
				void (*read)(u8* data, u16 len),
				void (*select)(void),
				void (*deselect)(void),
				u16 (*read_somi)(void)
				)
{
     262:	af 92       	push	r10
     264:	bf 92       	push	r11
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
	mdelay = mili;
     272:	80 93 44 21 	sts	0x2144, r24
     276:	90 93 45 21 	sts	0x2145, r25
	spi_write_single = write_single;
     27a:	60 93 42 21 	sts	0x2142, r22
     27e:	70 93 43 21 	sts	0x2143, r23
	spi_read_single = read_single;
     282:	40 93 40 21 	sts	0x2140, r20
     286:	50 93 41 21 	sts	0x2141, r21
	spi_write = write;
     28a:	20 93 3e 21 	sts	0x213E, r18
     28e:	30 93 3f 21 	sts	0x213F, r19
	spi_read = read;
     292:	00 93 3c 21 	sts	0x213C, r16
     296:	10 93 3d 21 	sts	0x213D, r17
	spi_select = select;
     29a:	e0 92 3a 21 	sts	0x213A, r14
     29e:	f0 92 3b 21 	sts	0x213B, r15
	spi_deselect = deselect;
     2a2:	c0 92 38 21 	sts	0x2138, r12
     2a6:	d0 92 39 21 	sts	0x2139, r13
	spi_read_somi = read_somi;
     2aa:	a0 92 36 21 	sts	0x2136, r10
     2ae:	b0 92 37 21 	sts	0x2137, r11
	
	//spi_init();
	spi_select();
     2b2:	f7 01       	movw	r30, r14
     2b4:	09 95       	icall
	spi_deselect();
     2b6:	e0 91 38 21 	lds	r30, 0x2138
     2ba:	f0 91 39 21 	lds	r31, 0x2139
     2be:	09 95       	icall
	spi_select();
     2c0:	e0 91 3a 21 	lds	r30, 0x213A
     2c4:	f0 91 3b 21 	lds	r31, 0x213B
     2c8:	09 95       	icall
	spi_deselect();
     2ca:	e0 91 38 21 	lds	r30, 0x2138
     2ce:	f0 91 39 21 	lds	r31, 0x2139
     2d2:	09 95       	icall
	mdelay(1);
     2d4:	e0 91 44 21 	lds	r30, 0x2144
     2d8:	f0 91 45 21 	lds	r31, 0x2145
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	09 95       	icall
	spi_select();
     2e2:	e0 91 3a 21 	lds	r30, 0x213A
     2e6:	f0 91 3b 21 	lds	r31, 0x213B
     2ea:	09 95       	icall
	while (spi_read_somi()) ;
     2ec:	e0 91 36 21 	lds	r30, 0x2136
     2f0:	f0 91 37 21 	lds	r31, 0x2137
     2f4:	09 95       	icall
     2f6:	89 2b       	or	r24, r25
     2f8:	c9 f7       	brne	.-14     	; 0x2ec <cc1100_init+0x8a>
	spi_write_single(CC1100_STROBE_SRES | CC1100_ACCESS_STROBE);
     2fa:	e0 91 42 21 	lds	r30, 0x2142
     2fe:	f0 91 43 21 	lds	r31, 0x2143
     302:	80 e3       	ldi	r24, 0x30	; 48
     304:	09 95       	icall
	while (spi_read_somi()) ;
     306:	e0 91 36 21 	lds	r30, 0x2136
     30a:	f0 91 37 21 	lds	r31, 0x2137
     30e:	09 95       	icall
     310:	89 2b       	or	r24, r25
     312:	c9 f7       	brne	.-14     	; 0x306 <cc1100_init+0xa4>
	spi_deselect();
     314:	e0 91 38 21 	lds	r30, 0x2138
     318:	f0 91 39 21 	lds	r31, 0x2139
     31c:	09 95       	icall

	mdelay(1);
     31e:	e0 91 44 21 	lds	r30, 0x2144
     322:	f0 91 45 21 	lds	r31, 0x2145
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
	//setup 426.361755MHz
	cc1100_write_reg(CC1100_REG_FREQ2, 0x10);
	cc1100_write_reg(CC1100_REG_FREQ1, 0x66);
	cc1100_write_reg(CC1100_REG_FREQ0, 0x07);
#endif
}
     32a:	1f 91       	pop	r17
     32c:	0f 91       	pop	r16
     32e:	ff 90       	pop	r15
     330:	ef 90       	pop	r14
     332:	df 90       	pop	r13
     334:	cf 90       	pop	r12
     336:	bf 90       	pop	r11
     338:	af 90       	pop	r10
	while (spi_read_somi()) ;
	spi_write_single(CC1100_STROBE_SRES | CC1100_ACCESS_STROBE);
	while (spi_read_somi()) ;
	spi_deselect();

	mdelay(1);
     33a:	09 94       	ijmp

0000033c <cc1100_read_reg>:
	cc1100_write_reg(CC1100_REG_FREQ0, 0x07);
#endif
}

u8 cc1100_read_reg(u8 addr)
{
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	1f 92       	push	r1
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
	u8 reg;
	spi_select();
     346:	e0 91 3a 21 	lds	r30, 0x213A
     34a:	f0 91 3b 21 	lds	r31, 0x213B
     34e:	89 83       	std	Y+1, r24	; 0x01
     350:	09 95       	icall
	spi_write_single(addr | CC1100_ACCESS_READ);
     352:	e0 91 42 21 	lds	r30, 0x2142
     356:	f0 91 43 21 	lds	r31, 0x2143
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	80 68       	ori	r24, 0x80	; 128
     35e:	09 95       	icall
	reg = spi_read_single();
     360:	e0 91 40 21 	lds	r30, 0x2140
     364:	f0 91 41 21 	lds	r31, 0x2141
     368:	09 95       	icall
	spi_deselect();
     36a:	e0 91 38 21 	lds	r30, 0x2138
     36e:	f0 91 39 21 	lds	r31, 0x2139
     372:	89 83       	std	Y+1, r24	; 0x01
     374:	09 95       	icall
	return reg;
}
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	0f 90       	pop	r0
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <cc1100_write_reg>:

void cc1100_write_reg(u8 addr, u8 value)
{
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <cc1100_write_reg+0x6>
     386:	cd b7       	in	r28, 0x3d	; 61
     388:	de b7       	in	r29, 0x3e	; 62
	spi_select();
     38a:	e0 91 3a 21 	lds	r30, 0x213A
     38e:	f0 91 3b 21 	lds	r31, 0x213B
     392:	6a 83       	std	Y+2, r22	; 0x02
     394:	89 83       	std	Y+1, r24	; 0x01
     396:	09 95       	icall
	spi_write_single(addr | CC1100_ACCESS_WRITE);
     398:	e0 91 42 21 	lds	r30, 0x2142
     39c:	f0 91 43 21 	lds	r31, 0x2143
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	09 95       	icall
	spi_write_single(value);
     3a4:	e0 91 42 21 	lds	r30, 0x2142
     3a8:	f0 91 43 21 	lds	r31, 0x2143
     3ac:	6a 81       	ldd	r22, Y+2	; 0x02
     3ae:	86 2f       	mov	r24, r22
     3b0:	09 95       	icall
	spi_deselect();
     3b2:	e0 91 38 21 	lds	r30, 0x2138
     3b6:	f0 91 39 21 	lds	r31, 0x2139
}
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
void cc1100_write_reg(u8 addr, u8 value)
{
	spi_select();
	spi_write_single(addr | CC1100_ACCESS_WRITE);
	spi_write_single(value);
	spi_deselect();
     3c2:	09 94       	ijmp

000003c4 <cc1100_strobe_cmd>:
}

u8 cc1100_strobe_cmd(u8 cmd)
{
     3c4:	1f 93       	push	r17
     3c6:	cf 93       	push	r28
     3c8:	df 93       	push	r29
     3ca:	1f 92       	push	r1
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	18 2f       	mov	r17, r24
	u8 ret;
	spi_select();
     3d2:	e0 91 3a 21 	lds	r30, 0x213A
     3d6:	f0 91 3b 21 	lds	r31, 0x213B
     3da:	09 95       	icall
	while(spi_read_somi());
     3dc:	e0 91 36 21 	lds	r30, 0x2136
     3e0:	f0 91 37 21 	lds	r31, 0x2137
     3e4:	09 95       	icall
     3e6:	89 2b       	or	r24, r25
     3e8:	c9 f7       	brne	.-14     	; 0x3dc <cc1100_strobe_cmd+0x18>
	ret = spi_write_single(cmd | CC1100_ACCESS_STROBE);
     3ea:	e0 91 42 21 	lds	r30, 0x2142
     3ee:	f0 91 43 21 	lds	r31, 0x2143
     3f2:	81 2f       	mov	r24, r17
     3f4:	09 95       	icall
	spi_deselect();
     3f6:	e0 91 38 21 	lds	r30, 0x2138
     3fa:	f0 91 39 21 	lds	r31, 0x2139
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	09 95       	icall
	return ret;
}
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	0f 90       	pop	r0
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	08 95       	ret

0000040e <cc1100_fifo_put>:
	ret = spi_write_single(cmd | CC1100_ACCESS_STROBE);
	return ret;
}

void cc1100_fifo_put(u8* buffer, u16 length)
{
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	00 d0       	rcall	.+0      	; 0x418 <cc1100_fifo_put+0xa>
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	8c 01       	movw	r16, r24
  spi_select();
     41e:	e0 91 3a 21 	lds	r30, 0x213A
     422:	f0 91 3b 21 	lds	r31, 0x213B
     426:	69 83       	std	Y+1, r22	; 0x01
     428:	7a 83       	std	Y+2, r23	; 0x02
     42a:	09 95       	icall
  spi_write_single(CC1100_DATA_FIFO_ADDR | CC1100_ACCESS_WRITE_BURST);
     42c:	e0 91 42 21 	lds	r30, 0x2142
     430:	f0 91 43 21 	lds	r31, 0x2143
     434:	8f e7       	ldi	r24, 0x7F	; 127
     436:	09 95       	icall
  spi_write(buffer, length);
     438:	e0 91 3e 21 	lds	r30, 0x213E
     43c:	f0 91 3f 21 	lds	r31, 0x213F
     440:	69 81       	ldd	r22, Y+1	; 0x01
     442:	7a 81       	ldd	r23, Y+2	; 0x02
     444:	c8 01       	movw	r24, r16
     446:	09 95       	icall
  spi_deselect();
     448:	e0 91 38 21 	lds	r30, 0x2138
     44c:	f0 91 39 21 	lds	r31, 0x2139
}
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	1f 91       	pop	r17
     45a:	0f 91       	pop	r16
void cc1100_fifo_put(u8* buffer, u16 length)
{
  spi_select();
  spi_write_single(CC1100_DATA_FIFO_ADDR | CC1100_ACCESS_WRITE_BURST);
  spi_write(buffer, length);
  spi_deselect();
     45c:	09 94       	ijmp

0000045e <cc1100_fifo_get>:
}

void cc1100_fifo_get(u8* buffer, u16 length)
{
     45e:	0f 93       	push	r16
     460:	1f 93       	push	r17
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
     466:	00 d0       	rcall	.+0      	; 0x468 <cc1100_fifo_get+0xa>
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	8c 01       	movw	r16, r24
	spi_select();
     46e:	e0 91 3a 21 	lds	r30, 0x213A
     472:	f0 91 3b 21 	lds	r31, 0x213B
     476:	69 83       	std	Y+1, r22	; 0x01
     478:	7a 83       	std	Y+2, r23	; 0x02
     47a:	09 95       	icall
	spi_write_single(CC1100_DATA_FIFO_ADDR | CC1100_ACCESS_READ_BURST);
     47c:	e0 91 42 21 	lds	r30, 0x2142
     480:	f0 91 43 21 	lds	r31, 0x2143
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	09 95       	icall
	spi_read(buffer, length);
     488:	e0 91 3c 21 	lds	r30, 0x213C
     48c:	f0 91 3d 21 	lds	r31, 0x213D
     490:	69 81       	ldd	r22, Y+1	; 0x01
     492:	7a 81       	ldd	r23, Y+2	; 0x02
     494:	c8 01       	movw	r24, r16
     496:	09 95       	icall
	spi_deselect();
     498:	e0 91 38 21 	lds	r30, 0x2138
     49c:	f0 91 39 21 	lds	r31, 0x2139
}
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
void cc1100_fifo_get(u8* buffer, u16 length)
{
	spi_select();
	spi_write_single(CC1100_DATA_FIFO_ADDR | CC1100_ACCESS_READ_BURST);
	spi_read(buffer, length);
	spi_deselect();
     4ac:	09 94       	ijmp

000004ae <cc1100_read_status>:

u8 cc1100_read_status(u8 addr)
{
	u8 temp;

	temp = cc1100_read_reg(addr | CC1100_ACCESS_STATUS);
     4ae:	80 6c       	ori	r24, 0xC0	; 192
     4b0:	0c 94 9e 01 	jmp	0x33c	; 0x33c <cc1100_read_reg>

000004b4 <cc1100_cmd_idle>:
	while(status  != STATE_IDLE );
}

void cc1100_cmd_idle(void)
{
	switch ((cc1100_cmd_nop() >> 4) & 0x7)
     4b4:	8d e3       	ldi	r24, 0x3D	; 61
     4b6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
     4ba:	82 95       	swap	r24
     4bc:	87 70       	andi	r24, 0x07	; 7
     4be:	86 30       	cpi	r24, 0x06	; 6
     4c0:	21 f0       	breq	.+8      	; 0x4ca <cc1100_cmd_idle+0x16>
     4c2:	87 30       	cpi	r24, 0x07	; 7
     4c4:	21 f4       	brne	.+8      	; 0x4ce <cc1100_cmd_idle+0x1a>
	{
		case STATE_RXOVER:
			cc1100_cmd_flush_rx();
			break;
		case STATE_TXUNDER:
			cc1100_cmd_flush_tx();
     4c6:	8b e3       	ldi	r24, 0x3B	; 59
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <cc1100_cmd_idle+0x1c>
void cc1100_cmd_idle(void)
{
	switch ((cc1100_cmd_nop() >> 4) & 0x7)
	{
		case STATE_RXOVER:
			cc1100_cmd_flush_rx();
     4ca:	8a e3       	ldi	r24, 0x3A	; 58
     4cc:	01 c0       	rjmp	.+2      	; 0x4d0 <cc1100_cmd_idle+0x1c>
			break;
		case STATE_TXUNDER:
			cc1100_cmd_flush_tx();
			break;
		default:
		cc1100_strobe_cmd(CC1100_STROBE_SIDLE);
     4ce:	86 e3       	ldi	r24, 0x36	; 54
     4d0:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
	}
	WAIT_STATUS(STATE_IDLE);
     4d4:	8d e3       	ldi	r24, 0x3D	; 61
     4d6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
     4da:	82 95       	swap	r24
     4dc:	87 70       	andi	r24, 0x07	; 7
     4de:	d1 f7       	brne	.-12     	; 0x4d4 <cc1100_cmd_idle+0x20>
}
     4e0:	08 95       	ret

000004e2 <cc1100_cmd_calibrate>:
	while ( ((cc1100_cmd_nop()>>4) & 0x7) != status) ;

void cc1100_cmd_calibrate(void)
{
	u8 status;
	cc1100_cmd_idle();
     4e2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
	cc1100_strobe_cmd(CC1100_STROBE_SCAL);
     4e6:	83 e3       	ldi	r24, 0x33	; 51
     4e8:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>

	do
	{
		status = ((cc1100_cmd_nop()>>4) & 0x7);
     4ec:	8d e3       	ldi	r24, 0x3D	; 61
     4ee:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
     4f2:	82 95       	swap	r24
     4f4:	87 70       	andi	r24, 0x07	; 7
	}
	while(status  != STATE_IDLE );
     4f6:	d1 f7       	brne	.-12     	; 0x4ec <cc1100_cmd_calibrate+0xa>
}
     4f8:	08 95       	ret

000004fa <cc1101_init_reg>:
					{CC1100_REG_MDMCFG4,0xF8},
					{CC1100_REG_AGCCTRL1,0x50},
				};

void cc1101_init_reg(void)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	c1 e0       	ldi	r28, 0x01	; 1
     500:	d0 e2       	ldi	r29, 0x20	; 32
     502:	fe 01       	movw	r30, r28
     504:	31 97       	sbiw	r30, 0x01	; 1
	u8 i;

	for(i = 0 ;i < 10 ; i++) 
	{ 
		cc1100_write_reg(init_all[i].addr,init_all[i].data);
     506:	68 81       	ld	r22, Y
     508:	80 81       	ld	r24, Z
     50a:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
     50e:	22 96       	adiw	r28, 0x02	; 2

void cc1101_init_reg(void)
{
	u8 i;

	for(i = 0 ;i < 10 ; i++) 
     510:	80 e2       	ldi	r24, 0x20	; 32
     512:	c5 31       	cpi	r28, 0x15	; 21
     514:	d8 07       	cpc	r29, r24
     516:	a9 f7       	brne	.-22     	; 0x502 <cc1101_init_reg+0x8>
	{ 
		cc1100_write_reg(init_all[i].addr,init_all[i].data);
	} 
}
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	08 95       	ret

0000051e <cc1101_rtx_reg_set>:

void cc1101_rtx_reg_set(u8 rtx)
{
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	1f 92       	push	r1
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
	cc1101_init_reg();
     528:	89 83       	std	Y+1, r24	; 0x01
     52a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <cc1101_init_reg>
	cc1100_write_reg(CC1100_REG_PKTCTRL1,rtx == 1 ? 0x0c : 0x04);
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	11 f4       	brne	.+4      	; 0x538 <cc1101_rtx_reg_set+0x1a>
     534:	6c e0       	ldi	r22, 0x0C	; 12
     536:	01 c0       	rjmp	.+2      	; 0x53a <cc1101_rtx_reg_set+0x1c>
     538:	64 e0       	ldi	r22, 0x04	; 4
     53a:	87 e0       	ldi	r24, 0x07	; 7
}
     53c:	0f 90       	pop	r0
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
}

void cc1101_rtx_reg_set(u8 rtx)
{
	cc1101_init_reg();
	cc1100_write_reg(CC1100_REG_PKTCTRL1,rtx == 1 ? 0x0c : 0x04);
     542:	0c 94 c0 01 	jmp	0x380	; 0x380 <cc1100_write_reg>

00000546 <cc1101_8PATABLE_write_reg>:
}


void cc1101_8PATABLE_write_reg(void)
{
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
	u8 i;

	spi_select();
     54a:	e0 91 3a 21 	lds	r30, 0x213A
     54e:	f0 91 3b 21 	lds	r31, 0x213B
     552:	09 95       	icall
	spi_write_single(0x3e | CC1100_ACCESS_WRITE_BURST);
     554:	e0 91 42 21 	lds	r30, 0x2142
     558:	f0 91 43 21 	lds	r31, 0x2143
     55c:	8e e7       	ldi	r24, 0x7E	; 126
     55e:	09 95       	icall
     560:	c6 e1       	ldi	r28, 0x16	; 22
     562:	d0 e2       	ldi	r29, 0x20	; 32
	for(i=0;i<8;i++)
	{
		spi_write_single(pt_data[i]);
     564:	e0 91 42 21 	lds	r30, 0x2142
     568:	f0 91 43 21 	lds	r31, 0x2143
     56c:	89 91       	ld	r24, Y+
     56e:	09 95       	icall
{
	u8 i;

	spi_select();
	spi_write_single(0x3e | CC1100_ACCESS_WRITE_BURST);
	for(i=0;i<8;i++)
     570:	80 e2       	ldi	r24, 0x20	; 32
     572:	ce 31       	cpi	r28, 0x1E	; 30
     574:	d8 07       	cpc	r29, r24
     576:	b1 f7       	brne	.-20     	; 0x564 <cc1101_8PATABLE_write_reg+0x1e>
	{
		spi_write_single(pt_data[i]);
	}
	spi_deselect();
     578:	e0 91 38 21 	lds	r30, 0x2138
     57c:	f0 91 39 21 	lds	r31, 0x2139
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
	spi_write_single(0x3e | CC1100_ACCESS_WRITE_BURST);
	for(i=0;i<8;i++)
	{
		spi_write_single(pt_data[i]);
	}
	spi_deselect();
     584:	09 94       	ijmp

00000586 <tx_fifo_write>:
}


void tx_fifo_write(u8 * data,u8 length)
{
     586:	1f 93       	push	r17
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
     58c:	ec 01       	movw	r28, r24
     58e:	16 2f       	mov	r17, r22
	data[0] = length;
     590:	68 83       	st	Y, r22
	cc1100_fifo_put(data,1);
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	70 e0       	ldi	r23, 0x00	; 0
     596:	0e 94 07 02 	call	0x40e	; 0x40e <cc1100_fifo_put>
	cc1100_fifo_put(data,length);
     59a:	61 2f       	mov	r22, r17
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	ce 01       	movw	r24, r28
}
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17

void tx_fifo_write(u8 * data,u8 length)
{
	data[0] = length;
	cc1100_fifo_put(data,1);
	cc1100_fifo_put(data,length);
     5a6:	0c 94 07 02 	jmp	0x40e	; 0x40e <cc1100_fifo_put>

000005aa <rx_fifo_read>:
}


u8 rx_fifo_read(u8 * data,u8 * rssi, u8 * lqi)
{
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	1f 92       	push	r1
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	7c 01       	movw	r14, r24
     5c2:	8b 01       	movw	r16, r22
     5c4:	6a 01       	movw	r12, r20
	u8 length;

	cc1100_fifo_get(&length,1);
     5c6:	61 e0       	ldi	r22, 0x01	; 1
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	ce 01       	movw	r24, r28
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	0e 94 2f 02 	call	0x45e	; 0x45e <cc1100_fifo_get>

	cc1100_fifo_get(data,length);
     5d2:	69 81       	ldd	r22, Y+1	; 0x01
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	c7 01       	movw	r24, r14
     5d8:	0e 94 2f 02 	call	0x45e	; 0x45e <cc1100_fifo_get>

	cc1100_fifo_get(rssi,1);
     5dc:	61 e0       	ldi	r22, 0x01	; 1
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	c8 01       	movw	r24, r16
     5e2:	0e 94 2f 02 	call	0x45e	; 0x45e <cc1100_fifo_get>
	cc1100_fifo_get(lqi,1);
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	c6 01       	movw	r24, r12
     5ec:	0e 94 2f 02 	call	0x45e	; 0x45e <cc1100_fifo_get>

	return length;

	//return length - 2;
}
     5f0:	89 81       	ldd	r24, Y+1	; 0x01
     5f2:	0f 90       	pop	r0
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	08 95       	ret

00000606 <cc1101_set_freq>:



void cc1101_set_freq(u16 frq)
{
	cc1101_freq	= frq;
     606:	80 93 46 21 	sts	0x2146, r24
     60a:	90 93 47 21 	sts	0x2147, r25
     60e:	08 95       	ret

00000610 <cc1101_carrier_wave_setup>:



void cc1101_carrier_wave_setup(void)
{
	cc1100_write_reg(CC1100_REG_FREQ2, 0x10);
     610:	60 e1       	ldi	r22, 0x10	; 16
     612:	8d e0       	ldi	r24, 0x0D	; 13
     614:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_FREQ1, (cc1101_freq >> 8)  & 0xff);
     618:	60 91 47 21 	lds	r22, 0x2147
     61c:	8e e0       	ldi	r24, 0x0E	; 14
     61e:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_FREQ0, cc1101_freq & 0xff);
     622:	60 91 46 21 	lds	r22, 0x2146
     626:	8f e0       	ldi	r24, 0x0F	; 15
     628:	0c 94 c0 01 	jmp	0x380	; 0x380 <cc1100_write_reg>

0000062c <crc8>:
};



u8 crc8( u8 *data , long size )  
{  
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	dc 01       	movw	r26, r24
    long lp;
    u8 crc = 0;
     632:	80 e0       	ldi	r24, 0x00	; 0

	for( lp = 0; lp < size; lp++ )
     634:	00 e0       	ldi	r16, 0x00	; 0
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	98 01       	movw	r18, r16
     63a:	04 17       	cp	r16, r20
     63c:	15 07       	cpc	r17, r21
     63e:	26 07       	cpc	r18, r22
     640:	37 07       	cpc	r19, r23
     642:	5c f4       	brge	.+22     	; 0x65a <crc8+0x2e>
	{
		 crc = crc8_table[ crc ^ data[lp] ] ;
     644:	ed 91       	ld	r30, X+
     646:	e8 27       	eor	r30, r24
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	ea 5c       	subi	r30, 0xCA	; 202
     64c:	ff 4d       	sbci	r31, 0xDF	; 223
     64e:	80 81       	ld	r24, Z
u8 crc8( u8 *data , long size )  
{  
    long lp;
    u8 crc = 0;

	for( lp = 0; lp < size; lp++ )
     650:	0f 5f       	subi	r16, 0xFF	; 255
     652:	1f 4f       	sbci	r17, 0xFF	; 255
     654:	2f 4f       	sbci	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	f0 cf       	rjmp	.-32     	; 0x63a <crc8+0xe>
	{
		 crc = crc8_table[ crc ^ data[lp] ] ;
	}
    
    return crc;
} 
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <env_save>:
		eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
	}
}

void env_save(env_t * env)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	ec 01       	movw	r28, r24
	u8 * pBuf= (u8 *)env;
	
	eeprom_update_block((const void*)env,(void*) 0x400,sizeof(env_t));
     666:	4b e1       	ldi	r20, 0x1B	; 27
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	74 e0       	ldi	r23, 0x04	; 4
     66e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__eeupd_block_x64a3u>
	eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
     672:	4b e1       	ldi	r20, 0x1B	; 27
     674:	50 e0       	ldi	r21, 0x00	; 0
     676:	60 e0       	ldi	r22, 0x00	; 0
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	ce 01       	movw	r24, r28
     67c:	0e 94 16 03 	call	0x62c	; 0x62c <crc8>
     680:	68 2f       	mov	r22, r24
     682:	8b e1       	ldi	r24, 0x1B	; 27
     684:	94 e0       	ldi	r25, 0x04	; 4
}
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
void env_save(env_t * env)
{
	u8 * pBuf= (u8 *)env;
	
	eeprom_update_block((const void*)env,(void*) 0x400,sizeof(env_t));
	eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
     68a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__eewr_byte_x64a3u>

0000068e <env_default>:

void env_default(env_t * env)
{
	int i;

	memset(env,0,sizeof(env_t));
     68e:	2b e1       	ldi	r18, 0x1B	; 27
     690:	fc 01       	movw	r30, r24
     692:	11 92       	st	Z+, r1
     694:	2a 95       	dec	r18
     696:	e9 f7       	brne	.-6      	; 0x692 <env_default+0x4>
	
	env->id = 0xffffffff;
     698:	4f ef       	ldi	r20, 0xFF	; 255
     69a:	5f ef       	ldi	r21, 0xFF	; 255
     69c:	ba 01       	movw	r22, r20
     69e:	fc 01       	movw	r30, r24
     6a0:	44 83       	std	Z+4, r20	; 0x04
     6a2:	55 83       	std	Z+5, r21	; 0x05
     6a4:	66 83       	std	Z+6, r22	; 0x06
     6a6:	77 83       	std	Z+7, r23	; 0x07
     6a8:	08 95       	ret

000006aa <env_init>:
} 



void env_init()
{
     6aa:	cf 93       	push	r28
	u8 crc;
	u8 * pBuf;
	
	eeprom_read_block((void*)&gEnv,(void*) 0x400,sizeof(env_t));
     6ac:	4b e1       	ldi	r20, 0x1B	; 27
     6ae:	50 e0       	ldi	r21, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	74 e0       	ldi	r23, 0x04	; 4
     6b4:	8a ee       	ldi	r24, 0xEA	; 234
     6b6:	91 e2       	ldi	r25, 0x21	; 33
     6b8:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__eerd_block_x64a3u>
	
	crc = eeprom_read_byte((void *)0x400 + sizeof(env_t));
     6bc:	8b e1       	ldi	r24, 0x1B	; 27
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	0e 94 6d 15 	call	0x2ada	; 0x2ada <__eerd_byte_x64a3u>
     6c4:	c8 2f       	mov	r28, r24
	
	
	pBuf = (u8 *)&gEnv;
	
	if(crc != crc8(pBuf,sizeof(env_t)))
     6c6:	4b e1       	ldi	r20, 0x1B	; 27
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	8a ee       	ldi	r24, 0xEA	; 234
     6d0:	91 e2       	ldi	r25, 0x21	; 33
     6d2:	0e 94 16 03 	call	0x62c	; 0x62c <crc8>
     6d6:	c8 17       	cp	r28, r24
     6d8:	d1 f0       	breq	.+52     	; 0x70e <env_init+0x64>
	{
		env_default(&gEnv);
     6da:	8a ee       	ldi	r24, 0xEA	; 234
     6dc:	91 e2       	ldi	r25, 0x21	; 33
     6de:	0e 94 47 03 	call	0x68e	; 0x68e <env_default>
		eeprom_update_block((const void*)&gEnv,(void*) 0x400,sizeof(env_t));
     6e2:	4b e1       	ldi	r20, 0x1B	; 27
     6e4:	50 e0       	ldi	r21, 0x00	; 0
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	74 e0       	ldi	r23, 0x04	; 4
     6ea:	8a ee       	ldi	r24, 0xEA	; 234
     6ec:	91 e2       	ldi	r25, 0x21	; 33
     6ee:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__eeupd_block_x64a3u>
		eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
     6f2:	4b e1       	ldi	r20, 0x1B	; 27
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	8a ee       	ldi	r24, 0xEA	; 234
     6fc:	91 e2       	ldi	r25, 0x21	; 33
     6fe:	0e 94 16 03 	call	0x62c	; 0x62c <crc8>
     702:	68 2f       	mov	r22, r24
     704:	8b e1       	ldi	r24, 0x1B	; 27
     706:	94 e0       	ldi	r25, 0x04	; 4
	}
}
     708:	cf 91       	pop	r28
	
	if(crc != crc8(pBuf,sizeof(env_t)))
	{
		env_default(&gEnv);
		eeprom_update_block((const void*)&gEnv,(void*) 0x400,sizeof(env_t));
		eeprom_write_byte((void *)0x400 + sizeof(env_t),crc8(pBuf,sizeof(env_t)));
     70a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__eewr_byte_x64a3u>
	}
}
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <tele_env_save>:
		eeprom_write_byte((void *)0x000 + sizeof(tele_env_t),crc8(pBuf,sizeof(tele_env_t)));
	}
}

void tele_env_save(tele_env_t	* tele_env)
{
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
     716:	ec 01       	movw	r28, r24
	u8 * pBuf= (u8 *)tele_env;
	
	eeprom_update_block((const void*)tele_env,(void*) 0x000,sizeof(tele_env_t));
     718:	47 e6       	ldi	r20, 0x67	; 103
     71a:	50 e0       	ldi	r21, 0x00	; 0
     71c:	60 e0       	ldi	r22, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__eeupd_block_x64a3u>
	eeprom_write_byte((void *)0x000 + sizeof(tele_env_t),crc8(pBuf,sizeof(tele_env_t)));
     724:	47 e6       	ldi	r20, 0x67	; 103
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	ce 01       	movw	r24, r28
     72e:	0e 94 16 03 	call	0x62c	; 0x62c <crc8>
     732:	68 2f       	mov	r22, r24
     734:	87 e6       	ldi	r24, 0x67	; 103
     736:	90 e0       	ldi	r25, 0x00	; 0
}
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
void tele_env_save(tele_env_t	* tele_env)
{
	u8 * pBuf= (u8 *)tele_env;
	
	eeprom_update_block((const void*)tele_env,(void*) 0x000,sizeof(tele_env_t));
	eeprom_write_byte((void *)0x000 + sizeof(tele_env_t),crc8(pBuf,sizeof(tele_env_t)));
     73c:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__eewr_byte_x64a3u>

00000740 <spi_init>:
	// -enables module
	// -set to mast mode
	// -SPI clk = 32MHz/4=8MHz
	// -mode set to 0
		
	SPIC.CTRL = SPI_PRESCALER_DIV16_gc |  SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc;// | SPI_CLK2X_bm 
     740:	81 e5       	ldi	r24, 0x51	; 81
     742:	80 93 c0 08 	sts	0x08C0, r24
     746:	08 95       	ret

00000748 <spi_write_single>:

u8 spi_write_single(u8 byte)
{
	u8 dummy;

	SPIC.DATA = byte;
     748:	80 93 c3 08 	sts	0x08C3, r24
	while (! (SPIC.STATUS & SPI_IF_bm)) 
     74c:	80 91 c2 08 	lds	r24, 0x08C2
     750:	87 ff       	sbrs	r24, 7
     752:	fc cf       	rjmp	.-8      	; 0x74c <spi_write_single+0x4>
	{
		; 
	}

	WAIT_EORX();
     754:	80 91 c2 08 	lds	r24, 0x08C2
     758:	87 ff       	sbrs	r24, 7
     75a:	fc cf       	rjmp	.-8      	; 0x754 <spi_write_single+0xc>
	dummy = SPIC.DATA;
     75c:	80 91 c3 08 	lds	r24, 0x08C3
	return dummy;
}
     760:	08 95       	ret

00000762 <spi_read_single>:

u8 spi_read_single(void)
{
	return spi_write_single(0x0);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0c 94 a4 03 	jmp	0x748	; 0x748 <spi_write_single>

00000768 <spi_write>:
}

u8 spi_write(u8* data, u16 len)
{
     768:	fc 01       	movw	r30, r24
     76a:	68 0f       	add	r22, r24
     76c:	79 1f       	adc	r23, r25
	u8 dummy=0;
     76e:	80 e0       	ldi	r24, 0x00	; 0
	u16 i;
	
	for (i=0; i<len; i++)
     770:	e6 17       	cp	r30, r22
     772:	f7 07       	cpc	r31, r23
     774:	51 f0       	breq	.+20     	; 0x78a <spi_write+0x22>
	{
		SPIC.DATA = data[i];
     776:	81 91       	ld	r24, Z+
     778:	80 93 c3 08 	sts	0x08C3, r24
		WAIT_EORX();
     77c:	80 91 c2 08 	lds	r24, 0x08C2
     780:	87 ff       	sbrs	r24, 7
     782:	fc cf       	rjmp	.-8      	; 0x77c <spi_write+0x14>
		dummy = SPIC.DATA;
     784:	80 91 c3 08 	lds	r24, 0x08C3
     788:	f3 cf       	rjmp	.-26     	; 0x770 <spi_write+0x8>
	}
	return dummy;
}
     78a:	08 95       	ret

0000078c <spi_read>:

void spi_read(u8* data, u16 len)
{
     78c:	68 0f       	add	r22, r24
     78e:	79 1f       	adc	r23, r25
	u16 i;
	
	for (i=0; i<len; i++)
     790:	86 17       	cp	r24, r22
     792:	97 07       	cpc	r25, r23
     794:	61 f0       	breq	.+24     	; 0x7ae <spi_read+0x22>
	{
		SPIC.DATA = 0x0;
     796:	10 92 c3 08 	sts	0x08C3, r1
		WAIT_EORX();
     79a:	20 91 c2 08 	lds	r18, 0x08C2
     79e:	27 ff       	sbrs	r18, 7
     7a0:	fc cf       	rjmp	.-8      	; 0x79a <spi_read+0xe>
		data[i] = SPIC.DATA;
     7a2:	20 91 c3 08 	lds	r18, 0x08C3
     7a6:	fc 01       	movw	r30, r24
     7a8:	21 93       	st	Z+, r18
     7aa:	cf 01       	movw	r24, r30
     7ac:	f1 cf       	rjmp	.-30     	; 0x790 <spi_read+0x4>
	}
}
     7ae:	08 95       	ret

000007b0 <spi_select>:

void spi_select(void)
{
	set_spi_ss(false);
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	0c 94 9a 04 	jmp	0x934	; 0x934 <set_spi_ss>

000007b6 <spi_deselect>:
}

void spi_deselect(void) 
{
	set_spi_ss(true);
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	0c 94 9a 04 	jmp	0x934	; 0x934 <set_spi_ss>

000007bc <spi_read_somi>:
}

u16 spi_read_somi(void)
{
	return (u16)get_spi_ss();
     7bc:	0e 94 a4 04 	call	0x948	; 0x948 <get_spi_ss>
}
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	08 95       	ret

000007c4 <port_init_direction>:


void port_init_direction(void)
{
	/*in-out setup */
	PORTA.DIR = 0x00;
     7c4:	10 92 00 06 	sts	0x0600, r1
	PORTB.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm;
     7c8:	8f e0       	ldi	r24, 0x0F	; 15
     7ca:	80 93 20 06 	sts	0x0620, r24
	PORTC.DIR = PIN0_bm | PIN4_bm | PIN5_bm | PIN7_bm;
     7ce:	81 eb       	ldi	r24, 0xB1	; 177
     7d0:	80 93 40 06 	sts	0x0640, r24
	PORTD.DIR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm  | PIN5_bm;
     7d4:	8f e3       	ldi	r24, 0x3F	; 63
     7d6:	80 93 60 06 	sts	0x0660, r24
	PORTE.DIR = 0x00;
     7da:	a0 e8       	ldi	r26, 0x80	; 128
     7dc:	b6 e0       	ldi	r27, 0x06	; 6
     7de:	1c 92       	st	X, r1
	PORTF.DIR = 0x00;
     7e0:	e0 ea       	ldi	r30, 0xA0	; 160
     7e2:	f6 e0       	ldi	r31, 0x06	; 6
     7e4:	10 82       	st	Z, r1
	
	
	PORTF.PIN0CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     7e6:	80 89       	ldd	r24, Z+16	; 0x10
     7e8:	88 61       	ori	r24, 0x18	; 24
     7ea:	80 8b       	std	Z+16, r24	; 0x10
	PORTF.PIN1CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     7ec:	81 89       	ldd	r24, Z+17	; 0x11
     7ee:	88 61       	ori	r24, 0x18	; 24
     7f0:	81 8b       	std	Z+17, r24	; 0x11
	PORTF.PIN2CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     7f2:	82 89       	ldd	r24, Z+18	; 0x12
     7f4:	88 61       	ori	r24, 0x18	; 24
     7f6:	82 8b       	std	Z+18, r24	; 0x12
	PORTF.PIN3CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     7f8:	83 89       	ldd	r24, Z+19	; 0x13
     7fa:	88 61       	ori	r24, 0x18	; 24
     7fc:	83 8b       	std	Z+19, r24	; 0x13
	PORTF.PIN4CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
     7fe:	84 89       	ldd	r24, Z+20	; 0x14
     800:	88 61       	ori	r24, 0x18	; 24
     802:	84 8b       	std	Z+20, r24	; 0x14
	PORTF.PIN5CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
     804:	85 89       	ldd	r24, Z+21	; 0x15
     806:	88 61       	ori	r24, 0x18	; 24
     808:	85 8b       	std	Z+21, r24	; 0x15
	PORTF.PIN6CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
     80a:	86 89       	ldd	r24, Z+22	; 0x16
     80c:	88 61       	ori	r24, 0x18	; 24
     80e:	86 8b       	std	Z+22, r24	; 0x16
	PORTF.PIN7CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg
     810:	87 89       	ldd	r24, Z+23	; 0x17
     812:	88 61       	ori	r24, 0x18	; 24
     814:	87 8b       	std	Z+23, r24	; 0x17

	PORTE.PIN0CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     816:	50 96       	adiw	r26, 0x10	; 16
     818:	8c 91       	ld	r24, X
     81a:	50 97       	sbiw	r26, 0x10	; 16
     81c:	88 61       	ori	r24, 0x18	; 24
     81e:	50 96       	adiw	r26, 0x10	; 16
     820:	8c 93       	st	X, r24
     822:	50 97       	sbiw	r26, 0x10	; 16
	PORTE.PIN1CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     824:	51 96       	adiw	r26, 0x11	; 17
     826:	8c 91       	ld	r24, X
     828:	51 97       	sbiw	r26, 0x11	; 17
     82a:	88 61       	ori	r24, 0x18	; 24
     82c:	51 96       	adiw	r26, 0x11	; 17
     82e:	8c 93       	st	X, r24
     830:	51 97       	sbiw	r26, 0x11	; 17
	PORTE.PIN2CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     832:	52 96       	adiw	r26, 0x12	; 18
     834:	8c 91       	ld	r24, X
     836:	52 97       	sbiw	r26, 0x12	; 18
     838:	88 61       	ori	r24, 0x18	; 24
     83a:	52 96       	adiw	r26, 0x12	; 18
     83c:	8c 93       	st	X, r24
     83e:	52 97       	sbiw	r26, 0x12	; 18
	PORTE.PIN3CTRL |= PORT_OPC_PULLUP_gc; // pullup , both edg	
     840:	53 96       	adiw	r26, 0x13	; 19
     842:	8c 91       	ld	r24, X
     844:	53 97       	sbiw	r26, 0x13	; 19
     846:	88 61       	ori	r24, 0x18	; 24
     848:	53 96       	adiw	r26, 0x13	; 19
     84a:	8c 93       	st	X, r24
     84c:	08 95       	ret

0000084e <port_init_value>:

}

void port_init_value(void)
{
	PORTB.OUTCLR = PIN0_bm;
     84e:	e0 e2       	ldi	r30, 0x20	; 32
     850:	f6 e0       	ldi	r31, 0x06	; 6
     852:	41 e0       	ldi	r20, 0x01	; 1
     854:	46 83       	std	Z+6, r20	; 0x06
	PORTB.OUTCLR = PIN1_bm;
     856:	32 e0       	ldi	r19, 0x02	; 2
     858:	36 83       	std	Z+6, r19	; 0x06
	PORTB.OUTCLR = PIN2_bm;
     85a:	24 e0       	ldi	r18, 0x04	; 4
     85c:	26 83       	std	Z+6, r18	; 0x06
	PORTB.OUTCLR = PIN3_bm;
     85e:	98 e0       	ldi	r25, 0x08	; 8
     860:	96 83       	std	Z+6, r25	; 0x06
	
	PORTC.OUTSET = PIN4_bm;
     862:	e0 e4       	ldi	r30, 0x40	; 64
     864:	f6 e0       	ldi	r31, 0x06	; 6
     866:	80 e1       	ldi	r24, 0x10	; 16
     868:	85 83       	std	Z+5, r24	; 0x05
	PORTC.OUTCLR = PIN5_bm;
     86a:	50 e2       	ldi	r21, 0x20	; 32
     86c:	56 83       	std	Z+6, r21	; 0x06
	PORTC.OUTCLR = PIN7_bm;
     86e:	50 e8       	ldi	r21, 0x80	; 128
     870:	56 83       	std	Z+6, r21	; 0x06

	PORTD.OUTCLR = PIN0_bm;
     872:	e0 e6       	ldi	r30, 0x60	; 96
     874:	f6 e0       	ldi	r31, 0x06	; 6
     876:	46 83       	std	Z+6, r20	; 0x06
	PORTD.OUTCLR = PIN1_bm;
     878:	36 83       	std	Z+6, r19	; 0x06
	PORTD.OUTCLR = PIN2_bm;
     87a:	26 83       	std	Z+6, r18	; 0x06
	PORTD.OUTCLR = PIN3_bm;
     87c:	96 83       	std	Z+6, r25	; 0x06
	PORTD.OUTCLR = PIN4_bm;
     87e:	86 83       	std	Z+6, r24	; 0x06
     880:	08 95       	ret

00000882 <port_init>:
	
}

void port_init(void)
{	
	port_init_direction();
     882:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <port_init_direction>
	port_init_value();
     886:	0c 94 27 04 	jmp	0x84e	; 0x84e <port_init_value>

0000088a <get_door_lock_test>:
}

u8 get_door_lock_test(void)
{
	return (PORTA.IN & PIN2_bm) ? false : true;
     88a:	e0 e0       	ldi	r30, 0x00	; 0
     88c:	f6 e0       	ldi	r31, 0x06	; 6
     88e:	80 85       	ldd	r24, Z+8	; 0x08
     890:	82 fb       	bst	r24, 2
     892:	88 27       	eor	r24, r24
     894:	80 f9       	bld	r24, 0
}
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	89 27       	eor	r24, r25
     89a:	08 95       	ret

0000089c <get_door_unlock_test>:


u8 get_door_unlock_test(void)
{
	return (PORTA.IN & PIN1_bm) ? false : true;
     89c:	e0 e0       	ldi	r30, 0x00	; 0
     89e:	f6 e0       	ldi	r31, 0x06	; 6
     8a0:	80 85       	ldd	r24, Z+8	; 0x08
     8a2:	86 95       	lsr	r24
     8a4:	81 70       	andi	r24, 0x01	; 1
}
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	89 27       	eor	r24, r25
     8aa:	08 95       	ret

000008ac <get_extern_door_lock>:

u8 get_extern_door_lock(void)
{
	//return (PORTA.IN & PIN3_bm) ? false : true;
	return (PORTA.IN & PIN3_bm) ? true : false;
     8ac:	e0 e0       	ldi	r30, 0x00	; 0
     8ae:	f6 e0       	ldi	r31, 0x06	; 6
     8b0:	80 85       	ldd	r24, Z+8	; 0x08
}
     8b2:	83 fb       	bst	r24, 3
     8b4:	88 27       	eor	r24, r24
     8b6:	80 f9       	bld	r24, 0
     8b8:	08 95       	ret

000008ba <get_internal_door_lock>:

u8 get_internal_door_lock(void)
{
	//return (PORTA.IN & PIN4_bm) ? false : true;
	return (PORTA.IN & PIN4_bm) ? true : false;
     8ba:	e0 e0       	ldi	r30, 0x00	; 0
     8bc:	f6 e0       	ldi	r31, 0x06	; 6
     8be:	80 85       	ldd	r24, Z+8	; 0x08
}
     8c0:	82 95       	swap	r24
     8c2:	81 70       	andi	r24, 0x01	; 1
     8c4:	08 95       	ret

000008c6 <set_buzzer>:


void set_buzzer(u8 set)
{
	if(set == true)
     8c6:	81 30       	cpi	r24, 0x01	; 1
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <set_buzzer+0xa>
		PORTC.OUTSET = PIN0_bm;
     8ca:	80 93 45 06 	sts	0x0645, r24
     8ce:	08 95       	ret
	else		
		PORTC.OUTCLR = PIN0_bm;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 46 06 	sts	0x0646, r24
     8d6:	08 95       	ret

000008d8 <set_room_light>:
}

void set_room_light(u8 set)
{
	if(set == true)
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	21 f4       	brne	.+8      	; 0x8e4 <set_room_light+0xc>
		PORTB.OUTSET = PIN1_bm;
     8dc:	82 e0       	ldi	r24, 0x02	; 2
     8de:	80 93 25 06 	sts	0x0625, r24
     8e2:	08 95       	ret
	else
		PORTB.OUTCLR = PIN1_bm;
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	80 93 26 06 	sts	0x0626, r24
     8ea:	08 95       	ret

000008ec <set_cabin_leftdoor>:
}

void set_cabin_leftdoor(DOOR_OPER oper)
{
	if(oper == OPEN)
     8ec:	81 11       	cpse	r24, r1
     8ee:	05 c0       	rjmp	.+10     	; 0x8fa <set_cabin_leftdoor+0xe>
	{
		PORTB.OUTSET = PIN3_bm;
     8f0:	88 e0       	ldi	r24, 0x08	; 8
     8f2:	80 93 25 06 	sts	0x0625, r24
		PORTB.OUTCLR = PIN2_bm;
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	13 c0       	rjmp	.+38     	; 0x920 <set_cabin_leftdoor+0x34>
	}
	else if(oper == CLOSE)
     8fa:	81 30       	cpi	r24, 0x01	; 1
     8fc:	21 f4       	brne	.+8      	; 0x906 <set_cabin_leftdoor+0x1a>
	{
		PORTB.OUTSET = PIN2_bm;
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	80 93 25 06 	sts	0x0625, r24
     904:	0c c0       	rjmp	.+24     	; 0x91e <set_cabin_leftdoor+0x32>
		PORTB.OUTCLR = PIN3_bm;
	}
	else if(oper == STOP)
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	39 f4       	brne	.+14     	; 0x918 <set_cabin_leftdoor+0x2c>
	{
		PORTB.OUTSET = PIN2_bm;
     90a:	84 e0       	ldi	r24, 0x04	; 4
     90c:	80 93 25 06 	sts	0x0625, r24
		PORTB.OUTSET = PIN3_bm;
     910:	88 e0       	ldi	r24, 0x08	; 8
     912:	80 93 25 06 	sts	0x0625, r24
     916:	08 95       	ret
	}
	else
	{
		PORTB.OUTCLR = PIN2_bm;
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	80 93 26 06 	sts	0x0626, r24
		PORTB.OUTCLR = PIN3_bm;
     91e:	88 e0       	ldi	r24, 0x08	; 8
     920:	80 93 26 06 	sts	0x0626, r24
     924:	08 95       	ret

00000926 <get_gdoa>:
	return (PORTC.IN & PIN1_bm) ? false : true;
}

u8 get_gdoa(void)
{
	return (PORTA.IN & PIN7_bm) ? true : false;
     926:	e0 e0       	ldi	r30, 0x00	; 0
     928:	f6 e0       	ldi	r31, 0x06	; 6
     92a:	80 85       	ldd	r24, Z+8	; 0x08
}
     92c:	88 1f       	adc	r24, r24
     92e:	88 27       	eor	r24, r24
     930:	88 1f       	adc	r24, r24
     932:	08 95       	ret

00000934 <set_spi_ss>:
	return (PORTC.IN & PIN3_bm) ? true : false;
}

void set_spi_ss(u8 set)
{
	if(set == true)
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	21 f4       	brne	.+8      	; 0x940 <set_spi_ss+0xc>
		PORTC.OUTSET = PIN4_bm;
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	80 93 45 06 	sts	0x0645, r24
     93e:	08 95       	ret
	else
		PORTC.OUTCLR = PIN4_bm;
     940:	80 e1       	ldi	r24, 0x10	; 16
     942:	80 93 46 06 	sts	0x0646, r24
     946:	08 95       	ret

00000948 <get_spi_ss>:
}

u8 get_spi_ss(void)
{
	return (PORTC.IN & PIN4_bm) ? true : false;
     948:	e0 e4       	ldi	r30, 0x40	; 64
     94a:	f6 e0       	ldi	r31, 0x06	; 6
     94c:	80 85       	ldd	r24, Z+8	; 0x08
}
     94e:	82 95       	swap	r24
     950:	81 70       	andi	r24, 0x01	; 1
     952:	08 95       	ret

00000954 <set_power_led>:
		PORTC.OUTCLR = PIN7_bm;
}

void set_power_led(u8 onoff)
{
	if(onoff == true)
     954:	81 30       	cpi	r24, 0x01	; 1
     956:	19 f4       	brne	.+6      	; 0x95e <set_power_led+0xa>
		PORTD.OUTSET = PIN0_bm;
     958:	80 93 65 06 	sts	0x0665, r24
     95c:	08 95       	ret
	else
		PORTD.OUTCLR = PIN0_bm;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 66 06 	sts	0x0666, r24
     964:	08 95       	ret

00000966 <set_communication_led>:
}

void set_communication_led(u8 onoff)
{
	if(onoff == true)
     966:	81 30       	cpi	r24, 0x01	; 1
     968:	21 f4       	brne	.+8      	; 0x972 <set_communication_led+0xc>
		PORTD.OUTSET = PIN1_bm;
     96a:	82 e0       	ldi	r24, 0x02	; 2
     96c:	80 93 65 06 	sts	0x0665, r24
     970:	08 95       	ret
	else
		PORTD.OUTCLR = PIN1_bm;
     972:	82 e0       	ldi	r24, 0x02	; 2
     974:	80 93 66 06 	sts	0x0666, r24
     978:	08 95       	ret

0000097a <set_out_door_state_led>:
}

void set_out_door_state_led(u8 state)
{
	if(state == true)
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	21 f4       	brne	.+8      	; 0x986 <set_out_door_state_led+0xc>
		PORTD.OUTSET = PIN2_bm;
     97e:	84 e0       	ldi	r24, 0x04	; 4
     980:	80 93 65 06 	sts	0x0665, r24
     984:	08 95       	ret
	else
		PORTD.OUTCLR = PIN2_bm;
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	80 93 66 06 	sts	0x0666, r24
     98c:	08 95       	ret

0000098e <set_in_door_state_led>:
}

void set_in_door_state_led(u8 state)
{
	if(state == true)
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	21 f4       	brne	.+8      	; 0x99a <set_in_door_state_led+0xc>
		PORTD.OUTSET = PIN3_bm;
     992:	88 e0       	ldi	r24, 0x08	; 8
     994:	80 93 65 06 	sts	0x0665, r24
     998:	08 95       	ret
	else
		PORTD.OUTCLR = PIN3_bm;
     99a:	88 e0       	ldi	r24, 0x08	; 8
     99c:	80 93 66 06 	sts	0x0666, r24
     9a0:	08 95       	ret

000009a2 <set_unlock_led>:
}

void set_unlock_led(u8 unlock)
{
	if(unlock == true)
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	21 f4       	brne	.+8      	; 0x9ae <set_unlock_led+0xc>
		PORTD.OUTSET = PIN4_bm;
     9a6:	80 e1       	ldi	r24, 0x10	; 16
     9a8:	80 93 65 06 	sts	0x0665, r24
     9ac:	08 95       	ret
	else
		PORTD.OUTCLR = PIN4_bm;
     9ae:	80 e1       	ldi	r24, 0x10	; 16
     9b0:	80 93 66 06 	sts	0x0666, r24
     9b4:	08 95       	ret

000009b6 <set_lock_led>:
}

void set_lock_led(u8 lock)
{
	if(lock == true)
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	21 f4       	brne	.+8      	; 0x9c2 <set_lock_led+0xc>
		PORTD.OUTSET = PIN5_bm;
     9ba:	80 e2       	ldi	r24, 0x20	; 32
     9bc:	80 93 65 06 	sts	0x0665, r24
     9c0:	08 95       	ret
	else
		PORTD.OUTCLR = PIN5_bm;
     9c2:	80 e2       	ldi	r24, 0x20	; 32
     9c4:	80 93 66 06 	sts	0x0666, r24
     9c8:	08 95       	ret

000009ca <get_test>:
}

u8 get_test(void)
{
	return PORTE.IN & 0x0f;
     9ca:	e0 e8       	ldi	r30, 0x80	; 128
     9cc:	f6 e0       	ldi	r31, 0x06	; 6
     9ce:	80 85       	ldd	r24, Z+8	; 0x08
}
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	08 95       	ret

000009d4 <get_freq>:



u8 get_freq(void)
{
	return PORTF.IN & 0x0f;
     9d4:	e0 ea       	ldi	r30, 0xA0	; 160
     9d6:	f6 e0       	ldi	r31, 0x06	; 6
     9d8:	80 85       	ldd	r24, Z+8	; 0x08
}
     9da:	8f 70       	andi	r24, 0x0F	; 15
     9dc:	08 95       	ret

000009de <get_dly>:

u8 get_dly(void)
{
	return (PORTF.IN & 0xf0) >> 4;
     9de:	e0 ea       	ldi	r30, 0xA0	; 160
     9e0:	f6 e0       	ldi	r31, 0x06	; 6
     9e2:	80 85       	ldd	r24, Z+8	; 0x08
}
     9e4:	82 95       	swap	r24
     9e6:	8f 70       	andi	r24, 0x0F	; 15
     9e8:	08 95       	ret

000009ea <delay_us>:

void delay_us(u8 time_us)		/* time delay for us(1~255 us) for 32MHz */
{
	register unsigned char i;

	for(i = 0; i < time_us; i++)			// 4 cycles
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	98 17       	cp	r25, r24
     9ee:	b9 f0       	breq	.+46     	; 0xa1e <delay_us+0x34>
	{ asm volatile("PUSH R0");			// 1 cycles
     9f0:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     9f2:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     9f4:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     9f6:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     9f8:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     9fa:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     9fc:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     9fe:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     a00:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     a02:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     a04:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     a06:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     a08:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     a0a:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     a0c:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     a0e:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     a10:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles
     a12:	0f 90       	pop	r0
		asm volatile("PUSH R0");			// 1 cycles
     a14:	0f 92       	push	r0
		asm volatile("NOP    ");			// 1 cycles
     a16:	00 00       	nop
		asm volatile("POP  R0");			// 2 cycles = total 32 cycles
     a18:	0f 90       	pop	r0

void delay_us(u8 time_us)		/* time delay for us(1~255 us) for 32MHz */
{
	register unsigned char i;

	for(i = 0; i < time_us; i++)			// 4 cycles
     a1a:	9f 5f       	subi	r25, 0xFF	; 255
     a1c:	e7 cf       	rjmp	.-50     	; 0x9ec <delay_us+0x2>
		asm volatile("POP  R0");			// 2 cycles
		asm volatile("PUSH R0");			// 1 cycles
		asm volatile("NOP    ");			// 1 cycles
		asm volatile("POP  R0");			// 2 cycles = total 32 cycles
	}
}
     a1e:	08 95       	ret

00000a20 <delay_ms>:

void delay_ms(u16 time_ms)		/* time delay for ms(1~65535 ms) for 32MHz */
{
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	8c 01       	movw	r16, r24
	register unsigned int i;

	for(i = 0; i < time_ms; i++)
     a2a:	c0 e0       	ldi	r28, 0x00	; 0
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
     a2e:	c0 17       	cp	r28, r16
     a30:	d1 07       	cpc	r29, r17
     a32:	71 f0       	breq	.+28     	; 0xa50 <delay_ms+0x30>
	{ 
		delay_us(250);
     a34:	8a ef       	ldi	r24, 0xFA	; 250
     a36:	0e 94 f5 04 	call	0x9ea	; 0x9ea <delay_us>
		delay_us(250);
     a3a:	8a ef       	ldi	r24, 0xFA	; 250
     a3c:	0e 94 f5 04 	call	0x9ea	; 0x9ea <delay_us>
		delay_us(250);
     a40:	8a ef       	ldi	r24, 0xFA	; 250
     a42:	0e 94 f5 04 	call	0x9ea	; 0x9ea <delay_us>
		delay_us(250);
     a46:	8a ef       	ldi	r24, 0xFA	; 250
     a48:	0e 94 f5 04 	call	0x9ea	; 0x9ea <delay_us>

void delay_ms(u16 time_ms)		/* time delay for ms(1~65535 ms) for 32MHz */
{
	register unsigned int i;

	for(i = 0; i < time_ms; i++)
     a4c:	21 96       	adiw	r28, 0x01	; 1
     a4e:	ef cf       	rjmp	.-34     	; 0xa2e <delay_ms+0xe>
		delay_us(250);
		delay_us(250);
		delay_us(250);
		delay_us(250);
	}
}
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	08 95       	ret

00000a5a <setClockTo32MHz>:


void setClockTo32MHz() 
{
	CCP = CCP_IOREG_gc;              // disable register security for oscillator update
     a5a:	88 ed       	ldi	r24, 0xD8	; 216
     a5c:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;       // enable 32MHz oscillator
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm)); // wait for oscillator to be ready
     a64:	80 91 51 00 	lds	r24, 0x0051
     a68:	81 ff       	sbrs	r24, 1
     a6a:	fc cf       	rjmp	.-8      	; 0xa64 <setClockTo32MHz+0xa>
	CCP = CCP_IOREG_gc;              // disable register security for clock update
     a6c:	88 ed       	ldi	r24, 0xD8	; 216
     a6e:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc; // switch to 32MHz clock
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	80 93 40 00 	sts	0x0040, r24
     a76:	08 95       	ret

00000a78 <set_freq>:




void set_freq(void)
{
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	27 97       	sbiw	r28, 0x07	; 7
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	de bf       	out	0x3e, r29	; 62
	volatile u16 	level;
	volatile u16 	temperature;
	

	//fr = 0x00;//get_freq();
	fr = ~get_freq()  & 0x0f;
     a86:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <get_freq>
     a8a:	80 95       	com	r24
     a8c:	8f 70       	andi	r24, 0x0F	; 15
     a8e:	8f 83       	std	Y+7, r24	; 0x07

	frq = 0x66ac;
     a90:	8c ea       	ldi	r24, 0xAC	; 172
     a92:	96 e6       	ldi	r25, 0x66	; 102
     a94:	8d 83       	std	Y+5, r24	; 0x05
     a96:	9e 83       	std	Y+6, r25	; 0x06

	eeprom_read_block((void*)&gTele_env,(void*) 0x000,sizeof(tele_env_t));
     a98:	47 e6       	ldi	r20, 0x67	; 103
     a9a:	50 e0       	ldi	r21, 0x00	; 0
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
     aa0:	88 e6       	ldi	r24, 0x68	; 104
     aa2:	91 e2       	ldi	r25, 0x21	; 33
     aa4:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__eerd_block_x64a3u>

	frq += gTele_env.ctl_data.adj_freq;
     aa8:	2d 81       	ldd	r18, Y+5	; 0x05
     aaa:	3e 81       	ldd	r19, Y+6	; 0x06
     aac:	80 91 68 21 	lds	r24, 0x2168
     ab0:	90 91 69 21 	lds	r25, 0x2169
     ab4:	82 0f       	add	r24, r18
     ab6:	93 1f       	adc	r25, r19
     ab8:	8d 83       	std	Y+5, r24	; 0x05
     aba:	9e 83       	std	Y+6, r25	; 0x06
	#endif



	
	frq += (fr * 0x003f);
     abc:	8d 81       	ldd	r24, Y+5	; 0x05
     abe:	9e 81       	ldd	r25, Y+6	; 0x06
     ac0:	2f 81       	ldd	r18, Y+7	; 0x07
     ac2:	3f e3       	ldi	r19, 0x3F	; 63
     ac4:	23 9f       	mul	r18, r19
     ac6:	80 0d       	add	r24, r0
     ac8:	91 1d       	adc	r25, r1
     aca:	11 24       	eor	r1, r1
     acc:	8d 83       	std	Y+5, r24	; 0x05
     ace:	9e 83       	std	Y+6, r25	; 0x06

	offset = 0x0339 - 0;
     ad0:	89 e3       	ldi	r24, 0x39	; 57
     ad2:	93 e0       	ldi	r25, 0x03	; 3
     ad4:	8b 83       	std	Y+3, r24	; 0x03
     ad6:	9c 83       	std	Y+4, r25	; 0x04
	
	level = 13 - (offset / 0x0c);
     ad8:	8b 81       	ldd	r24, Y+3	; 0x03
     ada:	9c 81       	ldd	r25, Y+4	; 0x04
     adc:	6c e0       	ldi	r22, 0x0C	; 12
     ade:	70 e0       	ldi	r23, 0x00	; 0
     ae0:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__udivmodhi4>
     ae4:	8d e0       	ldi	r24, 0x0D	; 13
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	9c 01       	movw	r18, r24
     aea:	26 1b       	sub	r18, r22
     aec:	37 0b       	sbc	r19, r23
     aee:	29 83       	std	Y+1, r18	; 0x01
     af0:	3a 83       	std	Y+2, r19	; 0x02
	

	if(offset & 0x8000)
     af2:	2b 81       	ldd	r18, Y+3	; 0x03
     af4:	3c 81       	ldd	r19, Y+4	; 0x04
     af6:	37 ff       	sbrs	r19, 7
     af8:	03 c0       	rjmp	.+6      	; 0xb00 <set_freq+0x88>
	level = 13;
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	9a 83       	std	Y+2, r25	; 0x02
     afe:	07 c0       	rjmp	.+14     	; 0xb0e <set_freq+0x96>
	else if((offset / 0x0c)>13)
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	88 3a       	cpi	r24, 0xA8	; 168
     b06:	91 05       	cpc	r25, r1
     b08:	10 f0       	brcs	.+4      	; 0xb0e <set_freq+0x96>
	level = 0;
     b0a:	19 82       	std	Y+1, r1	; 0x01
     b0c:	1a 82       	std	Y+2, r1	; 0x02
	//26867
	cc1101_set_freq(frq);
     b0e:	8d 81       	ldd	r24, Y+5	; 0x05
     b10:	9e 81       	ldd	r25, Y+6	; 0x06
     b12:	0e 94 03 03 	call	0x606	; 0x606 <cc1101_set_freq>
}
     b16:	27 96       	adiw	r28, 0x07	; 7
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	de bf       	out	0x3e, r29	; 62
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <cc1101_tx>:




u8 cc1101_tx(u8 * data , u8 length,u8 th)
{
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	ec 01       	movw	r28, r24
     b2c:	16 2f       	mov	r17, r22
     b2e:	04 2f       	mov	r16, r20
	int i;

	set_freq();
     b30:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
	
	cc1101_rtx_reg_set(1); // rx
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 8f 02 	call	0x51e	; 0x51e <cc1101_rtx_reg_set>
	//led_flasher(10,500);
	cc1101_carrier_wave_setup();
     b3a:	0e 94 08 03 	call	0x610	; 0x610 <cc1101_carrier_wave_setup>
	cc1100_cfg_gdo0(0x0e);
     b3e:	6e e0       	ldi	r22, 0x0E	; 14
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>

	cc1100_cmd_idle();
     b46:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
	cc1100_cmd_flush_rx();
     b4a:	8a e3       	ldi	r24, 0x3A	; 58
     b4c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
	cc1100_cmd_calibrate();
     b50:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cc1100_cmd_calibrate>
	cc1100_cmd_rx();
     b54:	84 e3       	ldi	r24, 0x34	; 52
     b56:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
	
	PORTA.PIN7CTRL = 0x18; // pullup , both edge
     b5a:	88 e1       	ldi	r24, 0x18	; 24
     b5c:	80 93 17 06 	sts	0x0617, r24
	
	delay_ms(10);
     b60:	8a e0       	ldi	r24, 0x0A	; 10
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>

	if(PORTA.IN & 0x80)
     b68:	80 91 08 06 	lds	r24, 0x0608
     b6c:	87 fd       	sbrc	r24, 7
     b6e:	20 c0       	rjmp	.+64     	; 0xbb0 <cc1101_tx+0x8e>
			return CARRIER_SENSE_DETECT;
		}

	}

	PORTA.PIN7CTRL = 0x00;
     b70:	10 92 17 06 	sts	0x0617, r1


	cc1101_rtx_reg_set(0);
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	0e 94 8f 02 	call	0x51e	; 0x51e <cc1101_rtx_reg_set>
	cc1101_carrier_wave_setup();
     b7a:	0e 94 08 03 	call	0x610	; 0x610 <cc1101_carrier_wave_setup>
	cc1100_cmd_idle();
     b7e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
	cc1100_cmd_calibrate();
     b82:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cc1100_cmd_calibrate>
	tx_fifo_write(data,length);
     b86:	61 2f       	mov	r22, r17
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	ce 01       	movw	r24, r28
     b8c:	0e 94 c3 02 	call	0x586	; 0x586 <tx_fifo_write>
	
	cc1100_write_reg(CC1100_REG_MCSM1,0x00);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	87 e1       	ldi	r24, 0x17	; 23
     b94:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_cfg_gdo0(0x09);
     b98:	69 e0       	ldi	r22, 0x09	; 9
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>



	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
     ba0:	66 e0       	ldi	r22, 0x06	; 6
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_cmd_tx();
     ba8:	85 e3       	ldi	r24, 0x35	; 53
     baa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
	while(!get_gdoa());	//data send start
     bae:	06 c0       	rjmp	.+12     	; 0xbbc <cc1101_tx+0x9a>
	
	delay_ms(10);

	if(PORTA.IN & 0x80)
	{
		cc1100_cmd_idle();
     bb0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
		
		if(th == 0)
     bb4:	01 11       	cpse	r16, r1
     bb6:	dc cf       	rjmp	.-72     	; 0xb70 <cc1101_tx+0x4e>
		{
			return CARRIER_SENSE_DETECT;
     bb8:	85 e5       	ldi	r24, 0x55	; 85
     bba:	09 c0       	rjmp	.+18     	; 0xbce <cc1101_tx+0xac>



	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
	cc1100_cmd_tx();
	while(!get_gdoa());	//data send start
     bbc:	0e 94 93 04 	call	0x926	; 0x926 <get_gdoa>
     bc0:	88 23       	and	r24, r24
     bc2:	e1 f3       	breq	.-8      	; 0xbbc <cc1101_tx+0x9a>
	while(get_gdoa());		//data send end
     bc4:	0e 94 93 04 	call	0x926	; 0x926 <get_gdoa>
     bc8:	81 11       	cpse	r24, r1
     bca:	fc cf       	rjmp	.-8      	; 0xbc4 <cc1101_tx+0xa2>
	{
	//	_delay_ms(500);	
	}

	
	return 1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
}
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	08 95       	ret

00000bd8 <__vector_67>:

//#define WOR


ISR(PORTA_INT1_vect)
{
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1


}
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <__vector_3>:

ISR(PORTC_INT1_vect)
{
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1


}
     bf6:	0f 90       	pop	r0
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	0f 90       	pop	r0
     bfc:	1f 90       	pop	r1
     bfe:	18 95       	reti

00000c00 <cc1101_rx>:


#define sleep() __asm__ __volatile__ ("sleep")

u8 cc1101_rx(u8 * data,u8 * rssi, u8 * lqi, u8 rx_type)
{
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	1f 92       	push	r1
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	5c 01       	movw	r10, r24
     c1a:	8b 01       	movw	r16, r22
     c1c:	7a 01       	movw	r14, r20
	//int cnt_wait_syn_ack=0;
	u8 length;
	u8 RX_STATUS = RX_FIFO_NONE;
	
	cc1100_cmd_idle();
     c1e:	29 83       	std	Y+1, r18	; 0x01
     c20:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
	set_freq();
     c24:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>

	
	cc1101_rtx_reg_set(1);
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	0e 94 8f 02 	call	0x51e	; 0x51e <cc1101_rtx_reg_set>
	cc1101_carrier_wave_setup();
     c2e:	0e 94 08 03 	call	0x610	; 0x610 <cc1101_carrier_wave_setup>
	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
     c32:	66 e0       	ldi	r22, 0x06	; 6
     c34:	82 e0       	ldi	r24, 0x02	; 2
     c36:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>

	cc1100_cmd_idle();
     c3a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
	cc1100_cmd_flush_rx();
     c3e:	8a e3       	ldi	r24, 0x3A	; 58
     c40:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
	cc1100_cmd_calibrate();
     c44:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cc1100_cmd_calibrate>
	cc1100_cmd_rx();
     c48:	84 e3       	ldi	r24, 0x34	; 52
     c4a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
	
	if(rx_type == RX_NOMAL)
     c4e:	29 81       	ldd	r18, Y+1	; 0x01
     c50:	22 30       	cpi	r18, 0x02	; 2
     c52:	09 f0       	breq	.+2      	; 0xc56 <cc1101_rx+0x56>
     c54:	4e c0       	rjmp	.+156    	; 0xcf2 <cc1101_rx+0xf2>
	{
		cnt_wait_syn_ack=0;
     c56:	10 92 26 20 	sts	0x2026, r1
     c5a:	10 92 27 20 	sts	0x2027, r1
		while(get_gdoa() == false)
     c5e:	0e 94 93 04 	call	0x926	; 0x926 <get_gdoa>
     c62:	81 11       	cpse	r24, r1
     c64:	06 c0       	rjmp	.+12     	; 0xc72 <cc1101_rx+0x72>
		{
			//_delay_ms(1);
			if(cnt_wait_syn_ack > 50)
     c66:	80 91 26 20 	lds	r24, 0x2026
     c6a:	90 91 27 20 	lds	r25, 0x2027
     c6e:	c3 97       	sbiw	r24, 0x33	; 51
     c70:	b4 f3       	brlt	.-20     	; 0xc5e <cc1101_rx+0x5e>
				break;
			}

		}
		
		cnt_wait_syn_ack = 0;
     c72:	10 92 26 20 	sts	0x2026, r1
     c76:	10 92 27 20 	sts	0x2027, r1

u8 cc1101_rx(u8 * data,u8 * rssi, u8 * lqi, u8 rx_type)
{
	//int cnt_wait_syn_ack=0;
	u8 length;
	u8 RX_STATUS = RX_FIFO_NONE;
     c7a:	d1 2c       	mov	r13, r1
		
		cnt_wait_syn_ack = 0;
		
		while(1)
		{
			if(get_gdoa()==true || RX_STATUS==RX_FIFO_MAKING || RX_STATUS==RX_FIFO_COMPLETE)
     c7c:	0e 94 93 04 	call	0x926	; 0x926 <get_gdoa>
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	21 f0       	breq	.+8      	; 0xc8c <cc1101_rx+0x8c>
     c84:	8f ef       	ldi	r24, 0xFF	; 255
     c86:	8d 0d       	add	r24, r13
     c88:	82 30       	cpi	r24, 0x02	; 2
     c8a:	c0 f4       	brcc	.+48     	; 0xcbc <cc1101_rx+0xbc>
			{
				
				if(get_gdoa() == false || RX_STATUS==RX_FIFO_COMPLETE)
     c8c:	0e 94 93 04 	call	0x926	; 0x926 <get_gdoa>
     c90:	88 23       	and	r24, r24
     c92:	19 f0       	breq	.+6      	; 0xc9a <cc1101_rx+0x9a>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	d8 12       	cpse	r13, r24
     c98:	13 c0       	rjmp	.+38     	; 0xcc0 <cc1101_rx+0xc0>
				{
					if((cc1100_status_crc_lqi() & 0x80))
     c9a:	83 e3       	ldi	r24, 0x33	; 51
     c9c:	0e 94 57 02 	call	0x4ae	; 0x4ae <cc1100_read_status>
     ca0:	87 ff       	sbrs	r24, 7
     ca2:	11 c0       	rjmp	.+34     	; 0xcc6 <cc1101_rx+0xc6>
					{
						length = rx_fifo_read(data,rssi,lqi);
     ca4:	a7 01       	movw	r20, r14
     ca6:	b8 01       	movw	r22, r16
     ca8:	c5 01       	movw	r24, r10
     caa:	0e 94 d5 02 	call	0x5aa	; 0x5aa <rx_fifo_read>
						cnt_wait_syn_ack = -1;
     cae:	2f ef       	ldi	r18, 0xFF	; 255
     cb0:	3f ef       	ldi	r19, 0xFF	; 255
     cb2:	20 93 26 20 	sts	0x2026, r18
     cb6:	30 93 27 20 	sts	0x2027, r19
						return length;
     cba:	7c c0       	rjmp	.+248    	; 0xdb4 <cc1101_rx+0x1b4>
     cbc:	d1 2c       	mov	r13, r1
     cbe:	05 c0       	rjmp	.+10     	; 0xcca <cc1101_rx+0xca>
						RX_STATUS=RX_FIFO_COMPLETE;
					}
				}
				else
				{
					RX_STATUS=RX_FIFO_MAKING;
     cc0:	dd 24       	eor	r13, r13
     cc2:	d3 94       	inc	r13
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <cc1101_rx+0xca>
						cnt_wait_syn_ack = -1;
						return length;
					}
					else
					{
						RX_STATUS=RX_FIFO_COMPLETE;
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	d8 2e       	mov	r13, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cca:	ef e3       	ldi	r30, 0x3F	; 63
     ccc:	ff e1       	ldi	r31, 0x1F	; 31
     cce:	31 97       	sbiw	r30, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <cc1101_rx+0xce>
     cd2:	00 c0       	rjmp	.+0      	; 0xcd4 <cc1101_rx+0xd4>
     cd4:	00 00       	nop
					RX_STATUS=RX_FIFO_MAKING;
				}
			}
			
			_delay_ms(1);
			if(cnt_wait_syn_ack > 100)
     cd6:	80 91 26 20 	lds	r24, 0x2026
     cda:	90 91 27 20 	lds	r25, 0x2027
     cde:	85 36       	cpi	r24, 0x65	; 101
     ce0:	91 05       	cpc	r25, r1
     ce2:	64 f2       	brlt	.-104    	; 0xc7c <cc1101_rx+0x7c>
			{
				cnt_wait_syn_ack = -1;
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	9f ef       	ldi	r25, 0xFF	; 255
     ce8:	80 93 26 20 	sts	0x2026, r24
     cec:	90 93 27 20 	sts	0x2027, r25
     cf0:	60 c0       	rjmp	.+192    	; 0xdb2 <cc1101_rx+0x1b2>
	}
	else
	{
		//WOR

		PORTA.INT1MASK=0x9E;
     cf2:	8e e9       	ldi	r24, 0x9E	; 158
     cf4:	80 93 0b 06 	sts	0x060B, r24
		PORTA.INTCTRL=0x0C;
     cf8:	8c e0       	ldi	r24, 0x0C	; 12
     cfa:	80 93 09 06 	sts	0x0609, r24
		cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
     cfe:	66 e0       	ldi	r22, 0x06	; 6
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_WOREVT1, 0x20);
     d06:	60 e2       	ldi	r22, 0x20	; 32
     d08:	8e e1       	ldi	r24, 0x1E	; 30
     d0a:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_WOREVT0, 0xff);
     d0e:	6f ef       	ldi	r22, 0xFF	; 255
     d10:	8f e1       	ldi	r24, 0x1F	; 31
     d12:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_WORCTRL, 0x08);
     d16:	68 e0       	ldi	r22, 0x08	; 8
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_MCSM0, 0x18);
     d1e:	68 e1       	ldi	r22, 0x18	; 24
     d20:	88 e1       	ldi	r24, 0x18	; 24
     d22:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
		cc1100_write_reg(CC1100_REG_MCSM2, 0x00);
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	86 e1       	ldi	r24, 0x16	; 22
     d2a:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
		
		cc1100_strobe_cmd(0x38);		//WOR COMMAND
     d2e:	88 e3       	ldi	r24, 0x38	; 56
     d30:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
		
		wdt_disable();
     d34:	9d ef       	ldi	r25, 0xFD	; 253
     d36:	88 ed       	ldi	r24, 0xD8	; 216
     d38:	08 b6       	in	r0, 0x38	; 56
     d3a:	18 be       	out	0x38, r1	; 56
     d3c:	84 bf       	out	0x34, r24	; 52
     d3e:	90 93 80 00 	sts	0x0080, r25
     d42:	08 be       	out	0x38, r0	; 56

		//SLEEP_CTRL |= SLEEP_SMODE_PDOWN_gc;
		SLEEP_CTRL |= SLEEP_SMODE_PSAVE_gc;
     d44:	80 91 48 00 	lds	r24, 0x0048
     d48:	86 60       	ori	r24, 0x06	; 6
     d4a:	80 93 48 00 	sts	0x0048, r24
		SLEEP_CTRL |= SLEEP_SEN_bm;
     d4e:	80 91 48 00 	lds	r24, 0x0048
     d52:	81 60       	ori	r24, 0x01	; 1
     d54:	80 93 48 00 	sts	0x0048, r24
		
		sleep();
     d58:	88 95       	sleep
		
		PORTA.INT1MASK=0x00;
     d5a:	10 92 0b 06 	sts	0x060B, r1

		wdt_enable(0x26);		//wdt timeout 4sec enable
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	97 e2       	ldi	r25, 0x27	; 39
     d62:	88 ed       	ldi	r24, 0xD8	; 216
     d64:	08 b6       	in	r0, 0x38	; 56
     d66:	18 be       	out	0x38, r1	; 56
     d68:	84 bf       	out	0x34, r24	; 52
     d6a:	90 93 80 00 	sts	0x0080, r25
     d6e:	20 91 82 00 	lds	r18, 0x0082
     d72:	21 fd       	sbrc	r18, 1
     d74:	fc cf       	rjmp	.-8      	; 0xd6e <cc1101_rx+0x16e>
     d76:	08 be       	out	0x38, r0	; 56
		
		#if 1
		if(get_door_lock_test()==true || get_door_unlock_test()==true || get_extern_door_lock()==false || get_internal_door_lock()==false)
     d78:	0e 94 45 04 	call	0x88a	; 0x88a <get_door_lock_test>
     d7c:	81 30       	cpi	r24, 0x01	; 1
     d7e:	11 f4       	brne	.+4      	; 0xd84 <cc1101_rx+0x184>
		{
			return 0x77;
     d80:	87 e7       	ldi	r24, 0x77	; 119
     d82:	18 c0       	rjmp	.+48     	; 0xdb4 <cc1101_rx+0x1b4>
		PORTA.INT1MASK=0x00;

		wdt_enable(0x26);		//wdt timeout 4sec enable
		
		#if 1
		if(get_door_lock_test()==true || get_door_unlock_test()==true || get_extern_door_lock()==false || get_internal_door_lock()==false)
     d84:	0e 94 4e 04 	call	0x89c	; 0x89c <get_door_unlock_test>
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	d1 f3       	breq	.-12     	; 0xd80 <cc1101_rx+0x180>
     d8c:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
     d90:	88 23       	and	r24, r24
     d92:	b1 f3       	breq	.-20     	; 0xd80 <cc1101_rx+0x180>
     d94:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
     d98:	88 23       	and	r24, r24
     d9a:	91 f3       	breq	.-28     	; 0xd80 <cc1101_rx+0x180>
		{
			return 0x77;
		}
		#endif
		
		if((cc1100_status_crc_lqi() & 0x80))
     d9c:	83 e3       	ldi	r24, 0x33	; 51
     d9e:	0e 94 57 02 	call	0x4ae	; 0x4ae <cc1100_read_status>
     da2:	87 ff       	sbrs	r24, 7
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <cc1101_rx+0x1b2>
		{
			length = rx_fifo_read(data,rssi,lqi);
     da6:	a7 01       	movw	r20, r14
     da8:	b8 01       	movw	r22, r16
     daa:	c5 01       	movw	r24, r10
     dac:	0e 94 d5 02 	call	0x5aa	; 0x5aa <rx_fifo_read>
			return length;
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <cc1101_rx+0x1b4>
		}
		
		return 0;
     db2:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
     db4:	0f 90       	pop	r0
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	08 95       	ret

00000dca <cc1101_tx_carrier>:


void cc1101_tx_carrier(void)
{

	cc1101_carrier_wave_setup();
     dca:	0e 94 08 03 	call	0x610	; 0x610 <cc1101_carrier_wave_setup>

	cc1100_cfg_txoff_mode(CC1100_TXOFF_MODE_STAY_TX);
     dce:	87 e1       	ldi	r24, 0x17	; 23
     dd0:	0e 94 9e 01 	call	0x33c	; 0x33c <cc1100_read_reg>
     dd4:	68 2f       	mov	r22, r24
     dd6:	6c 7f       	andi	r22, 0xFC	; 252
     dd8:	62 60       	ori	r22, 0x02	; 2
     dda:	87 e1       	ldi	r24, 0x17	; 23
     ddc:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_cfg_manchester_en(CC1100_MANCHESTER_DISABLE);
     de0:	82 e1       	ldi	r24, 0x12	; 18
     de2:	0e 94 9e 01 	call	0x33c	; 0x33c <cc1100_read_reg>
     de6:	68 2f       	mov	r22, r24
     de8:	67 7f       	andi	r22, 0xF7	; 247
     dea:	82 e1       	ldi	r24, 0x12	; 18
     dec:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_MDMCFG3,0x33);
     df0:	63 e3       	ldi	r22, 0x33	; 51
     df2:	81 e1       	ldi	r24, 0x11	; 17
     df4:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_cfg_mod_format(CC1100_MODULATION_ASK);
     df8:	82 e1       	ldi	r24, 0x12	; 18
     dfa:	0e 94 9e 01 	call	0x33c	; 0x33c <cc1100_read_reg>
     dfe:	68 2f       	mov	r22, r24
     e00:	6f 78       	andi	r22, 0x8F	; 143
     e02:	60 63       	ori	r22, 0x30	; 48
     e04:	82 e1       	ldi	r24, 0x12	; 18
     e06:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_write_reg(CC1100_REG_FREND0,0x10);
     e0a:	60 e1       	ldi	r22, 0x10	; 16
     e0c:	82 e2       	ldi	r24, 0x22	; 34
     e0e:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1100_cfg_gdo0(CC1100_GDOx_CLK_XOSC_1);
     e12:	60 e3       	ldi	r22, 0x30	; 48
     e14:	82 e0       	ldi	r24, 0x02	; 2
     e16:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>

	/* IDLE */
	cc1100_cmd_idle();
     e1a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
	/* MANCAL*/
	cc1100_cmd_calibrate();
     e1e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cc1100_cmd_calibrate>
	/* FS WAKEUP */
	cc1100_cmd_flush_tx();
     e22:	8b e3       	ldi	r24, 0x3B	; 59
     e24:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>

	cc1100_cfg_gdo0(0x0e);
     e28:	6e e0       	ldi	r22, 0x0E	; 14
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	//carrier_sense();

	cc1100_cmd_tx();
     e30:	85 e3       	ldi	r24, 0x35	; 53
     e32:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <cc1100_strobe_cmd>

00000e36 <timer_setup>:
	/* Set up Timer/Counter 0 to work from CPUCLK/64, with period 10000 and
	 * enable overflow interrupt.
	 */
	//TCC0.PER = 250;
	//TCC0.PER = 125;
	TCC0.PER = 500;
     e36:	e0 e0       	ldi	r30, 0x00	; 0
     e38:	f8 e0       	ldi	r31, 0x08	; 8
     e3a:	84 ef       	ldi	r24, 0xF4	; 244
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	86 a3       	std	Z+38, r24	; 0x26
     e40:	97 a3       	std	Z+39, r25	; 0x27
	TCC0.CTRLA = ( TCC0.CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_DIV64_gc;
     e42:	80 81       	ld	r24, Z
     e44:	80 7f       	andi	r24, 0xF0	; 240
     e46:	85 60       	ori	r24, 0x05	; 5
     e48:	80 83       	st	Z, r24
	TCC0.INTCTRLA = ( TCC0.INTCTRLA & ~TC0_OVFINTLVL_gm ) | TC_OVFINTLVL_MED_gc;
     e4a:	86 81       	ldd	r24, Z+6	; 0x06
     e4c:	8c 7f       	andi	r24, 0xFC	; 252
     e4e:	82 60       	ori	r24, 0x02	; 2
     e50:	86 83       	std	Z+6, r24	; 0x06
     e52:	08 95       	ret

00000e54 <__vector_14>:
volatile u8 gBuzzer;
volatile int deny_setup_id = 0;
volatile int timer_100ms_count=0;

ISR(TCC0_OVF_vect)
{
     e54:	1f 92       	push	r1
     e56:	0f 92       	push	r0
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	0f 92       	push	r0
     e5c:	11 24       	eor	r1, r1
     e5e:	0b b6       	in	r0, 0x3b	; 59
     e60:	0f 92       	push	r0
     e62:	2f 93       	push	r18
     e64:	3f 93       	push	r19
     e66:	4f 93       	push	r20
     e68:	5f 93       	push	r21
     e6a:	6f 93       	push	r22
     e6c:	7f 93       	push	r23
     e6e:	8f 93       	push	r24
     e70:	9f 93       	push	r25
     e72:	af 93       	push	r26
     e74:	bf 93       	push	r27
     e76:	ef 93       	push	r30
     e78:	ff 93       	push	r31
	if(send_timer > -1)
     e7a:	80 91 1e 20 	lds	r24, 0x201E
     e7e:	90 91 1f 20 	lds	r25, 0x201F
     e82:	97 fd       	sbrc	r25, 7
     e84:	09 c0       	rjmp	.+18     	; 0xe98 <__vector_14+0x44>
	{
		send_timer++;
     e86:	80 91 1e 20 	lds	r24, 0x201E
     e8a:	90 91 1f 20 	lds	r25, 0x201F
     e8e:	01 96       	adiw	r24, 0x01	; 1
     e90:	80 93 1e 20 	sts	0x201E, r24
     e94:	90 93 1f 20 	sts	0x201F, r25
		
	}
	
	if(cnt_wait_syn_ack > -1)
     e98:	80 91 26 20 	lds	r24, 0x2026
     e9c:	90 91 27 20 	lds	r25, 0x2027
     ea0:	97 fd       	sbrc	r25, 7
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <__vector_14+0x62>
	{
		cnt_wait_syn_ack++;
     ea4:	80 91 26 20 	lds	r24, 0x2026
     ea8:	90 91 27 20 	lds	r25, 0x2027
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	80 93 26 20 	sts	0x2026, r24
     eb2:	90 93 27 20 	sts	0x2027, r25
	}
	
	if(gEnv.beep_b_s_door_used == true)
     eb6:	80 91 f9 21 	lds	r24, 0x21F9
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	b1 f4       	brne	.+44     	; 0xeea <__vector_14+0x96>
	{
		if(buzzer_toggle == true)
     ebe:	80 91 67 21 	lds	r24, 0x2167
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	91 f4       	brne	.+36     	; 0xeea <__vector_14+0x96>
		{
			if(timer_1S_count == 0)
     ec6:	80 91 5c 21 	lds	r24, 0x215C
     eca:	90 91 5d 21 	lds	r25, 0x215D
     ece:	89 2b       	or	r24, r25
     ed0:	11 f4       	brne	.+4      	; 0xed6 <__vector_14+0x82>
	
}

void buzzer_on(u8 buz)
{
	set_buzzer(buz);
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	08 c0       	rjmp	.+16     	; 0xee6 <__vector_14+0x92>
		{
			if(timer_1S_count == 0)
			{
				buzzer_on(true);
			}
			else if(timer_1S_count == 500 )
     ed6:	80 91 5c 21 	lds	r24, 0x215C
     eda:	90 91 5d 21 	lds	r25, 0x215D
     ede:	84 3f       	cpi	r24, 0xF4	; 244
     ee0:	91 40       	sbci	r25, 0x01	; 1
     ee2:	19 f4       	brne	.+6      	; 0xeea <__vector_14+0x96>
	
}

void buzzer_on(u8 buz)
{
	set_buzzer(buz);
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_buzzer>
		}
	}
	
	
	//if(timer_100ms_count++ > 200)
	if(timer_100ms_count++ > 100)
     eea:	80 91 58 21 	lds	r24, 0x2158
     eee:	90 91 59 21 	lds	r25, 0x2159
     ef2:	9c 01       	movw	r18, r24
     ef4:	2f 5f       	subi	r18, 0xFF	; 255
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	20 93 58 21 	sts	0x2158, r18
     efc:	30 93 59 21 	sts	0x2159, r19
     f00:	85 36       	cpi	r24, 0x65	; 101
     f02:	91 05       	cpc	r25, r1
     f04:	14 f1       	brlt	.+68     	; 0xf4a <__vector_14+0xf6>
	{
		timer_100ms_count=0;
     f06:	10 92 58 21 	sts	0x2158, r1
     f0a:	10 92 59 21 	sts	0x2159, r1

		if(close_chk_e_door_count > -1)
     f0e:	80 91 2c 20 	lds	r24, 0x202C
     f12:	90 91 2d 20 	lds	r25, 0x202D
     f16:	97 fd       	sbrc	r25, 7
     f18:	09 c0       	rjmp	.+18     	; 0xf2c <__vector_14+0xd8>
		{
			close_chk_e_door_count++;
     f1a:	80 91 2c 20 	lds	r24, 0x202C
     f1e:	90 91 2d 20 	lds	r25, 0x202D
     f22:	01 96       	adiw	r24, 0x01	; 1
     f24:	80 93 2c 20 	sts	0x202C, r24
     f28:	90 93 2d 20 	sts	0x202D, r25
		}
		
		if(close_chk_i_door_count > -1)
     f2c:	80 91 2a 20 	lds	r24, 0x202A
     f30:	90 91 2b 20 	lds	r25, 0x202B
     f34:	97 fd       	sbrc	r25, 7
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <__vector_14+0xf6>
		{
			close_chk_i_door_count++;
     f38:	80 91 2a 20 	lds	r24, 0x202A
     f3c:	90 91 2b 20 	lds	r25, 0x202B
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	80 93 2a 20 	sts	0x202A, r24
     f46:	90 93 2b 20 	sts	0x202B, r25
	
	
	
	//if(timer_1S_count++ > 2777)		2777 ---> 1.6sec
	//if(timer_1S_count++ > 2000)
	if(timer_1S_count++ > 1000)
     f4a:	80 91 5c 21 	lds	r24, 0x215C
     f4e:	90 91 5d 21 	lds	r25, 0x215D
     f52:	9c 01       	movw	r18, r24
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	20 93 5c 21 	sts	0x215C, r18
     f5c:	30 93 5d 21 	sts	0x215D, r19
     f60:	89 3e       	cpi	r24, 0xE9	; 233
     f62:	93 40       	sbci	r25, 0x03	; 3
     f64:	0c f4       	brge	.+2      	; 0xf68 <__vector_14+0x114>
     f66:	f5 c0       	rjmp	.+490    	; 0x1152 <__vector_14+0x2fe>
			set_room_light(false);
		}
		#endif	

		
		timer_1S_count  = 0;
     f68:	10 92 5c 21 	sts	0x215C, r1
     f6c:	10 92 5d 21 	sts	0x215D, r1
		gGlobalTimer++;
     f70:	80 91 62 21 	lds	r24, 0x2162
     f74:	90 91 63 21 	lds	r25, 0x2163
     f78:	a0 91 64 21 	lds	r26, 0x2164
     f7c:	b0 91 65 21 	lds	r27, 0x2165
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	a1 1d       	adc	r26, r1
     f84:	b1 1d       	adc	r27, r1
     f86:	80 93 62 21 	sts	0x2162, r24
     f8a:	90 93 63 21 	sts	0x2163, r25
     f8e:	a0 93 64 21 	sts	0x2164, r26
     f92:	b0 93 65 21 	sts	0x2165, r27
		gGlobal500MsTimer++;
     f96:	80 91 5e 21 	lds	r24, 0x215E
     f9a:	90 91 5f 21 	lds	r25, 0x215F
     f9e:	a0 91 60 21 	lds	r26, 0x2160
     fa2:	b0 91 61 21 	lds	r27, 0x2161
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	a1 1d       	adc	r26, r1
     faa:	b1 1d       	adc	r27, r1
     fac:	80 93 5e 21 	sts	0x215E, r24
     fb0:	90 93 5f 21 	sts	0x215F, r25
     fb4:	a0 93 60 21 	sts	0x2160, r26
     fb8:	b0 93 61 21 	sts	0x2161, r27
		
		if(btn_door_lock_test_count > -1)
     fbc:	80 91 34 20 	lds	r24, 0x2034
     fc0:	90 91 35 20 	lds	r25, 0x2035
     fc4:	97 fd       	sbrc	r25, 7
     fc6:	09 c0       	rjmp	.+18     	; 0xfda <__vector_14+0x186>
			btn_door_lock_test_count++;
     fc8:	80 91 34 20 	lds	r24, 0x2034
     fcc:	90 91 35 20 	lds	r25, 0x2035
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	80 93 34 20 	sts	0x2034, r24
     fd6:	90 93 35 20 	sts	0x2035, r25
		
		
		if(sleep_cansel_count > -1)
     fda:	80 91 32 20 	lds	r24, 0x2032
     fde:	90 91 33 20 	lds	r25, 0x2033
     fe2:	97 fd       	sbrc	r25, 7
     fe4:	09 c0       	rjmp	.+18     	; 0xff8 <__vector_14+0x1a4>
			sleep_cansel_count++;
     fe6:	80 91 32 20 	lds	r24, 0x2032
     fea:	90 91 33 20 	lds	r25, 0x2033
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	80 93 32 20 	sts	0x2032, r24
     ff4:	90 93 33 20 	sts	0x2033, r25
			
		if(sleep_cansel_count > 10)
     ff8:	80 91 32 20 	lds	r24, 0x2032
     ffc:	90 91 33 20 	lds	r25, 0x2033
    1000:	0b 97       	sbiw	r24, 0x0b	; 11
    1002:	34 f0       	brlt	.+12     	; 0x1010 <__vector_14+0x1bc>
			sleep_cansel_count = -1;
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	9f ef       	ldi	r25, 0xFF	; 255
    1008:	80 93 32 20 	sts	0x2032, r24
    100c:	90 93 33 20 	sts	0x2033, r25
			
			
		if(lock_err_e_door_count > -1)
    1010:	80 91 30 20 	lds	r24, 0x2030
    1014:	90 91 31 20 	lds	r25, 0x2031
    1018:	97 fd       	sbrc	r25, 7
    101a:	09 c0       	rjmp	.+18     	; 0x102e <__vector_14+0x1da>
			lock_err_e_door_count++;
    101c:	80 91 30 20 	lds	r24, 0x2030
    1020:	90 91 31 20 	lds	r25, 0x2031
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	80 93 30 20 	sts	0x2030, r24
    102a:	90 93 31 20 	sts	0x2031, r25

		if(lock_err_i_door_count > -1)
    102e:	80 91 2e 20 	lds	r24, 0x202E
    1032:	90 91 2f 20 	lds	r25, 0x202F
    1036:	97 fd       	sbrc	r25, 7
    1038:	09 c0       	rjmp	.+18     	; 0x104c <__vector_14+0x1f8>
			lock_err_i_door_count++;
    103a:	80 91 2e 20 	lds	r24, 0x202E
    103e:	90 91 2f 20 	lds	r25, 0x202F
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	80 93 2e 20 	sts	0x202E, r24
    1048:	90 93 2f 20 	sts	0x202F, r25
		
		if(deny_setup_id < 600)
    104c:	80 91 5a 21 	lds	r24, 0x215A
    1050:	90 91 5b 21 	lds	r25, 0x215B
    1054:	88 35       	cpi	r24, 0x58	; 88
    1056:	92 40       	sbci	r25, 0x02	; 2
    1058:	4c f4       	brge	.+18     	; 0x106c <__vector_14+0x218>
			deny_setup_id++;
    105a:	80 91 5a 21 	lds	r24, 0x215A
    105e:	90 91 5b 21 	lds	r25, 0x215B
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	80 93 5a 21 	sts	0x215A, r24
    1068:	90 93 5b 21 	sts	0x215B, r25
		
		if(checkTwiceDoorWaitCount > -1)
    106c:	80 91 22 20 	lds	r24, 0x2022
    1070:	90 91 23 20 	lds	r25, 0x2023
    1074:	97 fd       	sbrc	r25, 7
    1076:	09 c0       	rjmp	.+18     	; 0x108a <__vector_14+0x236>
			checkTwiceDoorWaitCount++;
    1078:	80 91 22 20 	lds	r24, 0x2022
    107c:	90 91 23 20 	lds	r25, 0x2023
    1080:	01 96       	adiw	r24, 0x01	; 1
    1082:	80 93 22 20 	sts	0x2022, r24
    1086:	90 93 23 20 	sts	0x2023, r25
			
		if(lockActiveTime > -1)
    108a:	80 91 20 20 	lds	r24, 0x2020
    108e:	90 91 21 20 	lds	r25, 0x2021
    1092:	97 fd       	sbrc	r25, 7
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <__vector_14+0x254>
			lockActiveTime++;
    1096:	80 91 20 20 	lds	r24, 0x2020
    109a:	90 91 21 20 	lds	r25, 0x2021
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	80 93 20 20 	sts	0x2020, r24
    10a4:	90 93 21 20 	sts	0x2021, r25
		


		if(lockActiveTime > 2)
    10a8:	80 91 20 20 	lds	r24, 0x2020
    10ac:	90 91 21 20 	lds	r25, 0x2021
    10b0:	03 97       	sbiw	r24, 0x03	; 3
    10b2:	64 f0       	brlt	.+24     	; 0x10cc <__vector_14+0x278>
		{
			#ifndef UNLOCK_DEBUG
			set_cabin_leftdoor(STOP);
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
			set_cabin_leftdoor(STOP2);
    10ba:	83 e0       	ldi	r24, 0x03	; 3
    10bc:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
			lockActiveTime=-1;
    10c0:	8f ef       	ldi	r24, 0xFF	; 255
    10c2:	9f ef       	ldi	r25, 0xFF	; 255
    10c4:	80 93 20 20 	sts	0x2020, r24
    10c8:	90 93 21 20 	sts	0x2021, r25
			lockActiveTime=-1;
			#endif				
		}
		
		
		if(mentenece_mode > -1)
    10cc:	80 91 28 20 	lds	r24, 0x2028
    10d0:	90 91 29 20 	lds	r25, 0x2029
    10d4:	97 fd       	sbrc	r25, 7
    10d6:	3d c0       	rjmp	.+122    	; 0x1152 <__vector_14+0x2fe>
		{
			if(mentenece_mode == 0)
    10d8:	80 91 28 20 	lds	r24, 0x2028
    10dc:	90 91 29 20 	lds	r25, 0x2029
    10e0:	89 2b       	or	r24, r25
    10e2:	71 f4       	brne	.+28     	; 0x1100 <__vector_14+0x2ac>
			{
				set_unlock_led(true);
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
				
				if((~get_dly() & 0x0f)==0x06)
    10ea:	0e 94 ef 04 	call	0x9de	; 0x9de <get_dly>
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	80 95       	com	r24
    10f2:	90 95       	com	r25
    10f4:	8f 70       	andi	r24, 0x0F	; 15
    10f6:	99 27       	eor	r25, r25
    10f8:	06 97       	sbiw	r24, 0x06	; 6
    10fa:	b9 f4       	brne	.+46     	; 0x112a <__vector_14+0x2d6>
				{
					set_lock_led(true);
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	13 c0       	rjmp	.+38     	; 0x1126 <__vector_14+0x2d2>
				}
			}
			else if(mentenece_mode == 1)
    1100:	80 91 28 20 	lds	r24, 0x2028
    1104:	90 91 29 20 	lds	r25, 0x2029
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	79 f4       	brne	.+30     	; 0x112a <__vector_14+0x2d6>
			{
				set_unlock_led(false);
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
		
				if((~get_dly() & 0x0f)==0x06)
    1112:	0e 94 ef 04 	call	0x9de	; 0x9de <get_dly>
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	80 95       	com	r24
    111a:	90 95       	com	r25
    111c:	8f 70       	andi	r24, 0x0F	; 15
    111e:	99 27       	eor	r25, r25
    1120:	06 97       	sbiw	r24, 0x06	; 6
    1122:	19 f4       	brne	.+6      	; 0x112a <__vector_14+0x2d6>
				{
					set_lock_led(false);
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_lock_led>
				}
			}
			

			
			if(mentenece_mode == 1)
    112a:	80 91 28 20 	lds	r24, 0x2028
    112e:	90 91 29 20 	lds	r25, 0x2029
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	29 f4       	brne	.+10     	; 0x1140 <__vector_14+0x2ec>
			{
				mentenece_mode = 0; 
    1136:	10 92 28 20 	sts	0x2028, r1
    113a:	10 92 29 20 	sts	0x2029, r1
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <__vector_14+0x2fe>
			}
			else
			{
				mentenece_mode++;
    1140:	80 91 28 20 	lds	r24, 0x2028
    1144:	90 91 29 20 	lds	r25, 0x2029
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	80 93 28 20 	sts	0x2028, r24
    114e:	90 93 29 20 	sts	0x2029, r25
			}
			
		}
		
	}
}
    1152:	ff 91       	pop	r31
    1154:	ef 91       	pop	r30
    1156:	bf 91       	pop	r27
    1158:	af 91       	pop	r26
    115a:	9f 91       	pop	r25
    115c:	8f 91       	pop	r24
    115e:	7f 91       	pop	r23
    1160:	6f 91       	pop	r22
    1162:	5f 91       	pop	r21
    1164:	4f 91       	pop	r20
    1166:	3f 91       	pop	r19
    1168:	2f 91       	pop	r18
    116a:	0f 90       	pop	r0
    116c:	0b be       	out	0x3b, r0	; 59
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <sync_ack>:
/*
sync ack
*/

void sync_ack(void)
{
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	6c 97       	sbiw	r28, 0x1c	; 28
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	de bf       	out	0x3e, r29	; 62
	sync_t sync;
	
	sync.hdr.master_id = gMasterId;
    1186:	80 91 0a 22 	lds	r24, 0x220A
    118a:	90 91 0b 22 	lds	r25, 0x220B
    118e:	a0 91 0c 22 	lds	r26, 0x220C
    1192:	b0 91 0d 22 	lds	r27, 0x220D
    1196:	8e 83       	std	Y+6, r24	; 0x06
    1198:	9f 83       	std	Y+7, r25	; 0x07
    119a:	a8 87       	std	Y+8, r26	; 0x08
    119c:	b9 87       	std	Y+9, r27	; 0x09
	sync.hdr.slave_id = gEnv.id;
    119e:	80 91 ee 21 	lds	r24, 0x21EE
    11a2:	90 91 ef 21 	lds	r25, 0x21EF
    11a6:	a0 91 f0 21 	lds	r26, 0x21F0
    11aa:	b0 91 f1 21 	lds	r27, 0x21F1
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	9b 83       	std	Y+3, r25	; 0x03
    11b2:	ac 83       	std	Y+4, r26	; 0x04
    11b4:	bd 83       	std	Y+5, r27	; 0x05
	sync.hdr.payload = PAYLOAD_SYNC;
    11b6:	1c 86       	std	Y+12, r1	; 0x0c
	
	sync.reserve[0] = get_extern_door_lock();
    11b8:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    11bc:	8e 87       	std	Y+14, r24	; 0x0e
	sync.reserve[1] = get_internal_door_lock();
    11be:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    11c2:	8f 87       	std	Y+15, r24	; 0x0f
	sync.reserve[2] = gExternState == UNLOCK ? 1 : 0;
    11c4:	90 91 2d 22 	lds	r25, 0x222D
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	94 30       	cpi	r25, 0x04	; 4
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <sync_ack+0x58>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	88 8b       	std	Y+16, r24	; 0x10
	
	
	set_freq();
    11d2:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
	cc1101_tx(&sync,sizeof(sync_t),1);
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	6c e1       	ldi	r22, 0x1C	; 28
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
}
    11e2:	6c 96       	adiw	r28, 0x1c	; 28
    11e4:	cd bf       	out	0x3d, r28	; 61
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	08 95       	ret

000011ee <set_state_ack>:
/*
set_state_ack
*/

void set_state_ack(void)
{
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	6c 97       	sbiw	r28, 0x1c	; 28
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	de bf       	out	0x3e, r29	; 62
	set_t set;
	
	set.hdr.master_id = gMasterId;
    11fc:	80 91 0a 22 	lds	r24, 0x220A
    1200:	90 91 0b 22 	lds	r25, 0x220B
    1204:	a0 91 0c 22 	lds	r26, 0x220C
    1208:	b0 91 0d 22 	lds	r27, 0x220D
    120c:	8e 83       	std	Y+6, r24	; 0x06
    120e:	9f 83       	std	Y+7, r25	; 0x07
    1210:	a8 87       	std	Y+8, r26	; 0x08
    1212:	b9 87       	std	Y+9, r27	; 0x09
	set.hdr.slave_id = gEnv.id;
    1214:	80 91 ee 21 	lds	r24, 0x21EE
    1218:	90 91 ef 21 	lds	r25, 0x21EF
    121c:	a0 91 f0 21 	lds	r26, 0x21F0
    1220:	b0 91 f1 21 	lds	r27, 0x21F1
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	9b 83       	std	Y+3, r25	; 0x03
    1228:	ac 83       	std	Y+4, r26	; 0x04
    122a:	bd 83       	std	Y+5, r27	; 0x05
	set.hdr.payload = SET_STATE;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	8c 87       	std	Y+12, r24	; 0x0c
	
	set_freq();
    1230:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
	cc1101_tx(&set,sizeof(set_t),1);
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	6c e1       	ldi	r22, 0x1C	; 28
    1238:	ce 01       	movw	r24, r28
    123a:	01 96       	adiw	r24, 0x01	; 1
    123c:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
}
    1240:	6c 96       	adiw	r28, 0x1c	; 28
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <open_ack>:
/*
open_ack
*/

void open_ack(void)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	6c 97       	sbiw	r28, 0x1c	; 28
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	de bf       	out	0x3e, r29	; 62
	door_open_oper_t oper;
	
	oper.hdr.master_id = gMasterId;
    125a:	80 91 0a 22 	lds	r24, 0x220A
    125e:	90 91 0b 22 	lds	r25, 0x220B
    1262:	a0 91 0c 22 	lds	r26, 0x220C
    1266:	b0 91 0d 22 	lds	r27, 0x220D
    126a:	8e 83       	std	Y+6, r24	; 0x06
    126c:	9f 83       	std	Y+7, r25	; 0x07
    126e:	a8 87       	std	Y+8, r26	; 0x08
    1270:	b9 87       	std	Y+9, r27	; 0x09
	oper.hdr.slave_id = gEnv.id;
    1272:	80 91 ee 21 	lds	r24, 0x21EE
    1276:	90 91 ef 21 	lds	r25, 0x21EF
    127a:	a0 91 f0 21 	lds	r26, 0x21F0
    127e:	b0 91 f1 21 	lds	r27, 0x21F1
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	9b 83       	std	Y+3, r25	; 0x03
    1286:	ac 83       	std	Y+4, r26	; 0x04
    1288:	bd 83       	std	Y+5, r27	; 0x05
	oper.hdr.payload = PAYLOAD_DOOR_OPEN_OPER;
    128a:	89 e0       	ldi	r24, 0x09	; 9
    128c:	8c 87       	std	Y+12, r24	; 0x0c
	
	set_freq();
    128e:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
	cc1101_tx(&oper,sizeof(door_open_oper_t),1);
    1292:	41 e0       	ldi	r20, 0x01	; 1
    1294:	6c e1       	ldi	r22, 0x1C	; 28
    1296:	ce 01       	movw	r24, r28
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
	
}
    129e:	6c 96       	adiw	r28, 0x1c	; 28
    12a0:	cd bf       	out	0x3d, r28	; 61
    12a2:	de bf       	out	0x3e, r29	; 62
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <setup_ack>:
/*
setup_ack
*/

void setup_ack(u32 id)
{
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	6c 97       	sbiw	r28, 0x1c	; 28
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	de bf       	out	0x3e, r29	; 62
	setup_t setup;
	
	setup.hdr.master_id = gMasterId;
    12bc:	00 91 0a 22 	lds	r16, 0x220A
    12c0:	10 91 0b 22 	lds	r17, 0x220B
    12c4:	20 91 0c 22 	lds	r18, 0x220C
    12c8:	30 91 0d 22 	lds	r19, 0x220D
    12cc:	0e 83       	std	Y+6, r16	; 0x06
    12ce:	1f 83       	std	Y+7, r17	; 0x07
    12d0:	28 87       	std	Y+8, r18	; 0x08
    12d2:	39 87       	std	Y+9, r19	; 0x09
	setup.hdr.slave_id = id;
    12d4:	6a 83       	std	Y+2, r22	; 0x02
    12d6:	7b 83       	std	Y+3, r23	; 0x03
    12d8:	8c 83       	std	Y+4, r24	; 0x04
    12da:	9d 83       	std	Y+5, r25	; 0x05
	setup.hdr.payload = PAYLOAD_SETUP_ID;
    12dc:	88 e0       	ldi	r24, 0x08	; 8
    12de:	8c 87       	std	Y+12, r24	; 0x0c
	
	
	set_freq();
    12e0:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
	cc1101_tx(&setup,sizeof(setup_t),1);
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	6c e1       	ldi	r22, 0x1C	; 28
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
}
    12f0:	6c 96       	adiw	r28, 0x1c	; 28
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	df 91       	pop	r29
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	08 95       	ret

00001300 <check_id_send>:




void check_id_send(void)
{
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	6c 97       	sbiw	r28, 0x1c	; 28
    130a:	cd bf       	out	0x3d, r28	; 61
    130c:	de bf       	out	0x3e, r29	; 62
	sync_version_t sync_version;
	
	sync_version.hdr.master_id = gMasterId;
    130e:	80 91 0a 22 	lds	r24, 0x220A
    1312:	90 91 0b 22 	lds	r25, 0x220B
    1316:	a0 91 0c 22 	lds	r26, 0x220C
    131a:	b0 91 0d 22 	lds	r27, 0x220D
    131e:	8e 83       	std	Y+6, r24	; 0x06
    1320:	9f 83       	std	Y+7, r25	; 0x07
    1322:	a8 87       	std	Y+8, r26	; 0x08
    1324:	b9 87       	std	Y+9, r27	; 0x09
	sync_version.hdr.slave_id = gEnv.id;
    1326:	80 91 ee 21 	lds	r24, 0x21EE
    132a:	90 91 ef 21 	lds	r25, 0x21EF
    132e:	a0 91 f0 21 	lds	r26, 0x21F0
    1332:	b0 91 f1 21 	lds	r27, 0x21F1
    1336:	8a 83       	std	Y+2, r24	; 0x02
    1338:	9b 83       	std	Y+3, r25	; 0x03
    133a:	ac 83       	std	Y+4, r26	; 0x04
    133c:	bd 83       	std	Y+5, r27	; 0x05
	sync_version.hdr.payload = PAYLOAD_SYNC_VERSION;
    133e:	8f e0       	ldi	r24, 0x0F	; 15
    1340:	8c 87       	std	Y+12, r24	; 0x0c
	
	//sync.reserve[0] = get_extern_door_lock();
	//sync.reserve[1] = get_internal_door_lock();
	//sync.reserve[2] = gExternState == UNLOCK ? 1 : 0;
	sync_version.version_id[0] = 'v';
    1342:	86 e7       	ldi	r24, 0x76	; 118
    1344:	8e 87       	std	Y+14, r24	; 0x0e
	sync_version.version_id[1] = 'e';
    1346:	85 e6       	ldi	r24, 0x65	; 101
    1348:	8f 87       	std	Y+15, r24	; 0x0f
	sync_version.version_id[2] = 'r';
    134a:	82 e7       	ldi	r24, 0x72	; 114
    134c:	88 8b       	std	Y+16, r24	; 0x10
	
	sync_version.ver_major	= UNLOCK_VERSION_MAJOR;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	89 8b       	std	Y+17, r24	; 0x11
	sync_version.ver_sub	= UNLOCK_VERSION_SUB;
    1352:	8a 8b       	std	Y+18, r24	; 0x12
	sync_version.ver_sub_sub	= UNLOCK_VERSION_SUB_SUB;
    1354:	85 e0       	ldi	r24, 0x05	; 5
    1356:	8b 8b       	std	Y+19, r24	; 0x13
	
	
	set_freq();
    1358:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
	cc1101_tx(&sync_version,sizeof(sync_version),1);
    135c:	41 e0       	ldi	r20, 0x01	; 1
    135e:	6c e1       	ldi	r22, 0x1C	; 28
    1360:	ce 01       	movw	r24, r28
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
}
    1368:	6c 96       	adiw	r28, 0x1c	; 28
    136a:	cd bf       	out	0x3d, r28	; 61
    136c:	de bf       	out	0x3e, r29	; 62
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <checkRootvantype>:


void checkRootvantype(void)
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
	if(gEnv.unlockRootvanWaveUsed==true)
    1378:	80 91 fa 21 	lds	r24, 0x21FA
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	99 f4       	brne	.+38     	; 0x13a6 <checkRootvantype+0x32>
    1380:	c5 e0       	ldi	r28, 0x05	; 5
    1382:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(int i=0;i<5;i++)
		{
			set_communication_led(true);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	0e 94 b3 04 	call	0x966	; 0x966 <set_communication_led>
			delay_ms(50);
    138a:	82 e3       	ldi	r24, 0x32	; 50
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>
			set_communication_led(false);
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0e 94 b3 04 	call	0x966	; 0x966 <set_communication_led>
			delay_ms(50);			
    1398:	82 e3       	ldi	r24, 0x32	; 50
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>
    13a0:	21 97       	sbiw	r28, 0x01	; 1

void checkRootvantype(void)
{
	if(gEnv.unlockRootvanWaveUsed==true)
	{
		for(int i=0;i<5;i++)
    13a2:	20 97       	sbiw	r28, 0x00	; 0
    13a4:	79 f7       	brne	.-34     	; 0x1384 <checkRootvantype+0x10>
			set_communication_led(false);
			delay_ms(50);			
		}
	}
	
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <wait_input_freq_adjust>:



void wait_input_freq_adjust(void)
{
    13ac:	cf 93       	push	r28
    13ae:	df 93       	push	r29
    13b0:	cc e2       	ldi	r28, 0x2C	; 44
    13b2:	d1 e0       	ldi	r29, 0x01	; 1
	int time_cnt=0;
	while(time_cnt < 300)
	{
		wdt_reset();
    13b4:	a8 95       	wdr
		delay_ms(10);
    13b6:	8a e0       	ldi	r24, 0x0A	; 10
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>
		time_cnt++;

		if(get_door_unlock_test()==true)
    13be:	0e 94 4e 04 	call	0x89c	; 0x89c <get_door_unlock_test>
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	c1 f4       	brne	.+48     	; 0x13f6 <wait_input_freq_adjust+0x4a>
		{
			
			gTele_env.ctl_data.adj_freq++;
    13c6:	80 91 68 21 	lds	r24, 0x2168
    13ca:	90 91 69 21 	lds	r25, 0x2169
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	80 93 68 21 	sts	0x2168, r24
    13d4:	90 93 69 21 	sts	0x2169, r25

			}
			#endif
			
			
			tele_env_save(&gTele_env);
    13d8:	88 e6       	ldi	r24, 0x68	; 104
    13da:	91 e2       	ldi	r25, 0x21	; 33
    13dc:	0e 94 89 03 	call	0x712	; 0x712 <tele_env_save>
			
			set_communication_led(true);
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 b3 04 	call	0x966	; 0x966 <set_communication_led>
			delay_ms(100);
    13e6:	84 e6       	ldi	r24, 0x64	; 100
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>
			set_communication_led(false);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 b3 04 	call	0x966	; 0x966 <set_communication_led>
    13f4:	1b c0       	rjmp	.+54     	; 0x142c <wait_input_freq_adjust+0x80>
		}
		else if(get_door_lock_test()==true)
    13f6:	0e 94 45 04 	call	0x88a	; 0x88a <get_door_lock_test>
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	b9 f4       	brne	.+46     	; 0x142c <wait_input_freq_adjust+0x80>
		{
			
			gTele_env.ctl_data.adj_freq--;
    13fe:	80 91 68 21 	lds	r24, 0x2168
    1402:	90 91 69 21 	lds	r25, 0x2169
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	80 93 68 21 	sts	0x2168, r24
    140c:	90 93 69 21 	sts	0x2169, r25
					gTele_env.ctl_data.freq_add_sub = 0x80;
				}
			}
			#endif
			
			tele_env_save(&gTele_env);
    1410:	88 e6       	ldi	r24, 0x68	; 104
    1412:	91 e2       	ldi	r25, 0x21	; 33
    1414:	0e 94 89 03 	call	0x712	; 0x712 <tele_env_save>
			
			set_out_door_state_led(true);
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	0e 94 bd 04 	call	0x97a	; 0x97a <set_out_door_state_led>
			delay_ms(100);
    141e:	84 e6       	ldi	r24, 0x64	; 100
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>
			set_out_door_state_led(false);
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	0e 94 bd 04 	call	0x97a	; 0x97a <set_out_door_state_led>
    142c:	21 97       	sbiw	r28, 0x01	; 1


void wait_input_freq_adjust(void)
{
	int time_cnt=0;
	while(time_cnt < 300)
    142e:	20 97       	sbiw	r28, 0x00	; 0
    1430:	09 f0       	breq	.+2      	; 0x1434 <wait_input_freq_adjust+0x88>
    1432:	c0 cf       	rjmp	.-128    	; 0x13b4 <wait_input_freq_adjust+0x8>
			delay_ms(100);
			set_out_door_state_led(false);
		}

	}
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <test_wave_mode>:




void test_wave_mode(u8 test_mode)
{
    143a:	c8 2f       	mov	r28, r24
	int i;
	int old,new;


	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
    143c:	66 e0       	ldi	r22, 0x06	; 6
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
	cc1101_init_reg();
    1444:	0e 94 7d 02 	call	0x4fa	; 0x4fa <cc1101_init_reg>
	cc1101_8PATABLE_write_reg();
    1448:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
	cc1100_cfg_gdo0(CC1100_GDOx_SYNC_WORD);
    144c:	66 e0       	ldi	r22, 0x06	; 6
    144e:	82 e0       	ldi	r24, 0x02	; 2
    1450:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>


	while(1)
	{
		for(i = 0 ; i < 1 ; i++)
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	23 2b       	or	r18, r19
    145a:	a9 f4       	brne	.+42     	; 0x1486 <test_wave_mode+0x4c>
    145c:	2f ef       	ldi	r18, 0xFF	; 255
    145e:	81 ee       	ldi	r24, 0xE1	; 225
    1460:	94 e0       	ldi	r25, 0x04	; 4
    1462:	21 50       	subi	r18, 0x01	; 1
    1464:	80 40       	sbci	r24, 0x00	; 0
    1466:	90 40       	sbci	r25, 0x00	; 0
    1468:	e1 f7       	brne	.-8      	; 0x1462 <test_wave_mode+0x28>
    146a:	00 c0       	rjmp	.+0      	; 0x146c <test_wave_mode+0x32>
    146c:	00 00       	nop
    146e:	2f ef       	ldi	r18, 0xFF	; 255
    1470:	81 ee       	ldi	r24, 0xE1	; 225
    1472:	94 e0       	ldi	r25, 0x04	; 4
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	80 40       	sbci	r24, 0x00	; 0
    1478:	90 40       	sbci	r25, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <test_wave_mode+0x3a>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <test_wave_mode+0x44>
    147e:	00 00       	nop
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	e9 cf       	rjmp	.-46     	; 0x1458 <test_wave_mode+0x1e>
			//set_emg_led(0);
			_delay_ms(50);
		}
		

		if(test_mode==0x0d)
    1486:	cd 30       	cpi	r28, 0x0D	; 13
    1488:	c9 f4       	brne	.+50     	; 0x14bc <test_wave_mode+0x82>
		{
			cc1100_cmd_idle();
    148a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
			set_freq();
    148e:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
			delay_ms(100);
    1492:	84 e6       	ldi	r24, 0x64	; 100
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>


			cc1101_rtx_reg_set(0); // tx
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	0e 94 8f 02 	call	0x51e	; 0x51e <cc1101_rtx_reg_set>
			cc1100_write_reg(CC1100_REG_PKTCTRL0,0x22);	//random TX mode
    14a0:	62 e2       	ldi	r22, 0x22	; 34
    14a2:	88 e0       	ldi	r24, 0x08	; 8
    14a4:	0e 94 c0 01 	call	0x380	; 0x380 <cc1100_write_reg>
			cc1101_carrier_wave_setup();
    14a8:	0e 94 08 03 	call	0x610	; 0x610 <cc1101_carrier_wave_setup>
			cc1100_cmd_idle();
    14ac:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
			cc1100_cmd_calibrate();
    14b0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <cc1100_cmd_calibrate>
			cc1100_cmd_tx();
    14b4:	85 e3       	ldi	r24, 0x35	; 53
    14b6:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <cc1100_strobe_cmd>
    14ba:	0c c0       	rjmp	.+24     	; 0x14d4 <test_wave_mode+0x9a>
		}
		else if(test_mode==0x0e)
    14bc:	ce 30       	cpi	r28, 0x0E	; 14
    14be:	51 f4       	brne	.+20     	; 0x14d4 <test_wave_mode+0x9a>
		{
			cc1100_cmd_idle();
    14c0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
			set_freq();
    14c4:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
			delay_ms(100);
    14c8:	84 e6       	ldi	r24, 0x64	; 100
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 10 05 	call	0xa20	; 0xa20 <delay_ms>
			cc1101_tx_carrier();
    14d0:	0e 94 e5 06 	call	0xdca	; 0xdca <cc1101_tx_carrier>



		
		//delay_ms(3000);
		wait_input_freq_adjust();
    14d4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <wait_input_freq_adjust>

		cc1100_cmd_idle();
    14d8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
		//delay_ms(3000);
		wait_input_freq_adjust();
    14dc:	0e 94 d6 09 	call	0x13ac	; 0x13ac <wait_input_freq_adjust>
    14e0:	b9 cf       	rjmp	.-142    	; 0x1454 <test_wave_mode+0x1a>

000014e2 <comm_led>:
	int i;
	
	
	for(i = 0 ; i < 1 ; i++)
	{
		set_communication_led(1);
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	0e 94 b3 04 	call	0x966	; 0x966 <set_communication_led>
    14e8:	2f ef       	ldi	r18, 0xFF	; 255
    14ea:	81 ee       	ldi	r24, 0xE1	; 225
    14ec:	94 e0       	ldi	r25, 0x04	; 4
    14ee:	21 50       	subi	r18, 0x01	; 1
    14f0:	80 40       	sbci	r24, 0x00	; 0
    14f2:	90 40       	sbci	r25, 0x00	; 0
    14f4:	e1 f7       	brne	.-8      	; 0x14ee <comm_led+0xc>
    14f6:	00 c0       	rjmp	.+0      	; 0x14f8 <comm_led+0x16>
    14f8:	00 00       	nop
		_delay_ms(50);
		set_communication_led(0);
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	0e 94 b3 04 	call	0x966	; 0x966 <set_communication_led>
    1500:	2f ef       	ldi	r18, 0xFF	; 255
    1502:	81 ee       	ldi	r24, 0xE1	; 225
    1504:	94 e0       	ldi	r25, 0x04	; 4
    1506:	21 50       	subi	r18, 0x01	; 1
    1508:	80 40       	sbci	r24, 0x00	; 0
    150a:	90 40       	sbci	r25, 0x00	; 0
    150c:	e1 f7       	brne	.-8      	; 0x1506 <comm_led+0x24>
    150e:	00 c0       	rjmp	.+0      	; 0x1510 <comm_led+0x2e>
    1510:	00 00       	nop
    1512:	08 95       	ret

00001514 <door_status>:
F,G,D,E -> A door status
PAYLOAD_DOOR_STATUS
*/

u8 door_status(u8 type,u8 status)
{
    1514:	3f 92       	push	r3
    1516:	4f 92       	push	r4
    1518:	5f 92       	push	r5
    151a:	6f 92       	push	r6
    151c:	7f 92       	push	r7
    151e:	8f 92       	push	r8
    1520:	9f 92       	push	r9
    1522:	af 92       	push	r10
    1524:	bf 92       	push	r11
    1526:	cf 92       	push	r12
    1528:	df 92       	push	r13
    152a:	ef 92       	push	r14
    152c:	ff 92       	push	r15
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	6e 97       	sbiw	r28, 0x1e	; 30
    153c:	cd bf       	out	0x3d, r28	; 61
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	98 2e       	mov	r9, r24
    1542:	86 2e       	mov	r8, r22
	u32 GetTime=0;
	u8	th;
	u8	carrier_sen_check=0;	
	
	
	for(int i=0;i<7;i++)
    1544:	00 e0       	ldi	r16, 0x00	; 0
    1546:	10 e0       	ldi	r17, 0x00	; 0
				pt_data[0] = 0x0d;		//output power -20dBm
				cc1101_8PATABLE_write_reg();
			}
			else if(i>5)
			{
				pt_data[0] = 0x60;		//output power 0dBm
    1548:	30 e6       	ldi	r19, 0x60	; 96
    154a:	73 2e       	mov	r7, r19
				pt_data[0] = 0x1d;		//output power -15dBm
				cc1101_8PATABLE_write_reg();
			}
			else if(i==5)
			{
				pt_data[0] = 0x0d;		//output power -20dBm
    154c:	4d e0       	ldi	r20, 0x0D	; 13
    154e:	64 2e       	mov	r6, r20
				pt_data[0] = 0x34;		//output power -10dBm
				cc1101_8PATABLE_write_reg();
			}
			else if(i==4)
			{
				pt_data[0] = 0x1d;		//output power -15dBm
    1550:	5d e1       	ldi	r21, 0x1D	; 29
    1552:	55 2e       	mov	r5, r21
		
		if(gEnv.unlockRootvanWaveUsed == true)
		{
			if(i==3)
			{
				pt_data[0] = 0x34;		//output power -10dBm
    1554:	64 e3       	ldi	r22, 0x34	; 52
    1556:	46 2e       	mov	r4, r22
		
		
		
		door.hdr.master_id = gMasterId;
		door.hdr.slave_id = gEnv.id;
		door.hdr.payload = PAYLOAD_DOOR_STATUS;
    1558:	7b e0       	ldi	r23, 0x0B	; 11
    155a:	37 2e       	mov	r3, r23
			}
			cc1100_cmd_idle();
			
			if(send_timer > GetTime)
			{
				send_timer = -1;
    155c:	aa 24       	eor	r10, r10
    155e:	aa 94       	dec	r10
    1560:	ba 2c       	mov	r11, r10
	u8	carrier_sen_check=0;	
	
	
	for(int i=0;i<7;i++)
	{
		wdt_reset();
    1562:	a8 95       	wdr
		
		if(gEnv.unlockRootvanWaveUsed == true)
    1564:	80 91 fa 21 	lds	r24, 0x21FA
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	c9 f4       	brne	.+50     	; 0x159e <door_status+0x8a>
		{
			if(i==3)
    156c:	03 30       	cpi	r16, 0x03	; 3
    156e:	11 05       	cpc	r17, r1
    1570:	19 f4       	brne	.+6      	; 0x1578 <door_status+0x64>
			{
				pt_data[0] = 0x34;		//output power -10dBm
    1572:	40 92 16 20 	sts	0x2016, r4
    1576:	11 c0       	rjmp	.+34     	; 0x159a <door_status+0x86>
				cc1101_8PATABLE_write_reg();
			}
			else if(i==4)
    1578:	04 30       	cpi	r16, 0x04	; 4
    157a:	11 05       	cpc	r17, r1
    157c:	19 f4       	brne	.+6      	; 0x1584 <door_status+0x70>
			{
				pt_data[0] = 0x1d;		//output power -15dBm
    157e:	50 92 16 20 	sts	0x2016, r5
    1582:	0b c0       	rjmp	.+22     	; 0x159a <door_status+0x86>
				cc1101_8PATABLE_write_reg();
			}
			else if(i==5)
    1584:	05 30       	cpi	r16, 0x05	; 5
    1586:	11 05       	cpc	r17, r1
    1588:	19 f4       	brne	.+6      	; 0x1590 <door_status+0x7c>
			{
				pt_data[0] = 0x0d;		//output power -20dBm
    158a:	60 92 16 20 	sts	0x2016, r6
    158e:	05 c0       	rjmp	.+10     	; 0x159a <door_status+0x86>
				cc1101_8PATABLE_write_reg();
			}
			else if(i>5)
    1590:	06 30       	cpi	r16, 0x06	; 6
    1592:	11 05       	cpc	r17, r1
    1594:	21 f4       	brne	.+8      	; 0x159e <door_status+0x8a>
			{
				pt_data[0] = 0x60;		//output power 0dBm
    1596:	70 92 16 20 	sts	0x2016, r7
				cc1101_8PATABLE_write_reg();
    159a:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
		}
		
		
		
		
		door.hdr.master_id = gMasterId;
    159e:	80 91 0a 22 	lds	r24, 0x220A
    15a2:	90 91 0b 22 	lds	r25, 0x220B
    15a6:	a0 91 0c 22 	lds	r26, 0x220C
    15aa:	b0 91 0d 22 	lds	r27, 0x220D
    15ae:	8e 83       	std	Y+6, r24	; 0x06
    15b0:	9f 83       	std	Y+7, r25	; 0x07
    15b2:	a8 87       	std	Y+8, r26	; 0x08
    15b4:	b9 87       	std	Y+9, r27	; 0x09
		door.hdr.slave_id = gEnv.id;
    15b6:	80 91 ee 21 	lds	r24, 0x21EE
    15ba:	90 91 ef 21 	lds	r25, 0x21EF
    15be:	a0 91 f0 21 	lds	r26, 0x21F0
    15c2:	b0 91 f1 21 	lds	r27, 0x21F1
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	9b 83       	std	Y+3, r25	; 0x03
    15ca:	ac 83       	std	Y+4, r26	; 0x04
    15cc:	bd 83       	std	Y+5, r27	; 0x05
		door.hdr.payload = PAYLOAD_DOOR_STATUS;
    15ce:	3c 86       	std	Y+12, r3	; 0x0c
		door.status = status;
    15d0:	8e 86       	std	Y+14, r8	; 0x0e
		door.door = type;
    15d2:	9d 86       	std	Y+13, r9	; 0x0d
		else
		{
			th=0;
		}

		set_freq();
    15d4:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
		door.hdr.slave_id = gEnv.id;
		door.hdr.payload = PAYLOAD_DOOR_STATUS;
		door.status = status;
		door.door = type;

		if(i==4 || i==6)
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	c8 01       	movw	r24, r16
    15dc:	8d 7f       	andi	r24, 0xFD	; 253
    15de:	04 97       	sbiw	r24, 0x04	; 4
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <door_status+0xd0>
    15e2:	40 e0       	ldi	r20, 0x00	; 0
			th=0;
		}

		set_freq();
		
		carrier_sen_check = cc1101_tx(&door,sizeof(door_status_t),th);
    15e4:	6c e1       	ldi	r22, 0x1C	; 28
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
		
		if(carrier_sen_check == CARRIER_SENSE_DETECT)
    15ee:	85 35       	cpi	r24, 0x55	; 85
    15f0:	39 f4       	brne	.+14     	; 0x1600 <door_status+0xec>
		{
			GetTime = 1000;
    15f2:	28 ee       	ldi	r18, 0xE8	; 232
    15f4:	c2 2e       	mov	r12, r18
    15f6:	23 e0       	ldi	r18, 0x03	; 3
    15f8:	d2 2e       	mov	r13, r18
    15fa:	e1 2c       	mov	r14, r1
    15fc:	f1 2c       	mov	r15, r1
    15fe:	05 c0       	rjmp	.+10     	; 0x160a <door_status+0xf6>
		}
		else
		{
			GetTime = RF_TIME_OUT;
    1600:	9a e0       	ldi	r25, 0x0A	; 10
    1602:	c9 2e       	mov	r12, r25
    1604:	d1 2c       	mov	r13, r1
    1606:	e1 2c       	mov	r14, r1
    1608:	f1 2c       	mov	r15, r1
		}		
		
		send_timer = 0;
    160a:	10 92 1e 20 	sts	0x201E, r1
    160e:	10 92 1f 20 	sts	0x201F, r1
		
		while(1)
		{
			
			set_freq();
    1612:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
			length = cc1101_rx((u8 *)&door,&rssi,&lqi,RX_NOMAL);
    1616:	22 e0       	ldi	r18, 0x02	; 2
    1618:	ae 01       	movw	r20, r28
    161a:	43 5e       	subi	r20, 0xE3	; 227
    161c:	5f 4f       	sbci	r21, 0xFF	; 255
    161e:	be 01       	movw	r22, r28
    1620:	62 5e       	subi	r22, 0xE2	; 226
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	0e 94 00 06 	call	0xc00	; 0xc00 <cc1101_rx>
			if(length > 0 )
    162c:	88 23       	and	r24, r24
    162e:	f1 f0       	breq	.+60     	; 0x166c <door_status+0x158>
			{
				if(door.hdr.slave_id == gEnv.id && door.hdr.payload == PAYLOAD_DOOR_STATUS)
    1630:	80 91 ee 21 	lds	r24, 0x21EE
    1634:	90 91 ef 21 	lds	r25, 0x21EF
    1638:	a0 91 f0 21 	lds	r26, 0x21F0
    163c:	b0 91 f1 21 	lds	r27, 0x21F1
    1640:	4a 81       	ldd	r20, Y+2	; 0x02
    1642:	5b 81       	ldd	r21, Y+3	; 0x03
    1644:	6c 81       	ldd	r22, Y+4	; 0x04
    1646:	7d 81       	ldd	r23, Y+5	; 0x05
    1648:	48 17       	cp	r20, r24
    164a:	59 07       	cpc	r21, r25
    164c:	6a 07       	cpc	r22, r26
    164e:	7b 07       	cpc	r23, r27
    1650:	69 f4       	brne	.+26     	; 0x166c <door_status+0x158>
    1652:	8c 85       	ldd	r24, Y+12	; 0x0c
    1654:	8b 30       	cpi	r24, 0x0B	; 11
    1656:	51 f4       	brne	.+20     	; 0x166c <door_status+0x158>
				{
					send_timer = -1;
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	9f ef       	ldi	r25, 0xFF	; 255
    165c:	80 93 1e 20 	sts	0x201E, r24
    1660:	90 93 1f 20 	sts	0x201F, r25
					comm_led();
    1664:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <comm_led>
					return true;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	1a c0       	rjmp	.+52     	; 0x16a0 <door_status+0x18c>
				}
			}
			cc1100_cmd_idle();
    166c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
			
			if(send_timer > GetTime)
    1670:	80 91 1e 20 	lds	r24, 0x201E
    1674:	90 91 1f 20 	lds	r25, 0x201F
    1678:	aa 27       	eor	r26, r26
    167a:	97 fd       	sbrc	r25, 7
    167c:	a0 95       	com	r26
    167e:	ba 2f       	mov	r27, r26
    1680:	c8 16       	cp	r12, r24
    1682:	d9 06       	cpc	r13, r25
    1684:	ea 06       	cpc	r14, r26
    1686:	fb 06       	cpc	r15, r27
    1688:	20 f6       	brcc	.-120    	; 0x1612 <door_status+0xfe>
			{
				send_timer = -1;
    168a:	a0 92 1e 20 	sts	0x201E, r10
    168e:	b0 92 1f 20 	sts	0x201F, r11
	u32 GetTime=0;
	u8	th;
	u8	carrier_sen_check=0;	
	
	
	for(int i=0;i<7;i++)
    1692:	0f 5f       	subi	r16, 0xFF	; 255
    1694:	1f 4f       	sbci	r17, 0xFF	; 255
    1696:	07 30       	cpi	r16, 0x07	; 7
    1698:	11 05       	cpc	r17, r1
    169a:	09 f0       	breq	.+2      	; 0x169e <door_status+0x18a>
    169c:	62 cf       	rjmp	.-316    	; 0x1562 <door_status+0x4e>
		}
	
	}
	
	
	return false;
    169e:	80 e0       	ldi	r24, 0x00	; 0
}
    16a0:	6e 96       	adiw	r28, 0x1e	; 30
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	0f 91       	pop	r16
    16ae:	ff 90       	pop	r15
    16b0:	ef 90       	pop	r14
    16b2:	df 90       	pop	r13
    16b4:	cf 90       	pop	r12
    16b6:	bf 90       	pop	r11
    16b8:	af 90       	pop	r10
    16ba:	9f 90       	pop	r9
    16bc:	8f 90       	pop	r8
    16be:	7f 90       	pop	r7
    16c0:	6f 90       	pop	r6
    16c2:	5f 90       	pop	r5
    16c4:	4f 90       	pop	r4
    16c6:	3f 90       	pop	r3
    16c8:	08 95       	ret

000016ca <door_lock_status>:
F,G,D,E -> A door lock status
PAYLOAD_DOOR_LOCK_STATUS
*/

u8 door_lock_status(u8 status)
{
    16ca:	4f 92       	push	r4
    16cc:	5f 92       	push	r5
    16ce:	6f 92       	push	r6
    16d0:	7f 92       	push	r7
    16d2:	8f 92       	push	r8
    16d4:	9f 92       	push	r9
    16d6:	af 92       	push	r10
    16d8:	bf 92       	push	r11
    16da:	cf 92       	push	r12
    16dc:	df 92       	push	r13
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	6e 97       	sbiw	r28, 0x1e	; 30
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	98 2e       	mov	r9, r24
	u8 rssi,lqi;
	u32 GetTime=0;
	u8	th;
	u8	carrier_sen_check=0;

	for(int i=0;i<20;i++)
    16f6:	00 e0       	ldi	r16, 0x00	; 0
    16f8:	10 e0       	ldi	r17, 0x00	; 0
		
		if(gEnv.unlockRootvanWaveUsed == true)
		{
			if(i==3 || i==8 || i==13)
			{
				pt_data[0] = 0x34;		//output power -10dBm
    16fa:	b4 e3       	ldi	r27, 0x34	; 52
    16fc:	8b 2e       	mov	r8, r27
				cc1101_8PATABLE_write_reg();
			}
			else if(i==4 || i==9 || i==14)
			{
				pt_data[0] = 0x1d;		//output power -15dBm
    16fe:	8d e1       	ldi	r24, 0x1D	; 29
    1700:	78 2e       	mov	r7, r24
				cc1101_8PATABLE_write_reg();
			}
			else if(i==5 || i==10 || i==15)
			{
				pt_data[0] = 0x0d;		//output power -20dBm
    1702:	9d e0       	ldi	r25, 0x0D	; 13
    1704:	69 2e       	mov	r6, r25
				cc1101_8PATABLE_write_reg();
			}
			else
			{
				pt_data[0] = 0x60;		//output power 0dBm
    1706:	20 e6       	ldi	r18, 0x60	; 96
    1708:	52 2e       	mov	r5, r18
		}		
		
		
		door.hdr.master_id = gMasterId;
		door.hdr.slave_id = gEnv.id;
		door.hdr.payload = PAYLOAD_DOOR_LOCK_STATUS;
    170a:	3c e0       	ldi	r19, 0x0C	; 12
    170c:	43 2e       	mov	r4, r19
			}
			cc1100_cmd_idle();
			
			if(send_timer > GetTime)
			{
				send_timer = -1;
    170e:	aa 24       	eor	r10, r10
    1710:	aa 94       	dec	r10
    1712:	ba 2c       	mov	r11, r10
	u8	th;
	u8	carrier_sen_check=0;

	for(int i=0;i<20;i++)
	{
		wdt_reset();
    1714:	a8 95       	wdr
		
		if(gEnv.unlockRootvanWaveUsed == true)
    1716:	80 91 fa 21 	lds	r24, 0x21FA
    171a:	81 30       	cpi	r24, 0x01	; 1
    171c:	41 f5       	brne	.+80     	; 0x176e <door_lock_status+0xa4>
		{
			if(i==3 || i==8 || i==13)
    171e:	03 30       	cpi	r16, 0x03	; 3
    1720:	11 05       	cpc	r17, r1
    1722:	31 f0       	breq	.+12     	; 0x1730 <door_lock_status+0x66>
    1724:	08 30       	cpi	r16, 0x08	; 8
    1726:	11 05       	cpc	r17, r1
    1728:	19 f0       	breq	.+6      	; 0x1730 <door_lock_status+0x66>
    172a:	0d 30       	cpi	r16, 0x0D	; 13
    172c:	11 05       	cpc	r17, r1
    172e:	19 f4       	brne	.+6      	; 0x1736 <door_lock_status+0x6c>
			{
				pt_data[0] = 0x34;		//output power -10dBm
    1730:	80 92 16 20 	sts	0x2016, r8
    1734:	1a c0       	rjmp	.+52     	; 0x176a <door_lock_status+0xa0>
				cc1101_8PATABLE_write_reg();
			}
			else if(i==4 || i==9 || i==14)
    1736:	04 30       	cpi	r16, 0x04	; 4
    1738:	11 05       	cpc	r17, r1
    173a:	31 f0       	breq	.+12     	; 0x1748 <door_lock_status+0x7e>
    173c:	09 30       	cpi	r16, 0x09	; 9
    173e:	11 05       	cpc	r17, r1
    1740:	19 f0       	breq	.+6      	; 0x1748 <door_lock_status+0x7e>
    1742:	0e 30       	cpi	r16, 0x0E	; 14
    1744:	11 05       	cpc	r17, r1
    1746:	19 f4       	brne	.+6      	; 0x174e <door_lock_status+0x84>
			{
				pt_data[0] = 0x1d;		//output power -15dBm
    1748:	70 92 16 20 	sts	0x2016, r7
    174c:	0e c0       	rjmp	.+28     	; 0x176a <door_lock_status+0xa0>
				cc1101_8PATABLE_write_reg();
			}
			else if(i==5 || i==10 || i==15)
    174e:	05 30       	cpi	r16, 0x05	; 5
    1750:	11 05       	cpc	r17, r1
    1752:	31 f0       	breq	.+12     	; 0x1760 <door_lock_status+0x96>
    1754:	0a 30       	cpi	r16, 0x0A	; 10
    1756:	11 05       	cpc	r17, r1
    1758:	19 f0       	breq	.+6      	; 0x1760 <door_lock_status+0x96>
    175a:	0f 30       	cpi	r16, 0x0F	; 15
    175c:	11 05       	cpc	r17, r1
    175e:	19 f4       	brne	.+6      	; 0x1766 <door_lock_status+0x9c>
			{
				pt_data[0] = 0x0d;		//output power -20dBm
    1760:	60 92 16 20 	sts	0x2016, r6
    1764:	02 c0       	rjmp	.+4      	; 0x176a <door_lock_status+0xa0>
				cc1101_8PATABLE_write_reg();
			}
			else
			{
				pt_data[0] = 0x60;		//output power 0dBm
    1766:	50 92 16 20 	sts	0x2016, r5
				cc1101_8PATABLE_write_reg();
    176a:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
			}
		}		
		
		
		door.hdr.master_id = gMasterId;
    176e:	80 91 0a 22 	lds	r24, 0x220A
    1772:	90 91 0b 22 	lds	r25, 0x220B
    1776:	a0 91 0c 22 	lds	r26, 0x220C
    177a:	b0 91 0d 22 	lds	r27, 0x220D
    177e:	8e 83       	std	Y+6, r24	; 0x06
    1780:	9f 83       	std	Y+7, r25	; 0x07
    1782:	a8 87       	std	Y+8, r26	; 0x08
    1784:	b9 87       	std	Y+9, r27	; 0x09
		door.hdr.slave_id = gEnv.id;
    1786:	80 91 ee 21 	lds	r24, 0x21EE
    178a:	90 91 ef 21 	lds	r25, 0x21EF
    178e:	a0 91 f0 21 	lds	r26, 0x21F0
    1792:	b0 91 f1 21 	lds	r27, 0x21F1
    1796:	8a 83       	std	Y+2, r24	; 0x02
    1798:	9b 83       	std	Y+3, r25	; 0x03
    179a:	ac 83       	std	Y+4, r26	; 0x04
    179c:	bd 83       	std	Y+5, r27	; 0x05
		door.hdr.payload = PAYLOAD_DOOR_LOCK_STATUS;
    179e:	4c 86       	std	Y+12, r4	; 0x0c
		door.lock = status;
    17a0:	9d 86       	std	Y+13, r9	; 0x0d
		else
		{
			th=0;
		}
		
		set_freq();
    17a2:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
		carrier_sen_check = cc1101_tx(&door,sizeof(door_lock_status_t),1);
    17a6:	41 e0       	ldi	r20, 0x01	; 1
    17a8:	6c e1       	ldi	r22, 0x1C	; 28
    17aa:	ce 01       	movw	r24, r28
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
	
		if(carrier_sen_check == CARRIER_SENSE_DETECT)
    17b2:	85 35       	cpi	r24, 0x55	; 85
    17b4:	39 f4       	brne	.+14     	; 0x17c4 <door_lock_status+0xfa>
		{
			GetTime = 1000;
    17b6:	a8 ee       	ldi	r26, 0xE8	; 232
    17b8:	ca 2e       	mov	r12, r26
    17ba:	a3 e0       	ldi	r26, 0x03	; 3
    17bc:	da 2e       	mov	r13, r26
    17be:	e1 2c       	mov	r14, r1
    17c0:	f1 2c       	mov	r15, r1
    17c2:	05 c0       	rjmp	.+10     	; 0x17ce <door_lock_status+0x104>
		}
		else
		{
			GetTime = RF_TIME_OUT;
    17c4:	fa e0       	ldi	r31, 0x0A	; 10
    17c6:	cf 2e       	mov	r12, r31
    17c8:	d1 2c       	mov	r13, r1
    17ca:	e1 2c       	mov	r14, r1
    17cc:	f1 2c       	mov	r15, r1
		}
	
		send_timer = 0;
    17ce:	10 92 1e 20 	sts	0x201E, r1
    17d2:	10 92 1f 20 	sts	0x201F, r1
		
		while(1)
		{
			set_freq();
    17d6:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
			length = cc1101_rx((u8 *)&door,&rssi,&lqi,RX_NOMAL);
    17da:	22 e0       	ldi	r18, 0x02	; 2
    17dc:	ae 01       	movw	r20, r28
    17de:	43 5e       	subi	r20, 0xE3	; 227
    17e0:	5f 4f       	sbci	r21, 0xFF	; 255
    17e2:	be 01       	movw	r22, r28
    17e4:	62 5e       	subi	r22, 0xE2	; 226
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255
    17e8:	ce 01       	movw	r24, r28
    17ea:	01 96       	adiw	r24, 0x01	; 1
    17ec:	0e 94 00 06 	call	0xc00	; 0xc00 <cc1101_rx>
			if(length > 0 )
    17f0:	88 23       	and	r24, r24
    17f2:	f1 f0       	breq	.+60     	; 0x1830 <door_lock_status+0x166>
			{
				if(door.hdr.slave_id == gEnv.id && door.hdr.payload == PAYLOAD_DOOR_LOCK_STATUS)
    17f4:	80 91 ee 21 	lds	r24, 0x21EE
    17f8:	90 91 ef 21 	lds	r25, 0x21EF
    17fc:	a0 91 f0 21 	lds	r26, 0x21F0
    1800:	b0 91 f1 21 	lds	r27, 0x21F1
    1804:	4a 81       	ldd	r20, Y+2	; 0x02
    1806:	5b 81       	ldd	r21, Y+3	; 0x03
    1808:	6c 81       	ldd	r22, Y+4	; 0x04
    180a:	7d 81       	ldd	r23, Y+5	; 0x05
    180c:	48 17       	cp	r20, r24
    180e:	59 07       	cpc	r21, r25
    1810:	6a 07       	cpc	r22, r26
    1812:	7b 07       	cpc	r23, r27
    1814:	69 f4       	brne	.+26     	; 0x1830 <door_lock_status+0x166>
    1816:	8c 85       	ldd	r24, Y+12	; 0x0c
    1818:	8c 30       	cpi	r24, 0x0C	; 12
    181a:	51 f4       	brne	.+20     	; 0x1830 <door_lock_status+0x166>
				{
					send_timer = -1;
    181c:	8f ef       	ldi	r24, 0xFF	; 255
    181e:	9f ef       	ldi	r25, 0xFF	; 255
    1820:	80 93 1e 20 	sts	0x201E, r24
    1824:	90 93 1f 20 	sts	0x201F, r25
					comm_led();
    1828:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <comm_led>
					return true;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	1a c0       	rjmp	.+52     	; 0x1864 <door_lock_status+0x19a>
				}
			}
			cc1100_cmd_idle();
    1830:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
			
			if(send_timer > GetTime)
    1834:	80 91 1e 20 	lds	r24, 0x201E
    1838:	90 91 1f 20 	lds	r25, 0x201F
    183c:	aa 27       	eor	r26, r26
    183e:	97 fd       	sbrc	r25, 7
    1840:	a0 95       	com	r26
    1842:	ba 2f       	mov	r27, r26
    1844:	c8 16       	cp	r12, r24
    1846:	d9 06       	cpc	r13, r25
    1848:	ea 06       	cpc	r14, r26
    184a:	fb 06       	cpc	r15, r27
    184c:	20 f6       	brcc	.-120    	; 0x17d6 <door_lock_status+0x10c>
			{
				send_timer = -1;
    184e:	a0 92 1e 20 	sts	0x201E, r10
    1852:	b0 92 1f 20 	sts	0x201F, r11
	u8 rssi,lqi;
	u32 GetTime=0;
	u8	th;
	u8	carrier_sen_check=0;

	for(int i=0;i<20;i++)
    1856:	0f 5f       	subi	r16, 0xFF	; 255
    1858:	1f 4f       	sbci	r17, 0xFF	; 255
    185a:	04 31       	cpi	r16, 0x14	; 20
    185c:	11 05       	cpc	r17, r1
    185e:	09 f0       	breq	.+2      	; 0x1862 <door_lock_status+0x198>
    1860:	59 cf       	rjmp	.-334    	; 0x1714 <door_lock_status+0x4a>
			// need timeout;
		}
	}
	
	
	return false;
    1862:	80 e0       	ldi	r24, 0x00	; 0
}
    1864:	6e 96       	adiw	r28, 0x1e	; 30
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	0f 91       	pop	r16
    1872:	ff 90       	pop	r15
    1874:	ef 90       	pop	r14
    1876:	df 90       	pop	r13
    1878:	cf 90       	pop	r12
    187a:	bf 90       	pop	r11
    187c:	af 90       	pop	r10
    187e:	9f 90       	pop	r9
    1880:	8f 90       	pop	r8
    1882:	7f 90       	pop	r7
    1884:	6f 90       	pop	r6
    1886:	5f 90       	pop	r5
    1888:	4f 90       	pop	r4
    188a:	08 95       	ret

0000188c <emg_send>:
/*
D,E,F,G -> A door_emg
PAYLOAD_DOOR_EMG
*/
u8 emg_send(u8 type,u8 emg)
{
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	6e 97       	sbiw	r28, 0x1e	; 30
    1896:	cd bf       	out	0x3d, r28	; 61
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	96 2f       	mov	r25, r22
	int length;
	door_emg_t temg;
	u8 rssi,lqi;
	
	temg.hdr.master_id = gMasterId;
    189c:	40 91 0a 22 	lds	r20, 0x220A
    18a0:	50 91 0b 22 	lds	r21, 0x220B
    18a4:	60 91 0c 22 	lds	r22, 0x220C
    18a8:	70 91 0d 22 	lds	r23, 0x220D
    18ac:	4e 83       	std	Y+6, r20	; 0x06
    18ae:	5f 83       	std	Y+7, r21	; 0x07
    18b0:	68 87       	std	Y+8, r22	; 0x08
    18b2:	79 87       	std	Y+9, r23	; 0x09
	temg.hdr.slave_id = gEnv.id;
    18b4:	40 91 ee 21 	lds	r20, 0x21EE
    18b8:	50 91 ef 21 	lds	r21, 0x21EF
    18bc:	60 91 f0 21 	lds	r22, 0x21F0
    18c0:	70 91 f1 21 	lds	r23, 0x21F1
    18c4:	4a 83       	std	Y+2, r20	; 0x02
    18c6:	5b 83       	std	Y+3, r21	; 0x03
    18c8:	6c 83       	std	Y+4, r22	; 0x04
    18ca:	7d 83       	std	Y+5, r23	; 0x05
	temg.hdr.payload = PAYLOAD_DOOR_EMG;
    18cc:	2a e0       	ldi	r18, 0x0A	; 10
    18ce:	2c 87       	std	Y+12, r18	; 0x0c
	temg.emg = emg;
    18d0:	9e 87       	std	Y+14, r25	; 0x0e
	temg.door = type;
    18d2:	8d 87       	std	Y+13, r24	; 0x0d

	set_freq();
    18d4:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
	cc1101_tx(&temg,sizeof(door_emg_t),1);
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	6c e1       	ldi	r22, 0x1C	; 28
    18dc:	ce 01       	movw	r24, r28
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	0e 94 91 05 	call	0xb22	; 0xb22 <cc1101_tx>
	
	send_timer = 0;
    18e4:	10 92 1e 20 	sts	0x201E, r1
    18e8:	10 92 1f 20 	sts	0x201F, r1

	while(1)
	{
		
		set_freq();
    18ec:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
		length = cc1101_rx((u8 *)&temg,&rssi,&lqi,RX_NOMAL);
    18f0:	22 e0       	ldi	r18, 0x02	; 2
    18f2:	ae 01       	movw	r20, r28
    18f4:	43 5e       	subi	r20, 0xE3	; 227
    18f6:	5f 4f       	sbci	r21, 0xFF	; 255
    18f8:	be 01       	movw	r22, r28
    18fa:	62 5e       	subi	r22, 0xE2	; 226
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	0e 94 00 06 	call	0xc00	; 0xc00 <cc1101_rx>
		if(length > 0 )
    1906:	88 23       	and	r24, r24
    1908:	f1 f0       	breq	.+60     	; 0x1946 <emg_send+0xba>
		{
			if(temg.hdr.slave_id == gEnv.id && temg.hdr.payload == PAYLOAD_DOOR_EMG)
    190a:	80 91 ee 21 	lds	r24, 0x21EE
    190e:	90 91 ef 21 	lds	r25, 0x21EF
    1912:	a0 91 f0 21 	lds	r26, 0x21F0
    1916:	b0 91 f1 21 	lds	r27, 0x21F1
    191a:	4a 81       	ldd	r20, Y+2	; 0x02
    191c:	5b 81       	ldd	r21, Y+3	; 0x03
    191e:	6c 81       	ldd	r22, Y+4	; 0x04
    1920:	7d 81       	ldd	r23, Y+5	; 0x05
    1922:	48 17       	cp	r20, r24
    1924:	59 07       	cpc	r21, r25
    1926:	6a 07       	cpc	r22, r26
    1928:	7b 07       	cpc	r23, r27
    192a:	69 f4       	brne	.+26     	; 0x1946 <emg_send+0xba>
    192c:	8c 85       	ldd	r24, Y+12	; 0x0c
    192e:	8a 30       	cpi	r24, 0x0A	; 10
    1930:	51 f4       	brne	.+20     	; 0x1946 <emg_send+0xba>
			{
				send_timer = -1;
    1932:	8f ef       	ldi	r24, 0xFF	; 255
    1934:	9f ef       	ldi	r25, 0xFF	; 255
    1936:	80 93 1e 20 	sts	0x201E, r24
    193a:	90 93 1f 20 	sts	0x201F, r25
				comm_led();
    193e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <comm_led>
				return true;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	10 c0       	rjmp	.+32     	; 0x1966 <emg_send+0xda>
			}
		}
		cc1100_cmd_idle();
    1946:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
		
		if(send_timer > 1000)
    194a:	80 91 1e 20 	lds	r24, 0x201E
    194e:	90 91 1f 20 	lds	r25, 0x201F
    1952:	89 3e       	cpi	r24, 0xE9	; 233
    1954:	93 40       	sbci	r25, 0x03	; 3
    1956:	54 f2       	brlt	.-108    	; 0x18ec <emg_send+0x60>
		{
			send_timer = -1;
    1958:	8f ef       	ldi	r24, 0xFF	; 255
    195a:	9f ef       	ldi	r25, 0xFF	; 255
    195c:	80 93 1e 20 	sts	0x201E, r24
    1960:	90 93 1f 20 	sts	0x201F, r25
		}
		// need timeout;
	}
	
	
	return false;
    1964:	80 e0       	ldi	r24, 0x00	; 0
}
    1966:	6e 96       	adiw	r28, 0x1e	; 30
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	df 91       	pop	r29
    196e:	cf 91       	pop	r28
    1970:	08 95       	ret

00001972 <extern_process_doorLock>:




void extern_process_doorLock(void)
{
    1972:	ef 92       	push	r14
    1974:	ff 92       	push	r15
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
	static u32 timerOut;
	u8 ret;
	u8 sendOk = false;	
	
	switch(gExternState)	
    197e:	80 91 2d 22 	lds	r24, 0x222D
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	89 30       	cpi	r24, 0x09	; 9
    1986:	91 05       	cpc	r25, r1
    1988:	08 f0       	brcs	.+2      	; 0x198c <extern_process_doorLock+0x1a>
    198a:	b3 c1       	rjmp	.+870    	; 0x1cf2 <extern_process_doorLock+0x380>
    198c:	fc 01       	movw	r30, r24
    198e:	e2 50       	subi	r30, 0x02	; 2
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__tablejump2__>
	{
		case LOCK:
			// door check
			
			if(get_extern_door_lock() == false)
    1996:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    199a:	81 11       	cpse	r24, r1
    199c:	5f c0       	rjmp	.+190    	; 0x1a5c <extern_process_doorLock+0xea>
			{
				if(lock_err_e_door_count == -1)
    199e:	80 91 30 20 	lds	r24, 0x2030
    19a2:	90 91 31 20 	lds	r25, 0x2031
    19a6:	01 96       	adiw	r24, 0x01	; 1
    19a8:	21 f4       	brne	.+8      	; 0x19b2 <extern_process_doorLock+0x40>
				{
					lock_err_e_door_count = 0;
    19aa:	10 92 30 20 	sts	0x2030, r1
    19ae:	10 92 31 20 	sts	0x2031, r1
				}
				
				if(lock_err_e_door_count > 0)
    19b2:	80 91 30 20 	lds	r24, 0x2030
    19b6:	90 91 31 20 	lds	r25, 0x2031
    19ba:	18 16       	cp	r1, r24
    19bc:	19 06       	cpc	r1, r25
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <extern_process_doorLock+0x50>
    19c0:	98 c1       	rjmp	.+816    	; 0x1cf2 <extern_process_doorLock+0x380>
				{
					gExternState = LOCK_ERROR;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	80 93 2d 22 	sts	0x222D, r24
					for(int i=0;i<7;i++)
    19c8:	c0 e0       	ldi	r28, 0x00	; 0
    19ca:	d0 e0       	ldi	r29, 0x00	; 0
								pt_data[0] = 0x0d;		//output power -20dBm
								cc1101_8PATABLE_write_reg();
							}
							else if(i>5)
							{
								pt_data[0] = 0x60;		//output power 0dBm
    19cc:	10 e6       	ldi	r17, 0x60	; 96
								pt_data[0] = 0x1d;		//output power -15dBm
								cc1101_8PATABLE_write_reg();
							}
							else if(i==5)
							{
								pt_data[0] = 0x0d;		//output power -20dBm
    19ce:	0d e0       	ldi	r16, 0x0D	; 13
								pt_data[0] = 0x34;		//output power -10dBm
								cc1101_8PATABLE_write_reg();
							}
							else if(i==4)
							{
								pt_data[0] = 0x1d;		//output power -15dBm
    19d0:	fd e1       	ldi	r31, 0x1D	; 29
    19d2:	ff 2e       	mov	r15, r31
					{
						if(gEnv.unlockRootvanWaveUsed == true)
						{
							if(i==3)
							{
								pt_data[0] = 0x34;		//output power -10dBm
    19d4:	a4 e3       	ldi	r26, 0x34	; 52
    19d6:	ea 2e       	mov	r14, r26
				if(lock_err_e_door_count > 0)
				{
					gExternState = LOCK_ERROR;
					for(int i=0;i<7;i++)
					{
						if(gEnv.unlockRootvanWaveUsed == true)
    19d8:	80 91 fa 21 	lds	r24, 0x21FA
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	c9 f4       	brne	.+50     	; 0x1a12 <extern_process_doorLock+0xa0>
						{
							if(i==3)
    19e0:	c3 30       	cpi	r28, 0x03	; 3
    19e2:	d1 05       	cpc	r29, r1
    19e4:	19 f4       	brne	.+6      	; 0x19ec <extern_process_doorLock+0x7a>
							{
								pt_data[0] = 0x34;		//output power -10dBm
    19e6:	e0 92 16 20 	sts	0x2016, r14
    19ea:	11 c0       	rjmp	.+34     	; 0x1a0e <extern_process_doorLock+0x9c>
								cc1101_8PATABLE_write_reg();
							}
							else if(i==4)
    19ec:	c4 30       	cpi	r28, 0x04	; 4
    19ee:	d1 05       	cpc	r29, r1
    19f0:	19 f4       	brne	.+6      	; 0x19f8 <extern_process_doorLock+0x86>
							{
								pt_data[0] = 0x1d;		//output power -15dBm
    19f2:	f0 92 16 20 	sts	0x2016, r15
    19f6:	0b c0       	rjmp	.+22     	; 0x1a0e <extern_process_doorLock+0x9c>
								cc1101_8PATABLE_write_reg();
							}
							else if(i==5)
    19f8:	c5 30       	cpi	r28, 0x05	; 5
    19fa:	d1 05       	cpc	r29, r1
    19fc:	19 f4       	brne	.+6      	; 0x1a04 <extern_process_doorLock+0x92>
							{
								pt_data[0] = 0x0d;		//output power -20dBm
    19fe:	00 93 16 20 	sts	0x2016, r16
    1a02:	05 c0       	rjmp	.+10     	; 0x1a0e <extern_process_doorLock+0x9c>
								cc1101_8PATABLE_write_reg();
							}
							else if(i>5)
    1a04:	c6 30       	cpi	r28, 0x06	; 6
    1a06:	d1 05       	cpc	r29, r1
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <extern_process_doorLock+0xa0>
							{
								pt_data[0] = 0x60;		//output power 0dBm
    1a0a:	10 93 16 20 	sts	0x2016, r17
								cc1101_8PATABLE_write_reg();
    1a0e:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
							}
						}
					
						wdt_reset();
    1a12:	a8 95       	wdr
						if(emg_send(0,true)==true)
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0e 94 46 0c 	call	0x188c	; 0x188c <emg_send>
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	31 f0       	breq	.+12     	; 0x1a2c <extern_process_doorLock+0xba>
				}
				
				if(lock_err_e_door_count > 0)
				{
					gExternState = LOCK_ERROR;
					for(int i=0;i<7;i++)
    1a20:	21 96       	adiw	r28, 0x01	; 1
    1a22:	c7 30       	cpi	r28, 0x07	; 7
    1a24:	d1 05       	cpc	r29, r1
    1a26:	c1 f6       	brne	.-80     	; 0x19d8 <extern_process_doorLock+0x66>

void extern_process_doorLock(void)
{
	static u32 timerOut;
	u8 ret;
	u8 sendOk = false;	
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <extern_process_doorLock+0xbc>
						}
					
						wdt_reset();
						if(emg_send(0,true)==true)
						{
							sendOk = true;
    1a2c:	21 e0       	ldi	r18, 0x01	; 1
							break;
						}
					}
					
					if(devicePowerStart==true && sendOk!=true)
    1a2e:	80 91 24 20 	lds	r24, 0x2024
    1a32:	90 91 25 20 	lds	r25, 0x2025
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	09 f0       	breq	.+2      	; 0x1a3c <extern_process_doorLock+0xca>
    1a3a:	5b c1       	rjmp	.+694    	; 0x1cf2 <extern_process_doorLock+0x380>
    1a3c:	21 30       	cpi	r18, 0x01	; 1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <extern_process_doorLock+0xd0>
    1a40:	58 c1       	rjmp	.+688    	; 0x1cf2 <extern_process_doorLock+0x380>
					{
						if(get_internal_door_lock() == true)
    1a42:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    1a46:	81 30       	cpi	r24, 0x01	; 1
    1a48:	21 f4       	brne	.+8      	; 0x1a52 <extern_process_doorLock+0xe0>
						{
							devicePowerStart=false;
    1a4a:	10 92 24 20 	sts	0x2024, r1
    1a4e:	10 92 25 20 	sts	0x2025, r1
						}
						checkTwiceDoorWaitCount=0;
    1a52:	10 92 22 20 	sts	0x2022, r1
    1a56:	10 92 23 20 	sts	0x2023, r1
    1a5a:	4b c1       	rjmp	.+662    	; 0x1cf2 <extern_process_doorLock+0x380>
				}

			}
			else
			{
				if(devicePowerStart==true)
    1a5c:	80 91 24 20 	lds	r24, 0x2024
    1a60:	90 91 25 20 	lds	r25, 0x2025
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	59 f4       	brne	.+22     	; 0x1a7e <extern_process_doorLock+0x10c>
				{
					gExternState = LOCK_SET;
    1a68:	87 e0       	ldi	r24, 0x07	; 7
    1a6a:	80 93 2d 22 	sts	0x222D, r24
					if(get_internal_door_lock() == true)
    1a6e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	21 f4       	brne	.+8      	; 0x1a7e <extern_process_doorLock+0x10c>
					{					
						devicePowerStart = false;
    1a76:	10 92 24 20 	sts	0x2024, r1
    1a7a:	10 92 25 20 	sts	0x2025, r1
					}
				}
				
				
				if(lock_err_e_door_count != -1)
    1a7e:	80 91 30 20 	lds	r24, 0x2030
    1a82:	90 91 31 20 	lds	r25, 0x2031
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	09 f4       	brne	.+2      	; 0x1a8c <extern_process_doorLock+0x11a>
    1a8a:	33 c1       	rjmp	.+614    	; 0x1cf2 <extern_process_doorLock+0x380>
				{
					lock_err_e_door_count = -1;
    1a8c:	8f ef       	ldi	r24, 0xFF	; 255
    1a8e:	9f ef       	ldi	r25, 0xFF	; 255
    1a90:	80 93 30 20 	sts	0x2030, r24
    1a94:	90 93 31 20 	sts	0x2031, r25
    1a98:	2c c1       	rjmp	.+600    	; 0x1cf2 <extern_process_doorLock+0x380>
				}
			}
			break;		
		case LOCK_ERROR:
			if(get_extern_door_lock() == true)
    1a9a:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	39 f4       	brne	.+14     	; 0x1ab0 <extern_process_doorLock+0x13e>
			{
				gExternState = LOCK_SET;
    1aa2:	87 e0       	ldi	r24, 0x07	; 7
    1aa4:	80 93 2d 22 	sts	0x222D, r24
				emg_send(0,false);
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	0e 94 46 0c 	call	0x188c	; 0x188c <emg_send>
			}
			
			if(checkTwiceDoorWaitCount > 45)
    1ab0:	80 91 22 20 	lds	r24, 0x2022
    1ab4:	90 91 23 20 	lds	r25, 0x2023
    1ab8:	8e 97       	sbiw	r24, 0x2e	; 46
    1aba:	0c f4       	brge	.+2      	; 0x1abe <extern_process_doorLock+0x14c>
    1abc:	1a c1       	rjmp	.+564    	; 0x1cf2 <extern_process_doorLock+0x380>
			{
				gExternState = LOCK;
    1abe:	10 92 2d 22 	sts	0x222D, r1
				checkTwiceDoorWaitCount=-1;
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	9f ef       	ldi	r25, 0xFF	; 255
    1ac6:	80 93 22 20 	sts	0x2022, r24
    1aca:	90 93 23 20 	sts	0x2023, r25
    1ace:	11 c1       	rjmp	.+546    	; 0x1cf2 <extern_process_doorLock+0x380>
			
			break;
			
		case UNLOCK_SET:
			#ifndef UNLOCK_DEBUG
			set_cabin_leftdoor(OPEN);
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
			lockActiveTime=0;
    1ad6:	10 92 20 20 	sts	0x2020, r1
    1ada:	10 92 21 20 	sts	0x2021, r1
			#else
			set_communication_led(true);
			lockActiveTime=0;
			#endif
			timerOut = gGlobalTimer + (u32)gEnv.door_unlock_time;
    1ade:	80 91 62 21 	lds	r24, 0x2162
    1ae2:	90 91 63 21 	lds	r25, 0x2163
    1ae6:	a0 91 64 21 	lds	r26, 0x2164
    1aea:	b0 91 65 21 	lds	r27, 0x2165
    1aee:	20 91 f3 21 	lds	r18, 0x21F3
    1af2:	82 0f       	add	r24, r18
    1af4:	91 1d       	adc	r25, r1
    1af6:	a1 1d       	adc	r26, r1
    1af8:	b1 1d       	adc	r27, r1
    1afa:	80 93 54 21 	sts	0x2154, r24
    1afe:	90 93 55 21 	sts	0x2155, r25
    1b02:	a0 93 56 21 	sts	0x2156, r26
    1b06:	b0 93 57 21 	sts	0x2157, r27
			gExternState = UNLOCK_END_WAIT;
    1b0a:	83 e0       	ldi	r24, 0x03	; 3
    1b0c:	5c c0       	rjmp	.+184    	; 0x1bc6 <extern_process_doorLock+0x254>

			break;
		case UNLOCK_END_WAIT:
		
			if(timerOut < gGlobalTimer)
    1b0e:	80 91 62 21 	lds	r24, 0x2162
    1b12:	90 91 63 21 	lds	r25, 0x2163
    1b16:	a0 91 64 21 	lds	r26, 0x2164
    1b1a:	b0 91 65 21 	lds	r27, 0x2165
    1b1e:	40 91 54 21 	lds	r20, 0x2154
    1b22:	50 91 55 21 	lds	r21, 0x2155
    1b26:	60 91 56 21 	lds	r22, 0x2156
    1b2a:	70 91 57 21 	lds	r23, 0x2157
    1b2e:	48 17       	cp	r20, r24
    1b30:	59 07       	cpc	r21, r25
    1b32:	6a 07       	cpc	r22, r26
    1b34:	7b 07       	cpc	r23, r27
    1b36:	08 f0       	brcs	.+2      	; 0x1b3a <extern_process_doorLock+0x1c8>
    1b38:	dc c0       	rjmp	.+440    	; 0x1cf2 <extern_process_doorLock+0x380>
			{
				#ifndef UNLOCK_DEBUG
				set_cabin_leftdoor(STOP);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				set_cabin_leftdoor(STOP2);
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				lockActiveTime=-1;
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	80 93 20 20 	sts	0x2020, r24
    1b4e:	90 93 21 20 	sts	0x2021, r25
				#else
				set_communication_led(false);
				lockActiveTime=-1;
				#endif				
				set_unlock_led(true);
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
				set_lock_led(false);
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_lock_led>
		
				//for(int i=0;i<7;i++)
				wdt_reset();
    1b5e:	a8 95       	wdr
				//if(door_lock_status(false)==true)
				door_lock_status(false);
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	0e 94 65 0b 	call	0x16ca	; 0x16ca <door_lock_status>
				
				gExternState = UNLOCK;
    1b66:	84 e0       	ldi	r24, 0x04	; 4
    1b68:	80 93 2d 22 	sts	0x222D, r24
				timerOut = gGlobalTimer + (u32)gEnv.door_wait_time;
    1b6c:	80 91 62 21 	lds	r24, 0x2162
    1b70:	90 91 63 21 	lds	r25, 0x2163
    1b74:	a0 91 64 21 	lds	r26, 0x2164
    1b78:	b0 91 65 21 	lds	r27, 0x2165
    1b7c:	20 91 f6 21 	lds	r18, 0x21F6
    1b80:	82 0f       	add	r24, r18
    1b82:	91 1d       	adc	r25, r1
    1b84:	a1 1d       	adc	r26, r1
    1b86:	b1 1d       	adc	r27, r1
    1b88:	80 93 54 21 	sts	0x2154, r24
    1b8c:	90 93 55 21 	sts	0x2155, r25
    1b90:	a0 93 56 21 	sts	0x2156, r26
    1b94:	b0 93 57 21 	sts	0x2157, r27
    1b98:	ac c0       	rjmp	.+344    	; 0x1cf2 <extern_process_doorLock+0x380>
			}
			break;
		case UNLOCK:
			if(timerOut < gGlobalTimer)
    1b9a:	80 91 62 21 	lds	r24, 0x2162
    1b9e:	90 91 63 21 	lds	r25, 0x2163
    1ba2:	a0 91 64 21 	lds	r26, 0x2164
    1ba6:	b0 91 65 21 	lds	r27, 0x2165
    1baa:	40 91 54 21 	lds	r20, 0x2154
    1bae:	50 91 55 21 	lds	r21, 0x2155
    1bb2:	60 91 56 21 	lds	r22, 0x2156
    1bb6:	70 91 57 21 	lds	r23, 0x2157
    1bba:	48 17       	cp	r20, r24
    1bbc:	59 07       	cpc	r21, r25
    1bbe:	6a 07       	cpc	r22, r26
    1bc0:	7b 07       	cpc	r23, r27
    1bc2:	20 f4       	brcc	.+8      	; 0x1bcc <extern_process_doorLock+0x25a>
			{
				gExternState = LOCK_SET;
    1bc4:	87 e0       	ldi	r24, 0x07	; 7
    1bc6:	80 93 2d 22 	sts	0x222D, r24
    1bca:	93 c0       	rjmp	.+294    	; 0x1cf2 <extern_process_doorLock+0x380>
				
			}
			else
			{
				if(get_extern_door_lock() == false)
    1bcc:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    1bd0:	81 11       	cpse	r24, r1
    1bd2:	8f c0       	rjmp	.+286    	; 0x1cf2 <extern_process_doorLock+0x380>
				{
					//for(int i=0;i<4;i++)
					//if(door_status(0,true)==true)
					door_status(0,true);
    1bd4:	61 e0       	ldi	r22, 0x01	; 1
    1bd6:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>

					gExternState = UNLOCK_EXTERN_DOOR_OPEN;
    1bda:	85 e0       	ldi	r24, 0x05	; 5
    1bdc:	f4 cf       	rjmp	.-24     	; 0x1bc6 <extern_process_doorLock+0x254>
				}
			}
			break;
		case UNLOCK_EXTERN_DOOR_OPEN:
			if(get_extern_door_lock() == true)
    1bde:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	89 f4       	brne	.+34     	; 0x1c08 <extern_process_doorLock+0x296>
			{

				if(close_chk_e_door_count==-1)
    1be6:	80 91 2c 20 	lds	r24, 0x202C
    1bea:	90 91 2d 20 	lds	r25, 0x202D
    1bee:	01 96       	adiw	r24, 0x01	; 1
    1bf0:	21 f4       	brne	.+8      	; 0x1bfa <extern_process_doorLock+0x288>
				{
					close_chk_e_door_count=0;
    1bf2:	10 92 2c 20 	sts	0x202C, r1
    1bf6:	10 92 2d 20 	sts	0x202D, r1
					//close_chk_e_door_count++;
				}
				
				if(close_chk_e_door_count>1)
    1bfa:	80 91 2c 20 	lds	r24, 0x202C
    1bfe:	90 91 2d 20 	lds	r25, 0x202D
    1c02:	02 97       	sbiw	r24, 0x02	; 2
    1c04:	44 f4       	brge	.+16     	; 0x1c16 <extern_process_doorLock+0x2a4>
    1c06:	75 c0       	rjmp	.+234    	; 0x1cf2 <extern_process_doorLock+0x380>
					gExternState = LOCK_END_WAIT;
				}
			}
			else
			{
				close_chk_e_door_count=-1;
    1c08:	8f ef       	ldi	r24, 0xFF	; 255
    1c0a:	9f ef       	ldi	r25, 0xFF	; 255
    1c0c:	80 93 2c 20 	sts	0x202C, r24
    1c10:	90 93 2d 20 	sts	0x202D, r25
    1c14:	6e c0       	rjmp	.+220    	; 0x1cf2 <extern_process_doorLock+0x380>
			}
			break;
		case LOCK_SET:
			#ifndef UNLOCK_DEBUG
			set_cabin_leftdoor(CLOSE);
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
			lockActiveTime=0;
    1c1c:	10 92 20 20 	sts	0x2020, r1
    1c20:	10 92 21 20 	sts	0x2021, r1
			#else
			set_communication_led(true);
			lockActiveTime=0;
			#endif
			
			if(gEnv.door_lock_time == 0)
    1c24:	80 91 f2 21 	lds	r24, 0x21F2
    1c28:	81 11       	cpse	r24, r1
    1c2a:	0c c0       	rjmp	.+24     	; 0x1c44 <extern_process_doorLock+0x2d2>
				timerOut = gGlobal500MsTimer + 1;
    1c2c:	80 91 5e 21 	lds	r24, 0x215E
    1c30:	90 91 5f 21 	lds	r25, 0x215F
    1c34:	a0 91 60 21 	lds	r26, 0x2160
    1c38:	b0 91 61 21 	lds	r27, 0x2161
    1c3c:	01 96       	adiw	r24, 0x01	; 1
    1c3e:	a1 1d       	adc	r26, r1
    1c40:	b1 1d       	adc	r27, r1
    1c42:	15 c0       	rjmp	.+42     	; 0x1c6e <extern_process_doorLock+0x2fc>
			else
				timerOut = gGlobal500MsTimer + (u32)gEnv.door_lock_time * (u32)2;
    1c44:	40 91 5e 21 	lds	r20, 0x215E
    1c48:	50 91 5f 21 	lds	r21, 0x215F
    1c4c:	60 91 60 21 	lds	r22, 0x2160
    1c50:	70 91 61 21 	lds	r23, 0x2161
    1c54:	80 91 f2 21 	lds	r24, 0x21F2
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	aa 1f       	adc	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	84 0f       	add	r24, r20
    1c68:	95 1f       	adc	r25, r21
    1c6a:	a6 1f       	adc	r26, r22
    1c6c:	b7 1f       	adc	r27, r23
    1c6e:	80 93 54 21 	sts	0x2154, r24
    1c72:	90 93 55 21 	sts	0x2155, r25
    1c76:	a0 93 56 21 	sts	0x2156, r26
    1c7a:	b0 93 57 21 	sts	0x2157, r27
				
			gExternState = LOCK_END_WAIT;
    1c7e:	88 e0       	ldi	r24, 0x08	; 8
    1c80:	a2 cf       	rjmp	.-188    	; 0x1bc6 <extern_process_doorLock+0x254>
			break;
			
		case LOCK_END_WAIT:
			if(timerOut < gGlobal500MsTimer)
    1c82:	80 91 5e 21 	lds	r24, 0x215E
    1c86:	90 91 5f 21 	lds	r25, 0x215F
    1c8a:	a0 91 60 21 	lds	r26, 0x2160
    1c8e:	b0 91 61 21 	lds	r27, 0x2161
    1c92:	40 91 54 21 	lds	r20, 0x2154
    1c96:	50 91 55 21 	lds	r21, 0x2155
    1c9a:	60 91 56 21 	lds	r22, 0x2156
    1c9e:	70 91 57 21 	lds	r23, 0x2157
    1ca2:	48 17       	cp	r20, r24
    1ca4:	59 07       	cpc	r21, r25
    1ca6:	6a 07       	cpc	r22, r26
    1ca8:	7b 07       	cpc	r23, r27
    1caa:	18 f5       	brcc	.+70     	; 0x1cf2 <extern_process_doorLock+0x380>
			{
				#ifndef UNLOCK_DEBUG
				set_cabin_leftdoor(STOP);
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				set_cabin_leftdoor(STOP2);
    1cb2:	83 e0       	ldi	r24, 0x03	; 3
    1cb4:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				lockActiveTime=-1;
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	9f ef       	ldi	r25, 0xFF	; 255
    1cbc:	80 93 20 20 	sts	0x2020, r24
    1cc0:	90 93 21 20 	sts	0x2021, r25
				#else
				set_communication_led(false);
				lockActiveTime=-1;
				#endif				
				
				door_status(0,false);
    1cc4:	60 e0       	ldi	r22, 0x00	; 0
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>
				set_unlock_led(false);
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
				set_lock_led(true);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_lock_led>
				ret = door_lock_status(true);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	0e 94 65 0b 	call	0x16ca	; 0x16ca <door_lock_status>
				

				gExternState = LOCK;
    1cde:	10 92 2d 22 	sts	0x222D, r1
				gGlobal500MsTimer=0;
    1ce2:	10 92 5e 21 	sts	0x215E, r1
    1ce6:	10 92 5f 21 	sts	0x215F, r1
    1cea:	10 92 60 21 	sts	0x2160, r1
    1cee:	10 92 61 21 	sts	0x2161, r1
			}
			break;
	}
}
    1cf2:	df 91       	pop	r29
    1cf4:	cf 91       	pop	r28
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	ff 90       	pop	r15
    1cfc:	ef 90       	pop	r14
    1cfe:	08 95       	ret

00001d00 <extern_process_doorCheck>:



void extern_process_doorCheck(void)
{
    1d00:	ef 92       	push	r14
    1d02:	ff 92       	push	r15
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
	static u32 timerOut;
	u8 sendOk=false;
	
	
	switch(gExternState)
    1d0c:	80 91 2d 22 	lds	r24, 0x222D
    1d10:	82 30       	cpi	r24, 0x02	; 2
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <extern_process_doorCheck+0x16>
    1d14:	d0 c0       	rjmp	.+416    	; 0x1eb6 <extern_process_doorCheck+0x1b6>
    1d16:	30 f4       	brcc	.+12     	; 0x1d24 <extern_process_doorCheck+0x24>
    1d18:	88 23       	and	r24, r24
    1d1a:	59 f0       	breq	.+22     	; 0x1d32 <extern_process_doorCheck+0x32>
    1d1c:	81 30       	cpi	r24, 0x01	; 1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <extern_process_doorCheck+0x22>
    1d20:	9a c0       	rjmp	.+308    	; 0x1e56 <extern_process_doorCheck+0x156>
    1d22:	e7 c0       	rjmp	.+462    	; 0x1ef2 <extern_process_doorCheck+0x1f2>
    1d24:	83 30       	cpi	r24, 0x03	; 3
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <extern_process_doorCheck+0x2a>
    1d28:	cc c0       	rjmp	.+408    	; 0x1ec2 <extern_process_doorCheck+0x1c2>
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <extern_process_doorCheck+0x30>
    1d2e:	c9 c0       	rjmp	.+402    	; 0x1ec2 <extern_process_doorCheck+0x1c2>
    1d30:	e0 c0       	rjmp	.+448    	; 0x1ef2 <extern_process_doorCheck+0x1f2>
	{
		case IDLE_STATUS:
			if(get_extern_door_lock() == false)
    1d32:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    1d36:	81 11       	cpse	r24, r1
    1d38:	7d c0       	rjmp	.+250    	; 0x1e34 <extern_process_doorCheck+0x134>
			{
				if(lock_err_e_door_count == -1)
    1d3a:	80 91 30 20 	lds	r24, 0x2030
    1d3e:	90 91 31 20 	lds	r25, 0x2031
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	21 f4       	brne	.+8      	; 0x1d4e <extern_process_doorCheck+0x4e>
				{
					lock_err_e_door_count=0;
    1d46:	10 92 30 20 	sts	0x2030, r1
    1d4a:	10 92 31 20 	sts	0x2031, r1
				}
				
				
				if(lock_err_e_door_count > 0)
    1d4e:	80 91 30 20 	lds	r24, 0x2030
    1d52:	90 91 31 20 	lds	r25, 0x2031
    1d56:	18 16       	cp	r1, r24
    1d58:	19 06       	cpc	r1, r25
    1d5a:	0c f0       	brlt	.+2      	; 0x1d5e <extern_process_doorCheck+0x5e>
    1d5c:	ca c0       	rjmp	.+404    	; 0x1ef2 <extern_process_doorCheck+0x1f2>
				{
	
					if(gInternalState == LOCK || gInternalState == LOCK_END_WAIT)
    1d5e:	80 91 06 22 	lds	r24, 0x2206
    1d62:	88 23       	and	r24, r24
    1d64:	29 f0       	breq	.+10     	; 0x1d70 <extern_process_doorCheck+0x70>
    1d66:	80 91 06 22 	lds	r24, 0x2206
    1d6a:	88 30       	cpi	r24, 0x08	; 8
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <extern_process_doorCheck+0x70>
    1d6e:	60 c0       	rjmp	.+192    	; 0x1e30 <extern_process_doorCheck+0x130>
					{
						gExternState = DOOR_DELAY_STATUS;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	80 93 2d 22 	sts	0x222D, r24
						for(int i=0;i<7;i++)
    1d76:	c0 e0       	ldi	r28, 0x00	; 0
    1d78:	d0 e0       	ldi	r29, 0x00	; 0
									pt_data[0] = 0x0d;		//output power -20dBm
									cc1101_8PATABLE_write_reg();
								}
								else if(i>5)
								{
									pt_data[0] = 0x60;		//output power 0dBm
    1d7a:	10 e6       	ldi	r17, 0x60	; 96
									pt_data[0] = 0x1d;		//output power -15dBm
									cc1101_8PATABLE_write_reg();
								}
								else if(i==5)
								{
									pt_data[0] = 0x0d;		//output power -20dBm
    1d7c:	0d e0       	ldi	r16, 0x0D	; 13
									pt_data[0] = 0x34;		//output power -10dBm
									cc1101_8PATABLE_write_reg();
								}
								else if(i==4)
								{
									pt_data[0] = 0x1d;		//output power -15dBm
    1d7e:	bd e1       	ldi	r27, 0x1D	; 29
    1d80:	fb 2e       	mov	r15, r27
						{
							if(gEnv.unlockRootvanWaveUsed == true)
							{
								if(i==3)
								{
									pt_data[0] = 0x34;		//output power -10dBm
    1d82:	84 e3       	ldi	r24, 0x34	; 52
    1d84:	e8 2e       	mov	r14, r24
					if(gInternalState == LOCK || gInternalState == LOCK_END_WAIT)
					{
						gExternState = DOOR_DELAY_STATUS;
						for(int i=0;i<7;i++)
						{
							if(gEnv.unlockRootvanWaveUsed == true)
    1d86:	80 91 fa 21 	lds	r24, 0x21FA
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	c9 f4       	brne	.+50     	; 0x1dc0 <extern_process_doorCheck+0xc0>
							{
								if(i==3)
    1d8e:	c3 30       	cpi	r28, 0x03	; 3
    1d90:	d1 05       	cpc	r29, r1
    1d92:	19 f4       	brne	.+6      	; 0x1d9a <extern_process_doorCheck+0x9a>
								{
									pt_data[0] = 0x34;		//output power -10dBm
    1d94:	e0 92 16 20 	sts	0x2016, r14
    1d98:	11 c0       	rjmp	.+34     	; 0x1dbc <extern_process_doorCheck+0xbc>
									cc1101_8PATABLE_write_reg();
								}
								else if(i==4)
    1d9a:	c4 30       	cpi	r28, 0x04	; 4
    1d9c:	d1 05       	cpc	r29, r1
    1d9e:	19 f4       	brne	.+6      	; 0x1da6 <extern_process_doorCheck+0xa6>
								{
									pt_data[0] = 0x1d;		//output power -15dBm
    1da0:	f0 92 16 20 	sts	0x2016, r15
    1da4:	0b c0       	rjmp	.+22     	; 0x1dbc <extern_process_doorCheck+0xbc>
									cc1101_8PATABLE_write_reg();
								}
								else if(i==5)
    1da6:	c5 30       	cpi	r28, 0x05	; 5
    1da8:	d1 05       	cpc	r29, r1
    1daa:	19 f4       	brne	.+6      	; 0x1db2 <extern_process_doorCheck+0xb2>
								{
									pt_data[0] = 0x0d;		//output power -20dBm
    1dac:	00 93 16 20 	sts	0x2016, r16
    1db0:	05 c0       	rjmp	.+10     	; 0x1dbc <extern_process_doorCheck+0xbc>
									cc1101_8PATABLE_write_reg();
								}
								else if(i>5)
    1db2:	c6 30       	cpi	r28, 0x06	; 6
    1db4:	d1 05       	cpc	r29, r1
    1db6:	21 f4       	brne	.+8      	; 0x1dc0 <extern_process_doorCheck+0xc0>
								{
									pt_data[0] = 0x60;		//output power 0dBm
    1db8:	10 93 16 20 	sts	0x2016, r17
									cc1101_8PATABLE_write_reg();
    1dbc:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
								}
							}
							
							if(emg_send(0,true)==true)
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	0e 94 46 0c 	call	0x188c	; 0x188c <emg_send>
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	39 f0       	breq	.+14     	; 0x1dda <extern_process_doorCheck+0xda>
							{
								sendOk = true;
								break;
							}
							
							wdt_reset();
    1dcc:	a8 95       	wdr
				{
	
					if(gInternalState == LOCK || gInternalState == LOCK_END_WAIT)
					{
						gExternState = DOOR_DELAY_STATUS;
						for(int i=0;i<7;i++)
    1dce:	21 96       	adiw	r28, 0x01	; 1
    1dd0:	c7 30       	cpi	r28, 0x07	; 7
    1dd2:	d1 05       	cpc	r29, r1
    1dd4:	c1 f6       	brne	.-80     	; 0x1d86 <extern_process_doorCheck+0x86>


void extern_process_doorCheck(void)
{
	static u32 timerOut;
	u8 sendOk=false;
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	01 c0       	rjmp	.+2      	; 0x1ddc <extern_process_doorCheck+0xdc>
								}
							}
							
							if(emg_send(0,true)==true)
							{
								sendOk = true;
    1dda:	21 e0       	ldi	r18, 0x01	; 1
							
							wdt_reset();
							
						}

						if(devicePowerStart==true && sendOk!=true)
    1ddc:	80 91 24 20 	lds	r24, 0x2024
    1de0:	90 91 25 20 	lds	r25, 0x2025
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	51 f4       	brne	.+20     	; 0x1dfc <extern_process_doorCheck+0xfc>
    1de8:	21 30       	cpi	r18, 0x01	; 1
    1dea:	41 f0       	breq	.+16     	; 0x1dfc <extern_process_doorCheck+0xfc>
						{
							devicePowerStart=false;
    1dec:	10 92 24 20 	sts	0x2024, r1
    1df0:	10 92 25 20 	sts	0x2025, r1
							checkTwiceDoorWaitCount=0;
    1df4:	10 92 22 20 	sts	0x2022, r1
    1df8:	10 92 23 20 	sts	0x2023, r1
						}
											
						timerOut = gGlobalTimer + (u32)gEnv.door_delay_time;
    1dfc:	80 91 62 21 	lds	r24, 0x2162
    1e00:	90 91 63 21 	lds	r25, 0x2163
    1e04:	a0 91 64 21 	lds	r26, 0x2164
    1e08:	b0 91 65 21 	lds	r27, 0x2165
    1e0c:	20 91 f7 21 	lds	r18, 0x21F7
    1e10:	82 0f       	add	r24, r18
    1e12:	91 1d       	adc	r25, r1
    1e14:	a1 1d       	adc	r26, r1
    1e16:	b1 1d       	adc	r27, r1
    1e18:	80 93 50 21 	sts	0x2150, r24
    1e1c:	90 93 51 21 	sts	0x2151, r25
    1e20:	a0 93 52 21 	sts	0x2152, r26
    1e24:	b0 93 53 21 	sts	0x2153, r27
						buzzer_toggle = true;
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	80 93 67 21 	sts	0x2167, r24
    1e2e:	61 c0       	rjmp	.+194    	; 0x1ef2 <extern_process_doorCheck+0x1f2>
						
					}
					else
					{
						gExternState = DOOR_OPEN_STATUS;
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	29 c0       	rjmp	.+82     	; 0x1e86 <extern_process_doorCheck+0x186>
	
			}
			else
			{
				//set_in_door_state_led(false);
				set_unlock_led(false);
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
				
				if(lock_err_e_door_count != -1)
    1e3a:	80 91 30 20 	lds	r24, 0x2030
    1e3e:	90 91 31 20 	lds	r25, 0x2031
    1e42:	01 96       	adiw	r24, 0x01	; 1
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <extern_process_doorCheck+0x148>
    1e46:	55 c0       	rjmp	.+170    	; 0x1ef2 <extern_process_doorCheck+0x1f2>
				{
					lock_err_e_door_count = -1;
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	9f ef       	ldi	r25, 0xFF	; 255
    1e4c:	80 93 30 20 	sts	0x2030, r24
    1e50:	90 93 31 20 	sts	0x2031, r25
    1e54:	4e c0       	rjmp	.+156    	; 0x1ef2 <extern_process_doorCheck+0x1f2>
				}
			}
			break;
		case DOOR_DELAY_STATUS:
			if(timerOut < gGlobalTimer)
    1e56:	80 91 62 21 	lds	r24, 0x2162
    1e5a:	90 91 63 21 	lds	r25, 0x2163
    1e5e:	a0 91 64 21 	lds	r26, 0x2164
    1e62:	b0 91 65 21 	lds	r27, 0x2165
    1e66:	40 91 50 21 	lds	r20, 0x2150
    1e6a:	50 91 51 21 	lds	r21, 0x2151
    1e6e:	60 91 52 21 	lds	r22, 0x2152
    1e72:	70 91 53 21 	lds	r23, 0x2153
    1e76:	48 17       	cp	r20, r24
    1e78:	59 07       	cpc	r21, r25
    1e7a:	6a 07       	cpc	r22, r26
    1e7c:	7b 07       	cpc	r23, r27
    1e7e:	30 f4       	brcc	.+12     	; 0x1e8c <extern_process_doorCheck+0x18c>
			{
				buzzer_toggle = false;
    1e80:	10 92 67 21 	sts	0x2167, r1
	
				gExternState= ERROR_STATUS;
    1e84:	84 e0       	ldi	r24, 0x04	; 4
    1e86:	80 93 2d 22 	sts	0x222D, r24
    1e8a:	33 c0       	rjmp	.+102    	; 0x1ef2 <extern_process_doorCheck+0x1f2>
			}
			else
			{
				if(gInternalState == UNLOCK)
    1e8c:	80 91 06 22 	lds	r24, 0x2206
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	79 f5       	brne	.+94     	; 0x1ef2 <extern_process_doorCheck+0x1f2>
				{
	
					gExternState = DOOR_OPEN_STATUS;
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	80 93 2d 22 	sts	0x222D, r24
					
					if(gEnv.door_error_reset == true)
    1e9a:	80 91 f8 21 	lds	r24, 0x21F8
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	41 f5       	brne	.+80     	; 0x1ef2 <extern_process_doorCheck+0x1f2>
					{
						emg_send(0,false);
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
			#endif	
			
			break;

	}
}
    1ea6:	df 91       	pop	r29
    1ea8:	cf 91       	pop	r28
    1eaa:	1f 91       	pop	r17
    1eac:	0f 91       	pop	r16
    1eae:	ff 90       	pop	r15
    1eb0:	ef 90       	pop	r14
	
					gExternState = DOOR_OPEN_STATUS;
					
					if(gEnv.door_error_reset == true)
					{
						emg_send(0,false);
    1eb2:	0c 94 46 0c 	jmp	0x188c	; 0x188c <emg_send>
			break;
		case DOOR_OPEN_STATUS:
			//set_in_door_state_led(true);
			//set_room_light(true);
	
			door_status(0,true);
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>
	
			gExternState= DOOR_CLOSE_WAIT_STATUS;
    1ebe:	83 e0       	ldi	r24, 0x03	; 3
    1ec0:	e2 cf       	rjmp	.-60     	; 0x1e86 <extern_process_doorCheck+0x186>
			}			
			
			
			break;
		case ERROR_STATUS:
			if(get_extern_door_lock() == true)
    1ec2:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    1ec6:	81 30       	cpi	r24, 0x01	; 1
    1ec8:	31 f4       	brne	.+12     	; 0x1ed6 <extern_process_doorCheck+0x1d6>
			{
				door_status(0,false);
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
    1ece:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>
	
	
				gExternState= IDLE_STATUS;
    1ed2:	10 92 2d 22 	sts	0x222D, r1
			}
			
			#if 1
			if(checkTwiceDoorWaitCount > 45)
    1ed6:	80 91 22 20 	lds	r24, 0x2022
    1eda:	90 91 23 20 	lds	r25, 0x2023
    1ede:	8e 97       	sbiw	r24, 0x2e	; 46
    1ee0:	44 f0       	brlt	.+16     	; 0x1ef2 <extern_process_doorCheck+0x1f2>
			{
				gExternState = IDLE_STATUS;
    1ee2:	10 92 2d 22 	sts	0x222D, r1
				checkTwiceDoorWaitCount=-1;
    1ee6:	8f ef       	ldi	r24, 0xFF	; 255
    1ee8:	9f ef       	ldi	r25, 0xFF	; 255
    1eea:	80 93 22 20 	sts	0x2022, r24
    1eee:	90 93 23 20 	sts	0x2023, r25
			#endif	
			
			break;

	}
}
    1ef2:	df 91       	pop	r29
    1ef4:	cf 91       	pop	r28
    1ef6:	1f 91       	pop	r17
    1ef8:	0f 91       	pop	r16
    1efa:	ff 90       	pop	r15
    1efc:	ef 90       	pop	r14
    1efe:	08 95       	ret

00001f00 <internal_process_doorLock>:




void internal_process_doorLock(void)
{
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
	static u32 timerOut;
	u8 ret;
	u8 sendOk = false;
	
	switch(gInternalState)
    1f0c:	80 91 06 22 	lds	r24, 0x2206
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	89 30       	cpi	r24, 0x09	; 9
    1f14:	91 05       	cpc	r25, r1
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <internal_process_doorLock+0x1a>
    1f18:	b4 c1       	rjmp	.+872    	; 0x2282 <internal_process_doorLock+0x382>
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e9 5f       	subi	r30, 0xF9	; 249
    1f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f20:	0c 94 5b 15 	jmp	0x2ab6	; 0x2ab6 <__tablejump2__>
	{
		case LOCK:
			// door check

			
			if(get_internal_door_lock() == false)
    1f24:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    1f28:	81 11       	cpse	r24, r1
    1f2a:	5f c0       	rjmp	.+190    	; 0x1fea <internal_process_doorLock+0xea>
			{
				if(lock_err_i_door_count == -1)
    1f2c:	80 91 2e 20 	lds	r24, 0x202E
    1f30:	90 91 2f 20 	lds	r25, 0x202F
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	21 f4       	brne	.+8      	; 0x1f40 <internal_process_doorLock+0x40>
				{
					lock_err_i_door_count = 0;
    1f38:	10 92 2e 20 	sts	0x202E, r1
    1f3c:	10 92 2f 20 	sts	0x202F, r1
				}
				
				if(lock_err_i_door_count > 0)
    1f40:	80 91 2e 20 	lds	r24, 0x202E
    1f44:	90 91 2f 20 	lds	r25, 0x202F
    1f48:	18 16       	cp	r1, r24
    1f4a:	19 06       	cpc	r1, r25
    1f4c:	0c f0       	brlt	.+2      	; 0x1f50 <internal_process_doorLock+0x50>
    1f4e:	99 c1       	rjmp	.+818    	; 0x2282 <internal_process_doorLock+0x382>
				{
					gInternalState = LOCK_ERROR;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 93 06 22 	sts	0x2206, r24
					for(int i=0;i<7;i++)
    1f56:	c0 e0       	ldi	r28, 0x00	; 0
    1f58:	d0 e0       	ldi	r29, 0x00	; 0
								pt_data[0] = 0x0d;		//output power -20dBm
								cc1101_8PATABLE_write_reg();
							}
							else if(i>5)
							{
								pt_data[0] = 0x60;		//output power 0dBm
    1f5a:	10 e6       	ldi	r17, 0x60	; 96
								pt_data[0] = 0x1d;		//output power -15dBm
								cc1101_8PATABLE_write_reg();
							}
							else if(i==5)
							{
								pt_data[0] = 0x0d;		//output power -20dBm
    1f5c:	0d e0       	ldi	r16, 0x0D	; 13
								pt_data[0] = 0x34;		//output power -10dBm
								cc1101_8PATABLE_write_reg();
							}
							else if(i==4)
							{
								pt_data[0] = 0x1d;		//output power -15dBm
    1f5e:	3d e1       	ldi	r19, 0x1D	; 29
    1f60:	f3 2e       	mov	r15, r19
					{
						if(gEnv.unlockRootvanWaveUsed == true)
						{
							if(i==3)
							{
								pt_data[0] = 0x34;		//output power -10dBm
    1f62:	44 e3       	ldi	r20, 0x34	; 52
    1f64:	e4 2e       	mov	r14, r20
				if(lock_err_i_door_count > 0)
				{
					gInternalState = LOCK_ERROR;
					for(int i=0;i<7;i++)
					{
						if(gEnv.unlockRootvanWaveUsed == true)
    1f66:	80 91 fa 21 	lds	r24, 0x21FA
    1f6a:	81 30       	cpi	r24, 0x01	; 1
    1f6c:	c9 f4       	brne	.+50     	; 0x1fa0 <internal_process_doorLock+0xa0>
						{
							if(i==3)
    1f6e:	c3 30       	cpi	r28, 0x03	; 3
    1f70:	d1 05       	cpc	r29, r1
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <internal_process_doorLock+0x7a>
							{
								pt_data[0] = 0x34;		//output power -10dBm
    1f74:	e0 92 16 20 	sts	0x2016, r14
    1f78:	11 c0       	rjmp	.+34     	; 0x1f9c <internal_process_doorLock+0x9c>
								cc1101_8PATABLE_write_reg();
							}
							else if(i==4)
    1f7a:	c4 30       	cpi	r28, 0x04	; 4
    1f7c:	d1 05       	cpc	r29, r1
    1f7e:	19 f4       	brne	.+6      	; 0x1f86 <internal_process_doorLock+0x86>
							{
								pt_data[0] = 0x1d;		//output power -15dBm
    1f80:	f0 92 16 20 	sts	0x2016, r15
    1f84:	0b c0       	rjmp	.+22     	; 0x1f9c <internal_process_doorLock+0x9c>
								cc1101_8PATABLE_write_reg();
							}
							else if(i==5)
    1f86:	c5 30       	cpi	r28, 0x05	; 5
    1f88:	d1 05       	cpc	r29, r1
    1f8a:	19 f4       	brne	.+6      	; 0x1f92 <internal_process_doorLock+0x92>
							{
								pt_data[0] = 0x0d;		//output power -20dBm
    1f8c:	00 93 16 20 	sts	0x2016, r16
    1f90:	05 c0       	rjmp	.+10     	; 0x1f9c <internal_process_doorLock+0x9c>
								cc1101_8PATABLE_write_reg();
							}
							else if(i>5)
    1f92:	c6 30       	cpi	r28, 0x06	; 6
    1f94:	d1 05       	cpc	r29, r1
    1f96:	21 f4       	brne	.+8      	; 0x1fa0 <internal_process_doorLock+0xa0>
							{
								pt_data[0] = 0x60;		//output power 0dBm
    1f98:	10 93 16 20 	sts	0x2016, r17
								cc1101_8PATABLE_write_reg();
    1f9c:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
							}
						}
						
						wdt_reset();
    1fa0:	a8 95       	wdr
						if(emg_send(1,true)==true)
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	0e 94 46 0c 	call	0x188c	; 0x188c <emg_send>
    1faa:	81 30       	cpi	r24, 0x01	; 1
    1fac:	31 f0       	breq	.+12     	; 0x1fba <internal_process_doorLock+0xba>
				}
				
				if(lock_err_i_door_count > 0)
				{
					gInternalState = LOCK_ERROR;
					for(int i=0;i<7;i++)
    1fae:	21 96       	adiw	r28, 0x01	; 1
    1fb0:	c7 30       	cpi	r28, 0x07	; 7
    1fb2:	d1 05       	cpc	r29, r1
    1fb4:	c1 f6       	brne	.-80     	; 0x1f66 <internal_process_doorLock+0x66>

void internal_process_doorLock(void)
{
	static u32 timerOut;
	u8 ret;
	u8 sendOk = false;
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <internal_process_doorLock+0xbc>
						}
						
						wdt_reset();
						if(emg_send(1,true)==true)
						{
							sendOk = true;
    1fba:	21 e0       	ldi	r18, 0x01	; 1
							break;
						}
					}
					
					if(devicePowerStart==true && sendOk!=true)
    1fbc:	80 91 24 20 	lds	r24, 0x2024
    1fc0:	90 91 25 20 	lds	r25, 0x2025
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	09 f0       	breq	.+2      	; 0x1fca <internal_process_doorLock+0xca>
    1fc8:	5c c1       	rjmp	.+696    	; 0x2282 <internal_process_doorLock+0x382>
    1fca:	21 30       	cpi	r18, 0x01	; 1
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <internal_process_doorLock+0xd0>
    1fce:	59 c1       	rjmp	.+690    	; 0x2282 <internal_process_doorLock+0x382>
					{
						if(get_extern_door_lock() == true)
    1fd0:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	21 f4       	brne	.+8      	; 0x1fe0 <internal_process_doorLock+0xe0>
						{						
							devicePowerStart=false;
    1fd8:	10 92 24 20 	sts	0x2024, r1
    1fdc:	10 92 25 20 	sts	0x2025, r1
						}
						checkTwiceDoorWaitCount=0;
    1fe0:	10 92 22 20 	sts	0x2022, r1
    1fe4:	10 92 23 20 	sts	0x2023, r1
    1fe8:	4c c1       	rjmp	.+664    	; 0x2282 <internal_process_doorLock+0x382>
				}
	
			}
			else
			{
				if(devicePowerStart==true)
    1fea:	80 91 24 20 	lds	r24, 0x2024
    1fee:	90 91 25 20 	lds	r25, 0x2025
    1ff2:	01 97       	sbiw	r24, 0x01	; 1
    1ff4:	59 f4       	brne	.+22     	; 0x200c <internal_process_doorLock+0x10c>
				{
					gInternalState = LOCK_SET;
    1ff6:	87 e0       	ldi	r24, 0x07	; 7
    1ff8:	80 93 06 22 	sts	0x2206, r24
					if(get_extern_door_lock() == true)
    1ffc:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	21 f4       	brne	.+8      	; 0x200c <internal_process_doorLock+0x10c>
					{					
						devicePowerStart = false;
    2004:	10 92 24 20 	sts	0x2024, r1
    2008:	10 92 25 20 	sts	0x2025, r1
					}
				}
				
				if(lock_err_i_door_count != -1)
    200c:	80 91 2e 20 	lds	r24, 0x202E
    2010:	90 91 2f 20 	lds	r25, 0x202F
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	09 f4       	brne	.+2      	; 0x201a <internal_process_doorLock+0x11a>
    2018:	34 c1       	rjmp	.+616    	; 0x2282 <internal_process_doorLock+0x382>
				{
					lock_err_i_door_count = -1;
    201a:	8f ef       	ldi	r24, 0xFF	; 255
    201c:	9f ef       	ldi	r25, 0xFF	; 255
    201e:	80 93 2e 20 	sts	0x202E, r24
    2022:	90 93 2f 20 	sts	0x202F, r25
    2026:	2d c1       	rjmp	.+602    	; 0x2282 <internal_process_doorLock+0x382>
				}
			}
			break;
		case LOCK_ERROR:
			if(get_internal_door_lock() == true)
    2028:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	39 f4       	brne	.+14     	; 0x203e <internal_process_doorLock+0x13e>
			{
				gInternalState = LOCK_SET;
    2030:	87 e0       	ldi	r24, 0x07	; 7
    2032:	80 93 06 22 	sts	0x2206, r24
				emg_send(1,false);
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	0e 94 46 0c 	call	0x188c	; 0x188c <emg_send>
			}
			
			if(checkTwiceDoorWaitCount > 45)
    203e:	80 91 22 20 	lds	r24, 0x2022
    2042:	90 91 23 20 	lds	r25, 0x2023
    2046:	8e 97       	sbiw	r24, 0x2e	; 46
    2048:	0c f4       	brge	.+2      	; 0x204c <internal_process_doorLock+0x14c>
    204a:	1b c1       	rjmp	.+566    	; 0x2282 <internal_process_doorLock+0x382>
			{
				gInternalState = LOCK;
    204c:	10 92 06 22 	sts	0x2206, r1
				checkTwiceDoorWaitCount=-1;
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	9f ef       	ldi	r25, 0xFF	; 255
    2054:	80 93 22 20 	sts	0x2022, r24
    2058:	90 93 23 20 	sts	0x2023, r25
    205c:	12 c1       	rjmp	.+548    	; 0x2282 <internal_process_doorLock+0x382>
			}			
			break;
			
		case UNLOCK_SET:
			#ifndef UNLOCK_DEBUG
			set_cabin_leftdoor(OPEN);
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
			lockActiveTime=0;
    2064:	10 92 20 20 	sts	0x2020, r1
    2068:	10 92 21 20 	sts	0x2021, r1
			#else
			set_communication_led(true);
			lockActiveTime=0;
			#endif
			timerOut = gGlobalTimer + (u32)gEnv.door_unlock_time;
    206c:	80 91 62 21 	lds	r24, 0x2162
    2070:	90 91 63 21 	lds	r25, 0x2163
    2074:	a0 91 64 21 	lds	r26, 0x2164
    2078:	b0 91 65 21 	lds	r27, 0x2165
    207c:	20 91 f3 21 	lds	r18, 0x21F3
    2080:	82 0f       	add	r24, r18
    2082:	91 1d       	adc	r25, r1
    2084:	a1 1d       	adc	r26, r1
    2086:	b1 1d       	adc	r27, r1
    2088:	80 93 4c 21 	sts	0x214C, r24
    208c:	90 93 4d 21 	sts	0x214D, r25
    2090:	a0 93 4e 21 	sts	0x214E, r26
    2094:	b0 93 4f 21 	sts	0x214F, r27
			gInternalState = UNLOCK_END_WAIT;
    2098:	83 e0       	ldi	r24, 0x03	; 3
    209a:	5c c0       	rjmp	.+184    	; 0x2154 <internal_process_doorLock+0x254>
	
			break;
		case UNLOCK_END_WAIT:
			
			if(timerOut < gGlobalTimer)
    209c:	80 91 62 21 	lds	r24, 0x2162
    20a0:	90 91 63 21 	lds	r25, 0x2163
    20a4:	a0 91 64 21 	lds	r26, 0x2164
    20a8:	b0 91 65 21 	lds	r27, 0x2165
    20ac:	40 91 4c 21 	lds	r20, 0x214C
    20b0:	50 91 4d 21 	lds	r21, 0x214D
    20b4:	60 91 4e 21 	lds	r22, 0x214E
    20b8:	70 91 4f 21 	lds	r23, 0x214F
    20bc:	48 17       	cp	r20, r24
    20be:	59 07       	cpc	r21, r25
    20c0:	6a 07       	cpc	r22, r26
    20c2:	7b 07       	cpc	r23, r27
    20c4:	08 f0       	brcs	.+2      	; 0x20c8 <internal_process_doorLock+0x1c8>
    20c6:	dd c0       	rjmp	.+442    	; 0x2282 <internal_process_doorLock+0x382>
			{
				#ifndef UNLOCK_DEBUG
				set_cabin_leftdoor(STOP);
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				set_cabin_leftdoor(STOP2);
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				lockActiveTime=-1;
    20d4:	8f ef       	ldi	r24, 0xFF	; 255
    20d6:	9f ef       	ldi	r25, 0xFF	; 255
    20d8:	80 93 20 20 	sts	0x2020, r24
    20dc:	90 93 21 20 	sts	0x2021, r25
				#else
				set_communication_led(false);
				lockActiveTime=-1;
				#endif
				set_unlock_led(true);
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
				set_lock_led(false);
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_lock_led>
				
				//for(int i=0;i<7;i++)
				wdt_reset();
    20ec:	a8 95       	wdr
				//if(door_lock_status(false)==true)
				door_lock_status(false);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <door_lock_status>
				
				gInternalState = UNLOCK;
    20f4:	84 e0       	ldi	r24, 0x04	; 4
    20f6:	80 93 06 22 	sts	0x2206, r24
				timerOut = gGlobalTimer + (u32)gEnv.door_wait_time;
    20fa:	80 91 62 21 	lds	r24, 0x2162
    20fe:	90 91 63 21 	lds	r25, 0x2163
    2102:	a0 91 64 21 	lds	r26, 0x2164
    2106:	b0 91 65 21 	lds	r27, 0x2165
    210a:	20 91 f6 21 	lds	r18, 0x21F6
    210e:	82 0f       	add	r24, r18
    2110:	91 1d       	adc	r25, r1
    2112:	a1 1d       	adc	r26, r1
    2114:	b1 1d       	adc	r27, r1
    2116:	80 93 4c 21 	sts	0x214C, r24
    211a:	90 93 4d 21 	sts	0x214D, r25
    211e:	a0 93 4e 21 	sts	0x214E, r26
    2122:	b0 93 4f 21 	sts	0x214F, r27
    2126:	ad c0       	rjmp	.+346    	; 0x2282 <internal_process_doorLock+0x382>
			}
			break;
		case UNLOCK:
			if(timerOut < gGlobalTimer)
    2128:	80 91 62 21 	lds	r24, 0x2162
    212c:	90 91 63 21 	lds	r25, 0x2163
    2130:	a0 91 64 21 	lds	r26, 0x2164
    2134:	b0 91 65 21 	lds	r27, 0x2165
    2138:	40 91 4c 21 	lds	r20, 0x214C
    213c:	50 91 4d 21 	lds	r21, 0x214D
    2140:	60 91 4e 21 	lds	r22, 0x214E
    2144:	70 91 4f 21 	lds	r23, 0x214F
    2148:	48 17       	cp	r20, r24
    214a:	59 07       	cpc	r21, r25
    214c:	6a 07       	cpc	r22, r26
    214e:	7b 07       	cpc	r23, r27
    2150:	20 f4       	brcc	.+8      	; 0x215a <internal_process_doorLock+0x25a>
			{
				gInternalState = LOCK_SET;
    2152:	87 e0       	ldi	r24, 0x07	; 7
    2154:	80 93 06 22 	sts	0x2206, r24
    2158:	94 c0       	rjmp	.+296    	; 0x2282 <internal_process_doorLock+0x382>
				
			}
			else
			{
				if(get_internal_door_lock() == false)
    215a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    215e:	81 11       	cpse	r24, r1
    2160:	90 c0       	rjmp	.+288    	; 0x2282 <internal_process_doorLock+0x382>
				{
					//for(int i=0;i<4;i++)
					//if(door_status(0,true)==true)
					door_status(1,true);
    2162:	61 e0       	ldi	r22, 0x01	; 1
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>
	
					gInternalState = UNLOCK_EXTERN_DOOR_OPEN;
    216a:	85 e0       	ldi	r24, 0x05	; 5
    216c:	f3 cf       	rjmp	.-26     	; 0x2154 <internal_process_doorLock+0x254>
				}
			}
			break;
		case UNLOCK_EXTERN_DOOR_OPEN:
			if(get_internal_door_lock() == true)
    216e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	89 f4       	brne	.+34     	; 0x2198 <internal_process_doorLock+0x298>
			{
	
				if(close_chk_e_door_count==-1)
    2176:	80 91 2c 20 	lds	r24, 0x202C
    217a:	90 91 2d 20 	lds	r25, 0x202D
    217e:	01 96       	adiw	r24, 0x01	; 1
    2180:	21 f4       	brne	.+8      	; 0x218a <internal_process_doorLock+0x28a>
				{
					close_chk_e_door_count=0;
    2182:	10 92 2c 20 	sts	0x202C, r1
    2186:	10 92 2d 20 	sts	0x202D, r1
					//close_chk_e_door_count++;
				}
				
				if(close_chk_e_door_count>1)
    218a:	80 91 2c 20 	lds	r24, 0x202C
    218e:	90 91 2d 20 	lds	r25, 0x202D
    2192:	02 97       	sbiw	r24, 0x02	; 2
    2194:	44 f4       	brge	.+16     	; 0x21a6 <internal_process_doorLock+0x2a6>
    2196:	75 c0       	rjmp	.+234    	; 0x2282 <internal_process_doorLock+0x382>
					gInternalState = LOCK_END_WAIT;
				}
			}
			else
			{
				close_chk_i_door_count=-1;
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	9f ef       	ldi	r25, 0xFF	; 255
    219c:	80 93 2a 20 	sts	0x202A, r24
    21a0:	90 93 2b 20 	sts	0x202B, r25
    21a4:	6e c0       	rjmp	.+220    	; 0x2282 <internal_process_doorLock+0x382>
			}
			break;
		case LOCK_SET:
			#ifndef UNLOCK_DEBUG
			set_cabin_leftdoor(CLOSE);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
			lockActiveTime=0;
    21ac:	10 92 20 20 	sts	0x2020, r1
    21b0:	10 92 21 20 	sts	0x2021, r1
			#else
			set_communication_led(true);
			lockActiveTime=0;
			#endif
			
			if(gEnv.door_lock_time == 0)
    21b4:	80 91 f2 21 	lds	r24, 0x21F2
    21b8:	81 11       	cpse	r24, r1
    21ba:	0c c0       	rjmp	.+24     	; 0x21d4 <internal_process_doorLock+0x2d4>
			timerOut = gGlobal500MsTimer + 1;
    21bc:	80 91 5e 21 	lds	r24, 0x215E
    21c0:	90 91 5f 21 	lds	r25, 0x215F
    21c4:	a0 91 60 21 	lds	r26, 0x2160
    21c8:	b0 91 61 21 	lds	r27, 0x2161
    21cc:	01 96       	adiw	r24, 0x01	; 1
    21ce:	a1 1d       	adc	r26, r1
    21d0:	b1 1d       	adc	r27, r1
    21d2:	15 c0       	rjmp	.+42     	; 0x21fe <internal_process_doorLock+0x2fe>
			else
			timerOut = gGlobal500MsTimer + (u32)gEnv.door_lock_time * (u32)2;
    21d4:	40 91 5e 21 	lds	r20, 0x215E
    21d8:	50 91 5f 21 	lds	r21, 0x215F
    21dc:	60 91 60 21 	lds	r22, 0x2160
    21e0:	70 91 61 21 	lds	r23, 0x2161
    21e4:	80 91 f2 21 	lds	r24, 0x21F2
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e0       	ldi	r26, 0x00	; 0
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	88 0f       	add	r24, r24
    21f0:	99 1f       	adc	r25, r25
    21f2:	aa 1f       	adc	r26, r26
    21f4:	bb 1f       	adc	r27, r27
    21f6:	84 0f       	add	r24, r20
    21f8:	95 1f       	adc	r25, r21
    21fa:	a6 1f       	adc	r26, r22
    21fc:	b7 1f       	adc	r27, r23
    21fe:	80 93 4c 21 	sts	0x214C, r24
    2202:	90 93 4d 21 	sts	0x214D, r25
    2206:	a0 93 4e 21 	sts	0x214E, r26
    220a:	b0 93 4f 21 	sts	0x214F, r27
			
			gInternalState = LOCK_END_WAIT;
    220e:	88 e0       	ldi	r24, 0x08	; 8
    2210:	a1 cf       	rjmp	.-190    	; 0x2154 <internal_process_doorLock+0x254>
			break;
			
		case LOCK_END_WAIT:
			if(timerOut < gGlobal500MsTimer)
    2212:	80 91 5e 21 	lds	r24, 0x215E
    2216:	90 91 5f 21 	lds	r25, 0x215F
    221a:	a0 91 60 21 	lds	r26, 0x2160
    221e:	b0 91 61 21 	lds	r27, 0x2161
    2222:	40 91 4c 21 	lds	r20, 0x214C
    2226:	50 91 4d 21 	lds	r21, 0x214D
    222a:	60 91 4e 21 	lds	r22, 0x214E
    222e:	70 91 4f 21 	lds	r23, 0x214F
    2232:	48 17       	cp	r20, r24
    2234:	59 07       	cpc	r21, r25
    2236:	6a 07       	cpc	r22, r26
    2238:	7b 07       	cpc	r23, r27
    223a:	18 f5       	brcc	.+70     	; 0x2282 <internal_process_doorLock+0x382>
			{
				#ifndef UNLOCK_DEBUG
				set_cabin_leftdoor(STOP);
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				set_cabin_leftdoor(STOP2);
    2242:	83 e0       	ldi	r24, 0x03	; 3
    2244:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
				lockActiveTime=-1;
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	9f ef       	ldi	r25, 0xFF	; 255
    224c:	80 93 20 20 	sts	0x2020, r24
    2250:	90 93 21 20 	sts	0x2021, r25
				#else
				set_communication_led(false);
				lockActiveTime=-1;
				#endif
				door_status(1,false);
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>
				set_unlock_led(false);
    225c:	80 e0       	ldi	r24, 0x00	; 0
    225e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
				set_lock_led(true);
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_lock_led>
				ret = door_lock_status(true);
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <door_lock_status>
				
	
				gInternalState = LOCK;
    226e:	10 92 06 22 	sts	0x2206, r1
				gGlobal500MsTimer=0;
    2272:	10 92 5e 21 	sts	0x215E, r1
    2276:	10 92 5f 21 	sts	0x215F, r1
    227a:	10 92 60 21 	sts	0x2160, r1
    227e:	10 92 61 21 	sts	0x2161, r1
			}
			break;
	}
}
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	08 95       	ret

00002290 <internal_process_doorCheck>:


void internal_process_doorCheck(void)
{
    2290:	ef 92       	push	r14
    2292:	ff 92       	push	r15
    2294:	0f 93       	push	r16
    2296:	1f 93       	push	r17
    2298:	cf 93       	push	r28
    229a:	df 93       	push	r29
	static u32 timerOut;
	u8 sendOk = false;
	
	switch(gInternalState)
    229c:	80 91 06 22 	lds	r24, 0x2206
    22a0:	82 30       	cpi	r24, 0x02	; 2
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <internal_process_doorCheck+0x16>
    22a4:	d7 c0       	rjmp	.+430    	; 0x2454 <internal_process_doorCheck+0x1c4>
    22a6:	30 f4       	brcc	.+12     	; 0x22b4 <internal_process_doorCheck+0x24>
    22a8:	88 23       	and	r24, r24
    22aa:	59 f0       	breq	.+22     	; 0x22c2 <internal_process_doorCheck+0x32>
    22ac:	81 30       	cpi	r24, 0x01	; 1
    22ae:	09 f4       	brne	.+2      	; 0x22b2 <internal_process_doorCheck+0x22>
    22b0:	a5 c0       	rjmp	.+330    	; 0x23fc <internal_process_doorCheck+0x16c>
    22b2:	15 c1       	rjmp	.+554    	; 0x24de <internal_process_doorCheck+0x24e>
    22b4:	83 30       	cpi	r24, 0x03	; 3
    22b6:	09 f4       	brne	.+2      	; 0x22ba <internal_process_doorCheck+0x2a>
    22b8:	db c0       	rjmp	.+438    	; 0x2470 <internal_process_doorCheck+0x1e0>
    22ba:	84 30       	cpi	r24, 0x04	; 4
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <internal_process_doorCheck+0x30>
    22be:	f7 c0       	rjmp	.+494    	; 0x24ae <internal_process_doorCheck+0x21e>
    22c0:	0e c1       	rjmp	.+540    	; 0x24de <internal_process_doorCheck+0x24e>
	{
		case IDLE_STATUS:
			if(get_internal_door_lock() == false)
    22c2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    22c6:	81 11       	cpse	r24, r1
    22c8:	88 c0       	rjmp	.+272    	; 0x23da <internal_process_doorCheck+0x14a>
			{
				if(lock_err_i_door_count == -1)
    22ca:	80 91 2e 20 	lds	r24, 0x202E
    22ce:	90 91 2f 20 	lds	r25, 0x202F
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	21 f4       	brne	.+8      	; 0x22de <internal_process_doorCheck+0x4e>
				{
					lock_err_i_door_count=0;
    22d6:	10 92 2e 20 	sts	0x202E, r1
    22da:	10 92 2f 20 	sts	0x202F, r1
				}
				
				
				if(lock_err_i_door_count > 0)
    22de:	80 91 2e 20 	lds	r24, 0x202E
    22e2:	90 91 2f 20 	lds	r25, 0x202F
    22e6:	18 16       	cp	r1, r24
    22e8:	19 06       	cpc	r1, r25
    22ea:	0c f0       	brlt	.+2      	; 0x22ee <internal_process_doorCheck+0x5e>
    22ec:	f8 c0       	rjmp	.+496    	; 0x24de <internal_process_doorCheck+0x24e>
				{

					if(gExternState == LOCK ||gExternState == LOCK_END_WAIT)
    22ee:	80 91 2d 22 	lds	r24, 0x222D
    22f2:	88 23       	and	r24, r24
    22f4:	29 f0       	breq	.+10     	; 0x2300 <internal_process_doorCheck+0x70>
    22f6:	80 91 2d 22 	lds	r24, 0x222D
    22fa:	88 30       	cpi	r24, 0x08	; 8
    22fc:	09 f0       	breq	.+2      	; 0x2300 <internal_process_doorCheck+0x70>
    22fe:	61 c0       	rjmp	.+194    	; 0x23c2 <internal_process_doorCheck+0x132>
					{
						gInternalState = DOOR_DELAY_STATUS;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	80 93 06 22 	sts	0x2206, r24
						for(int i=0;i<7;i++)
    2306:	c0 e0       	ldi	r28, 0x00	; 0
    2308:	d0 e0       	ldi	r29, 0x00	; 0
									pt_data[0] = 0x0d;		//output power -20dBm
									cc1101_8PATABLE_write_reg();
								}
								else if(i>5)
								{
									pt_data[0] = 0x60;		//output power 0dBm
    230a:	10 e6       	ldi	r17, 0x60	; 96
									pt_data[0] = 0x1d;		//output power -15dBm
									cc1101_8PATABLE_write_reg();
								}
								else if(i==5)
								{
									pt_data[0] = 0x0d;		//output power -20dBm
    230c:	0d e0       	ldi	r16, 0x0D	; 13
									pt_data[0] = 0x34;		//output power -10dBm
									cc1101_8PATABLE_write_reg();
								}
								else if(i==4)
								{
									pt_data[0] = 0x1d;		//output power -15dBm
    230e:	5d e1       	ldi	r21, 0x1D	; 29
    2310:	f5 2e       	mov	r15, r21
						{
							if(gEnv.unlockRootvanWaveUsed == true)
							{
								if(i==3)
								{
									pt_data[0] = 0x34;		//output power -10dBm
    2312:	64 e3       	ldi	r22, 0x34	; 52
    2314:	e6 2e       	mov	r14, r22
					if(gExternState == LOCK ||gExternState == LOCK_END_WAIT)
					{
						gInternalState = DOOR_DELAY_STATUS;
						for(int i=0;i<7;i++)
						{
							if(gEnv.unlockRootvanWaveUsed == true)
    2316:	80 91 fa 21 	lds	r24, 0x21FA
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	c9 f4       	brne	.+50     	; 0x2350 <internal_process_doorCheck+0xc0>
							{
								if(i==3)
    231e:	c3 30       	cpi	r28, 0x03	; 3
    2320:	d1 05       	cpc	r29, r1
    2322:	19 f4       	brne	.+6      	; 0x232a <internal_process_doorCheck+0x9a>
								{
									pt_data[0] = 0x34;		//output power -10dBm
    2324:	e0 92 16 20 	sts	0x2016, r14
    2328:	11 c0       	rjmp	.+34     	; 0x234c <internal_process_doorCheck+0xbc>
									cc1101_8PATABLE_write_reg();
								}
								else if(i==4)
    232a:	c4 30       	cpi	r28, 0x04	; 4
    232c:	d1 05       	cpc	r29, r1
    232e:	19 f4       	brne	.+6      	; 0x2336 <internal_process_doorCheck+0xa6>
								{
									pt_data[0] = 0x1d;		//output power -15dBm
    2330:	f0 92 16 20 	sts	0x2016, r15
    2334:	0b c0       	rjmp	.+22     	; 0x234c <internal_process_doorCheck+0xbc>
									cc1101_8PATABLE_write_reg();
								}
								else if(i==5)
    2336:	c5 30       	cpi	r28, 0x05	; 5
    2338:	d1 05       	cpc	r29, r1
    233a:	19 f4       	brne	.+6      	; 0x2342 <internal_process_doorCheck+0xb2>
								{
									pt_data[0] = 0x0d;		//output power -20dBm
    233c:	00 93 16 20 	sts	0x2016, r16
    2340:	05 c0       	rjmp	.+10     	; 0x234c <internal_process_doorCheck+0xbc>
									cc1101_8PATABLE_write_reg();
								}
								else if(i>5)
    2342:	c6 30       	cpi	r28, 0x06	; 6
    2344:	d1 05       	cpc	r29, r1
    2346:	21 f4       	brne	.+8      	; 0x2350 <internal_process_doorCheck+0xc0>
								{
									pt_data[0] = 0x60;		//output power 0dBm
    2348:	10 93 16 20 	sts	0x2016, r17
									cc1101_8PATABLE_write_reg();
    234c:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
								}
							}
							
							if(emg_send(1,true)==true)
    2350:	61 e0       	ldi	r22, 0x01	; 1
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	0e 94 46 0c 	call	0x188c	; 0x188c <emg_send>
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	39 f0       	breq	.+14     	; 0x236a <internal_process_doorCheck+0xda>
							{
								sendOk=true;
								break;
							}
							wdt_reset();
    235c:	a8 95       	wdr
				{

					if(gExternState == LOCK ||gExternState == LOCK_END_WAIT)
					{
						gInternalState = DOOR_DELAY_STATUS;
						for(int i=0;i<7;i++)
    235e:	21 96       	adiw	r28, 0x01	; 1
    2360:	c7 30       	cpi	r28, 0x07	; 7
    2362:	d1 05       	cpc	r29, r1
    2364:	c1 f6       	brne	.-80     	; 0x2316 <internal_process_doorCheck+0x86>


void internal_process_doorCheck(void)
{
	static u32 timerOut;
	u8 sendOk = false;
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	01 c0       	rjmp	.+2      	; 0x236c <internal_process_doorCheck+0xdc>
								}
							}
							
							if(emg_send(1,true)==true)
							{
								sendOk=true;
    236a:	21 e0       	ldi	r18, 0x01	; 1
								break;
							}
							wdt_reset();
						}

						if(devicePowerStart==true && sendOk!=true)
    236c:	80 91 24 20 	lds	r24, 0x2024
    2370:	90 91 25 20 	lds	r25, 0x2025
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	39 f4       	brne	.+14     	; 0x2386 <internal_process_doorCheck+0xf6>
    2378:	21 30       	cpi	r18, 0x01	; 1
    237a:	29 f0       	breq	.+10     	; 0x2386 <internal_process_doorCheck+0xf6>
						{
							//devicePowerStart=false;
							checkTwiceDoorWaitCount=0;
    237c:	10 92 22 20 	sts	0x2022, r1
    2380:	10 92 23 20 	sts	0x2023, r1
    2384:	04 c0       	rjmp	.+8      	; 0x238e <internal_process_doorCheck+0xfe>
						}
						else
						{
							devicePowerStart=false;
    2386:	10 92 24 20 	sts	0x2024, r1
    238a:	10 92 25 20 	sts	0x2025, r1
						}
						
						timerOut = gGlobalTimer + (u32)gEnv.door_delay_time;
    238e:	80 91 62 21 	lds	r24, 0x2162
    2392:	90 91 63 21 	lds	r25, 0x2163
    2396:	a0 91 64 21 	lds	r26, 0x2164
    239a:	b0 91 65 21 	lds	r27, 0x2165
    239e:	20 91 f7 21 	lds	r18, 0x21F7
    23a2:	82 0f       	add	r24, r18
    23a4:	91 1d       	adc	r25, r1
    23a6:	a1 1d       	adc	r26, r1
    23a8:	b1 1d       	adc	r27, r1
    23aa:	80 93 48 21 	sts	0x2148, r24
    23ae:	90 93 49 21 	sts	0x2149, r25
    23b2:	a0 93 4a 21 	sts	0x214A, r26
    23b6:	b0 93 4b 21 	sts	0x214B, r27
						buzzer_toggle = true;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	80 93 67 21 	sts	0x2167, r24
    23c0:	8e c0       	rjmp	.+284    	; 0x24de <internal_process_doorCheck+0x24e>
						
					}
					else
					{
						gInternalState = DOOR_OPEN_STATUS;
    23c2:	82 e0       	ldi	r24, 0x02	; 2
    23c4:	80 93 06 22 	sts	0x2206, r24
						set_room_light(true);
    23c8:	81 e0       	ldi	r24, 0x01	; 1
			wdt_reset();
			
			break;

	}
}
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	1f 91       	pop	r17
    23d0:	0f 91       	pop	r16
    23d2:	ff 90       	pop	r15
    23d4:	ef 90       	pop	r14
						
					}
					else
					{
						gInternalState = DOOR_OPEN_STATUS;
						set_room_light(true);
    23d6:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <set_room_light>
				}

			}
			else
			{
				set_in_door_state_led(false);
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	0e 94 c7 04 	call	0x98e	; 0x98e <set_in_door_state_led>
				
				if(lock_err_i_door_count != -1)
    23e0:	80 91 2e 20 	lds	r24, 0x202E
    23e4:	90 91 2f 20 	lds	r25, 0x202F
    23e8:	01 96       	adiw	r24, 0x01	; 1
    23ea:	09 f4       	brne	.+2      	; 0x23ee <internal_process_doorCheck+0x15e>
    23ec:	78 c0       	rjmp	.+240    	; 0x24de <internal_process_doorCheck+0x24e>
				{
					lock_err_i_door_count = -1;
    23ee:	8f ef       	ldi	r24, 0xFF	; 255
    23f0:	9f ef       	ldi	r25, 0xFF	; 255
    23f2:	80 93 2e 20 	sts	0x202E, r24
    23f6:	90 93 2f 20 	sts	0x202F, r25
    23fa:	71 c0       	rjmp	.+226    	; 0x24de <internal_process_doorCheck+0x24e>
				}
			}
			break;
		case DOOR_DELAY_STATUS:
			if(timerOut < gGlobalTimer)
    23fc:	80 91 62 21 	lds	r24, 0x2162
    2400:	90 91 63 21 	lds	r25, 0x2163
    2404:	a0 91 64 21 	lds	r26, 0x2164
    2408:	b0 91 65 21 	lds	r27, 0x2165
    240c:	40 91 48 21 	lds	r20, 0x2148
    2410:	50 91 49 21 	lds	r21, 0x2149
    2414:	60 91 4a 21 	lds	r22, 0x214A
    2418:	70 91 4b 21 	lds	r23, 0x214B
    241c:	48 17       	cp	r20, r24
    241e:	59 07       	cpc	r21, r25
    2420:	6a 07       	cpc	r22, r26
    2422:	7b 07       	cpc	r23, r27
    2424:	30 f4       	brcc	.+12     	; 0x2432 <internal_process_doorCheck+0x1a2>
			{
				buzzer_toggle = false;
    2426:	10 92 67 21 	sts	0x2167, r1

				gInternalState= ERROR_STATUS;
    242a:	84 e0       	ldi	r24, 0x04	; 4
    242c:	80 93 06 22 	sts	0x2206, r24
    2430:	55 c0       	rjmp	.+170    	; 0x24dc <internal_process_doorCheck+0x24c>
			}
			else
			{
				if(gExternState == UNLOCK)
    2432:	80 91 2d 22 	lds	r24, 0x222D
    2436:	84 30       	cpi	r24, 0x04	; 4
    2438:	09 f0       	breq	.+2      	; 0x243c <internal_process_doorCheck+0x1ac>
    243a:	50 c0       	rjmp	.+160    	; 0x24dc <internal_process_doorCheck+0x24c>
				{

					gInternalState = DOOR_OPEN_STATUS;
    243c:	82 e0       	ldi	r24, 0x02	; 2
    243e:	80 93 06 22 	sts	0x2206, r24
					
					if(gEnv.door_error_reset == true)
    2442:	80 91 f8 21 	lds	r24, 0x21F8
    2446:	81 30       	cpi	r24, 0x01	; 1
    2448:	09 f0       	breq	.+2      	; 0x244c <internal_process_doorCheck+0x1bc>
    244a:	48 c0       	rjmp	.+144    	; 0x24dc <internal_process_doorCheck+0x24c>
					{
						emg_send(1,false);
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	0e 94 46 0c 	call	0x188c	; 0x188c <emg_send>
    2452:	44 c0       	rjmp	.+136    	; 0x24dc <internal_process_doorCheck+0x24c>

			wdt_reset();
			
			break;
		case DOOR_OPEN_STATUS:
			set_in_door_state_led(true);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	0e 94 c7 04 	call	0x98e	; 0x98e <set_in_door_state_led>
			set_room_light(true);
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <set_room_light>

			door_status(1,true);
    2460:	61 e0       	ldi	r22, 0x01	; 1
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>

			gInternalState= DOOR_CLOSE_WAIT_STATUS;
    2468:	83 e0       	ldi	r24, 0x03	; 3
    246a:	80 93 06 22 	sts	0x2206, r24
			break;
    246e:	37 c0       	rjmp	.+110    	; 0x24de <internal_process_doorCheck+0x24e>
			
		case DOOR_CLOSE_WAIT_STATUS:
			if(get_internal_door_lock() == true)
    2470:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    2474:	81 30       	cpi	r24, 0x01	; 1
    2476:	61 f4       	brne	.+24     	; 0x2490 <internal_process_doorCheck+0x200>
			{
				set_in_door_state_led(false);
    2478:	80 e0       	ldi	r24, 0x00	; 0
    247a:	0e 94 c7 04 	call	0x98e	; 0x98e <set_in_door_state_led>
				set_room_light(false);
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <set_room_light>

				door_status(1,false);
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>

				gInternalState= IDLE_STATUS;
    248c:	10 92 06 22 	sts	0x2206, r1
			}

			if(checkTwiceDoorWaitCount > 45)
    2490:	80 91 22 20 	lds	r24, 0x2022
    2494:	90 91 23 20 	lds	r25, 0x2023
    2498:	8e 97       	sbiw	r24, 0x2e	; 46
    249a:	0c f1       	brlt	.+66     	; 0x24de <internal_process_doorCheck+0x24e>
			{
				gInternalState = IDLE_STATUS;
    249c:	10 92 06 22 	sts	0x2206, r1
				checkTwiceDoorWaitCount=-1;
    24a0:	8f ef       	ldi	r24, 0xFF	; 255
    24a2:	9f ef       	ldi	r25, 0xFF	; 255
    24a4:	80 93 22 20 	sts	0x2022, r24
    24a8:	90 93 23 20 	sts	0x2023, r25
    24ac:	18 c0       	rjmp	.+48     	; 0x24de <internal_process_doorCheck+0x24e>
			
			
			
			break;
		case ERROR_STATUS:
			if(get_internal_door_lock() == true)
    24ae:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    24b2:	81 30       	cpi	r24, 0x01	; 1
    24b4:	29 f4       	brne	.+10     	; 0x24c0 <internal_process_doorCheck+0x230>
			{
				door_status(1,false);
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	0e 94 8a 0a 	call	0x1514	; 0x1514 <door_status>


				gInternalState= IDLE_STATUS;
    24bc:	10 92 06 22 	sts	0x2206, r1
			}

			if(checkTwiceDoorWaitCount > 45)
    24c0:	80 91 22 20 	lds	r24, 0x2022
    24c4:	90 91 23 20 	lds	r25, 0x2023
    24c8:	8e 97       	sbiw	r24, 0x2e	; 46
    24ca:	44 f0       	brlt	.+16     	; 0x24dc <internal_process_doorCheck+0x24c>
			{
				gInternalState = IDLE_STATUS;
    24cc:	10 92 06 22 	sts	0x2206, r1
				checkTwiceDoorWaitCount=-1;
    24d0:	8f ef       	ldi	r24, 0xFF	; 255
    24d2:	9f ef       	ldi	r25, 0xFF	; 255
    24d4:	80 93 22 20 	sts	0x2022, r24
    24d8:	90 93 23 20 	sts	0x2023, r25
			}
			
			wdt_reset();
    24dc:	a8 95       	wdr
			
			break;

	}
}
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	08 95       	ret

000024ec <button_check>:




void button_check(void)
{
    24ec:	cf 93       	push	r28
	// switch check
	if(btn_door_lock_test != get_door_lock_test())
    24ee:	c0 91 07 22 	lds	r28, 0x2207
    24f2:	0e 94 45 04 	call	0x88a	; 0x88a <get_door_lock_test>
    24f6:	c8 17       	cp	r28, r24
    24f8:	99 f0       	breq	.+38     	; 0x2520 <button_check+0x34>
	{
		if(get_door_lock_test() == true)
    24fa:	0e 94 45 04 	call	0x88a	; 0x88a <get_door_lock_test>
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	29 f4       	brne	.+10     	; 0x250c <button_check+0x20>
		{
			btn_door_lock_test_count=0;
    2502:	10 92 34 20 	sts	0x2034, r1
    2506:	10 92 35 20 	sts	0x2035, r1
    250a:	04 c0       	rjmp	.+8      	; 0x2514 <button_check+0x28>
			buzzer_on(true);
		}
		else if(get_door_lock_test() == false)
    250c:	0e 94 45 04 	call	0x88a	; 0x88a <get_door_lock_test>
    2510:	81 11       	cpse	r24, r1
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <button_check+0x2c>
	
}

void buzzer_on(u8 buz)
{
	set_buzzer(buz);
    2514:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_buzzer>
		else if(get_door_lock_test() == false)
		{
			buzzer_on(false);
		}
		
		btn_door_lock_test = get_door_lock_test();
    2518:	0e 94 45 04 	call	0x88a	; 0x88a <get_door_lock_test>
    251c:	80 93 07 22 	sts	0x2207, r24
	}
}
    2520:	cf 91       	pop	r28
    2522:	08 95       	ret

00002524 <button_process>:



void button_process(void)
{
	if(btn_door_lock_test_count > 0)
    2524:	80 91 34 20 	lds	r24, 0x2034
    2528:	90 91 35 20 	lds	r25, 0x2035
    252c:	18 16       	cp	r1, r24
    252e:	19 06       	cpc	r1, r25
    2530:	2c f5       	brge	.+74     	; 0x257c <button_process+0x58>
	{
		if(get_door_lock_test() == true)
    2532:	0e 94 45 04 	call	0x88a	; 0x88a <get_door_lock_test>
    2536:	81 30       	cpi	r24, 0x01	; 1
    2538:	d9 f4       	brne	.+54     	; 0x2570 <button_process+0x4c>
		{
			if(btn_door_lock_test_count > 2)
    253a:	80 91 34 20 	lds	r24, 0x2034
    253e:	90 91 35 20 	lds	r25, 0x2035
    2542:	03 97       	sbiw	r24, 0x03	; 3
    2544:	dc f0       	brlt	.+54     	; 0x257c <button_process+0x58>
			{

				check_id_send();
    2546:	0e 94 80 09 	call	0x1300	; 0x1300 <check_id_send>
				btn_door_lock_test_count = -1;
    254a:	8f ef       	ldi	r24, 0xFF	; 255
    254c:	9f ef       	ldi	r25, 0xFF	; 255
    254e:	80 93 34 20 	sts	0x2034, r24
    2552:	90 93 35 20 	sts	0x2035, r25
	
}

void buzzer_on(u8 buz)
{
	set_buzzer(buz);
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_buzzer>
    255c:	2f ef       	ldi	r18, 0xFF	; 255
    255e:	87 ea       	ldi	r24, 0xA7	; 167
    2560:	91 e6       	ldi	r25, 0x61	; 97
    2562:	21 50       	subi	r18, 0x01	; 1
    2564:	80 40       	sbci	r24, 0x00	; 0
    2566:	90 40       	sbci	r25, 0x00	; 0
    2568:	e1 f7       	brne	.-8      	; 0x2562 <button_process+0x3e>
    256a:	00 c0       	rjmp	.+0      	; 0x256c <button_process+0x48>
    256c:	00 00       	nop
    256e:	08 95       	ret
				
			}
		}
		else
		{
			btn_door_lock_test_count = -1;
    2570:	8f ef       	ldi	r24, 0xFF	; 255
    2572:	9f ef       	ldi	r25, 0xFF	; 255
    2574:	80 93 34 20 	sts	0x2034, r24
    2578:	90 93 35 20 	sts	0x2035, r25
    257c:	08 95       	ret

0000257e <main>:


volatile u8 door_state,old_door_state;

int main(void)
{
    257e:	cf 93       	push	r28
    2580:	df 93       	push	r29
    2582:	00 d0       	rcall	.+0      	; 0x2584 <main+0x6>
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
	int length;
	u32 i;
	int rssi_fixed;
	
	
	setClockTo32MHz();	
    2588:	0e 94 2d 05 	call	0xa5a	; 0xa5a <setClockTo32MHz>
	
	port_init();
    258c:	0e 94 41 04 	call	0x882	; 0x882 <port_init>
	spi_init();
    2590:	0e 94 a0 03 	call	0x740	; 0x740 <spi_init>
	env_init();
    2594:	0e 94 55 03 	call	0x6aa	; 0x6aa <env_init>
	timer_setup();
    2598:	0e 94 1b 07 	call	0xe36	; 0xe36 <timer_setup>
	TCC0_INTCTRLA = 0x03;				// enable OVF interrupt with high level
    259c:	83 e0       	ldi	r24, 0x03	; 3
    259e:	80 93 06 08 	sts	0x0806, r24
	
	


	cc1100_init(delay_ms,spi_write_single,spi_read_single,spi_write,spi_read,spi_select,spi_deselect,spi_read_somi);
    25a2:	ae ed       	ldi	r26, 0xDE	; 222
    25a4:	aa 2e       	mov	r10, r26
    25a6:	a3 e0       	ldi	r26, 0x03	; 3
    25a8:	ba 2e       	mov	r11, r26
    25aa:	bb ed       	ldi	r27, 0xDB	; 219
    25ac:	cb 2e       	mov	r12, r27
    25ae:	b3 e0       	ldi	r27, 0x03	; 3
    25b0:	db 2e       	mov	r13, r27
    25b2:	18 ed       	ldi	r17, 0xD8	; 216
    25b4:	e1 2e       	mov	r14, r17
    25b6:	13 e0       	ldi	r17, 0x03	; 3
    25b8:	f1 2e       	mov	r15, r17
    25ba:	06 ec       	ldi	r16, 0xC6	; 198
    25bc:	13 e0       	ldi	r17, 0x03	; 3
    25be:	24 eb       	ldi	r18, 0xB4	; 180
    25c0:	33 e0       	ldi	r19, 0x03	; 3
    25c2:	41 eb       	ldi	r20, 0xB1	; 177
    25c4:	53 e0       	ldi	r21, 0x03	; 3
    25c6:	64 ea       	ldi	r22, 0xA4	; 164
    25c8:	73 e0       	ldi	r23, 0x03	; 3
    25ca:	80 e1       	ldi	r24, 0x10	; 16
    25cc:	95 e0       	ldi	r25, 0x05	; 5
    25ce:	0e 94 31 01 	call	0x262	; 0x262 <cc1100_init>
	cc1101_init_reg();
    25d2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <cc1101_init_reg>
	
	if(gEnv.unlockRootvanWaveUsed == true)
    25d6:	80 91 fa 21 	lds	r24, 0x21FA
    25da:	81 30       	cpi	r24, 0x01	; 1
    25dc:	19 f4       	brne	.+6      	; 0x25e4 <main+0x66>
	{

		pt_data[0]=0x60;		//Output wave power 0dBm   add 20160408
    25de:	80 e6       	ldi	r24, 0x60	; 96
    25e0:	80 93 16 20 	sts	0x2016, r24
	}
	
	cc1101_8PATABLE_write_reg();
    25e4:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>

	wdt_enable(0x26);		//wdt timeout 4sec enable
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	97 e2       	ldi	r25, 0x27	; 39
    25ec:	88 ed       	ldi	r24, 0xD8	; 216
    25ee:	08 b6       	in	r0, 0x38	; 56
    25f0:	18 be       	out	0x38, r1	; 56
    25f2:	84 bf       	out	0x34, r24	; 52
    25f4:	90 93 80 00 	sts	0x0080, r25
    25f8:	20 91 82 00 	lds	r18, 0x0082
    25fc:	21 fd       	sbrc	r18, 1
    25fe:	fc cf       	rjmp	.-8      	; 0x25f8 <main+0x7a>
    2600:	08 be       	out	0x38, r0	; 56
	wdt_reset();
    2602:	a8 95       	wdr
	
	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2604:	87 e0       	ldi	r24, 0x07	; 7
    2606:	80 93 a2 00 	sts	0x00A2, r24
	sei();	
    260a:	78 94       	sei
	set_power_led(true);
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	0e 94 aa 04 	call	0x954	; 0x954 <set_power_led>
	
	gEnv.door_wait_time = 20;
    2612:	84 e1       	ldi	r24, 0x14	; 20
    2614:	80 93 f6 21 	sts	0x21F6, r24
	//gEnv.door_unlock_time = 3;
	gEnv.door_unlock_time = 1;
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	80 93 f3 21 	sts	0x21F3, r24
	gEnv.door_open_time = 2;
    261e:	82 e0       	ldi	r24, 0x02	; 2
    2620:	80 93 f4 21 	sts	0x21F4, r24
	gEnv.door_lock_time=0;
    2624:	10 92 f2 21 	sts	0x21F2, r1
	gEnv.door_close_time = 2; 
    2628:	80 93 f5 21 	sts	0x21F5, r24
	//gEnv.door_delay_time = 10;
	//gEnv.door_delay_time = 2;
	gEnv.door_delay_time = 0;
    262c:	10 92 f7 21 	sts	0x21F7, r1
	gEnv.door_error_reset = false;
    2630:	10 92 f8 21 	sts	0x21F8, r1
	
	
	check_id_send();
    2634:	0e 94 80 09 	call	0x1300	; 0x1300 <check_id_send>
	checkRootvantype();
    2638:	0e 94 ba 09 	call	0x1374	; 0x1374 <checkRootvantype>
	
	
	if(get_extern_door_lock() == false || get_internal_door_lock() == false)
    263c:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    2640:	81 11       	cpse	r24, r1
    2642:	06 c0       	rjmp	.+12     	; 0x2650 <main+0xd2>
	{
		door_state = old_door_state = true; // open
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	80 93 2a 22 	sts	0x222A, r24
    264a:	80 93 05 22 	sts	0x2205, r24
    264e:	08 c0       	rjmp	.+16     	; 0x2660 <main+0xe2>
	
	check_id_send();
	checkRootvantype();
	
	
	if(get_extern_door_lock() == false || get_internal_door_lock() == false)
    2650:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    2654:	88 23       	and	r24, r24
    2656:	b1 f3       	breq	.-20     	; 0x2644 <main+0xc6>
	{
		door_state = old_door_state = true; // open
	}
	else
	{
		door_state = old_door_state = false;
    2658:	10 92 2a 22 	sts	0x222A, r1
    265c:	10 92 05 22 	sts	0x2205, r1
	}
	
	if(!((~get_dly() & 0x0f) == 0x00 && (~get_test() & 0x0f) == 0x00))
    2660:	0e 94 ef 04 	call	0x9de	; 0x9de <get_dly>
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	80 95       	com	r24
    2668:	90 95       	com	r25
    266a:	8f 70       	andi	r24, 0x0F	; 15
    266c:	99 27       	eor	r25, r25
    266e:	89 2b       	or	r24, r25
    2670:	29 f0       	breq	.+10     	; 0x267c <main+0xfe>
	{
		mentenece_mode = 0;
    2672:	10 92 28 20 	sts	0x2028, r1
    2676:	10 92 29 20 	sts	0x2029, r1
    267a:	09 c0       	rjmp	.+18     	; 0x268e <main+0x110>
	else
	{
		door_state = old_door_state = false;
	}
	
	if(!((~get_dly() & 0x0f) == 0x00 && (~get_test() & 0x0f) == 0x00))
    267c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <get_test>
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	80 95       	com	r24
    2684:	90 95       	com	r25
    2686:	8f 70       	andi	r24, 0x0F	; 15
    2688:	99 27       	eor	r25, r25
    268a:	89 2b       	or	r24, r25
    268c:	91 f7       	brne	.-28     	; 0x2672 <main+0xf4>
	{
		mentenece_mode = 0;
	}
	
	
	test_mode = ~get_dly() & 0x0f;
    268e:	0e 94 ef 04 	call	0x9de	; 0x9de <get_dly>
    2692:	80 95       	com	r24
    2694:	8f 70       	andi	r24, 0x0F	; 15
    2696:	80 93 2c 22 	sts	0x222C, r24
		//wdt_reset();
	}
	#endif


	set_cabin_leftdoor(STOP);
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
	set_cabin_leftdoor(STOP2);
    26a0:	83 e0       	ldi	r24, 0x03	; 3
    26a2:	0e 94 76 04 	call	0x8ec	; 0x8ec <set_cabin_leftdoor>
	lockActiveTime=-1;
    26a6:	8f ef       	ldi	r24, 0xFF	; 255
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	80 93 20 20 	sts	0x2020, r24
    26ae:	90 93 21 20 	sts	0x2021, r25
	


	set_unlock_led(false);
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <set_unlock_led>
	set_lock_led(true);
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	0e 94 db 04 	call	0x9b6	; 0x9b6 <set_lock_led>
	door_lock_status(true);
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	0e 94 65 0b 	call	0x16ca	; 0x16ca <door_lock_status>
		}
		else
		{
			if(pt_data[0] != 0xc0)
			{
				pt_data[0] = 0xc0;
    26c4:	10 ec       	ldi	r17, 0xC0	; 192
		
		if(gEnv.unlockRootvanWaveUsed == true)
		{
			if(pt_data[0] != 0x60)
			{
				pt_data[0] = 0x60;
    26c6:	00 e6       	ldi	r16, 0x60	; 96
								rssi_fixed = ((char)rssi/2) - 74;
							}
							
							if(rssi_fixed < -25)
							{
								pt_data[0] = 0x0e;		//output power -20dBm
    26c8:	ee e0       	ldi	r30, 0x0E	; 14
    26ca:	fe 2e       	mov	r15, r30
		cc1100_cmd_idle();
		

		
		{
			gEnv.door_wait_time = 20;
    26cc:	f4 e1       	ldi	r31, 0x14	; 20
    26ce:	ef 2e       	mov	r14, r31
	set_lock_led(true);
	door_lock_status(true);
	
    while(1)
    {
		wdt_reset();
    26d0:	a8 95       	wdr
		
		if(gEnv.unlockRootvanWaveUsed == true)
    26d2:	90 91 fa 21 	lds	r25, 0x21FA
    26d6:	80 91 16 20 	lds	r24, 0x2016
    26da:	91 30       	cpi	r25, 0x01	; 1
    26dc:	29 f4       	brne	.+10     	; 0x26e8 <main+0x16a>
		{
			if(pt_data[0] != 0x60)
    26de:	80 36       	cpi	r24, 0x60	; 96
    26e0:	49 f0       	breq	.+18     	; 0x26f4 <main+0x176>
			{
				pt_data[0] = 0x60;
    26e2:	00 93 16 20 	sts	0x2016, r16
    26e6:	04 c0       	rjmp	.+8      	; 0x26f0 <main+0x172>
				cc1101_8PATABLE_write_reg();
			}
		}
		else
		{
			if(pt_data[0] != 0xc0)
    26e8:	80 3c       	cpi	r24, 0xC0	; 192
    26ea:	21 f0       	breq	.+8      	; 0x26f4 <main+0x176>
			{
				pt_data[0] = 0xc0;
    26ec:	10 93 16 20 	sts	0x2016, r17
				cc1101_8PATABLE_write_reg();
    26f0:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
		}


	#if 1
		
		set_freq();
    26f4:	0e 94 3c 05 	call	0xa78	; 0xa78 <set_freq>
			g_length = cc1101_rx((u8 *)&gPacket,&rssi,&lqi,RX_WOR);

			sleep_cansel_count = 0;
		}
		#else
		g_length = cc1101_rx((u8 *)&gPacket,&rssi,&lqi,RX_NOMAL);
    26f8:	22 e0       	ldi	r18, 0x02	; 2
    26fa:	ae 01       	movw	r20, r28
    26fc:	4f 5f       	subi	r20, 0xFF	; 255
    26fe:	5f 4f       	sbci	r21, 0xFF	; 255
    2700:	be 01       	movw	r22, r28
    2702:	6e 5f       	subi	r22, 0xFE	; 254
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	8e e0       	ldi	r24, 0x0E	; 14
    2708:	92 e2       	ldi	r25, 0x22	; 34
    270a:	0e 94 00 06 	call	0xc00	; 0xc00 <cc1101_rx>
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	80 93 08 22 	sts	0x2208, r24
    2714:	90 93 09 22 	sts	0x2209, r25
		#endif
		


		if(g_length == sizeof(packet_t))
    2718:	80 91 08 22 	lds	r24, 0x2208
    271c:	90 91 09 22 	lds	r25, 0x2209
    2720:	4c 97       	sbiw	r24, 0x1c	; 28
    2722:	09 f0       	breq	.+2      	; 0x2726 <main+0x1a8>
    2724:	32 c1       	rjmp	.+612    	; 0x298a <main+0x40c>
		{
			gMasterId = gPacket.hdr.master_id;
    2726:	80 91 13 22 	lds	r24, 0x2213
    272a:	90 91 14 22 	lds	r25, 0x2214
    272e:	a0 91 15 22 	lds	r26, 0x2215
    2732:	b0 91 16 22 	lds	r27, 0x2216
    2736:	80 93 0a 22 	sts	0x220A, r24
    273a:	90 93 0b 22 	sts	0x220B, r25
    273e:	a0 93 0c 22 	sts	0x220C, r26
    2742:	b0 93 0d 22 	sts	0x220D, r27
			//gtemp = ~get_dly() & 0x0c;
			gtemp = ~get_dly() & 0x0f;
    2746:	0e 94 ef 04 	call	0x9de	; 0x9de <get_dly>
    274a:	80 95       	com	r24
    274c:	8f 70       	andi	r24, 0x0F	; 15
    274e:	80 93 2e 22 	sts	0x222E, r24
			if((gtemp) == 0x06)
    2752:	80 91 2e 22 	lds	r24, 0x222E
    2756:	86 30       	cpi	r24, 0x06	; 6
    2758:	09 f0       	breq	.+2      	; 0x275c <main+0x1de>
    275a:	5d c0       	rjmp	.+186    	; 0x2816 <main+0x298>
			{
				if(gPacket.hdr.slave_id == 0xffffffff && gPacket.hdr.payload == PAYLOAD_SETUP_ID && deny_setup_id < 600)
    275c:	80 91 0f 22 	lds	r24, 0x220F
    2760:	90 91 10 22 	lds	r25, 0x2210
    2764:	a0 91 11 22 	lds	r26, 0x2211
    2768:	b0 91 12 22 	lds	r27, 0x2212
    276c:	8f 3f       	cpi	r24, 0xFF	; 255
    276e:	9f 4f       	sbci	r25, 0xFF	; 255
    2770:	af 4f       	sbci	r26, 0xFF	; 255
    2772:	bf 4f       	sbci	r27, 0xFF	; 255
    2774:	09 f0       	breq	.+2      	; 0x2778 <main+0x1fa>
    2776:	09 c1       	rjmp	.+530    	; 0x298a <main+0x40c>
    2778:	80 91 19 22 	lds	r24, 0x2219
    277c:	88 30       	cpi	r24, 0x08	; 8
    277e:	09 f0       	breq	.+2      	; 0x2782 <main+0x204>
    2780:	04 c1       	rjmp	.+520    	; 0x298a <main+0x40c>
    2782:	80 91 5a 21 	lds	r24, 0x215A
    2786:	90 91 5b 21 	lds	r25, 0x215B
    278a:	88 35       	cpi	r24, 0x58	; 88
    278c:	92 40       	sbci	r25, 0x02	; 2
    278e:	0c f0       	brlt	.+2      	; 0x2792 <main+0x214>
    2790:	fc c0       	rjmp	.+504    	; 0x298a <main+0x40c>
					
					setup_t * setup;
					int kk;
					

					comm_led();
    2792:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <comm_led>
					setup = (set_t *)	&gPacket;

					setup_ack(setup->id);
    2796:	60 91 1a 22 	lds	r22, 0x221A
    279a:	70 91 1b 22 	lds	r23, 0x221B
    279e:	80 91 1c 22 	lds	r24, 0x221C
    27a2:	90 91 1d 22 	lds	r25, 0x221D
    27a6:	0e 94 55 09 	call	0x12aa	; 0x12aa <setup_ack>
					
					gEnv.id = setup->id;
    27aa:	80 91 1a 22 	lds	r24, 0x221A
    27ae:	90 91 1b 22 	lds	r25, 0x221B
    27b2:	a0 91 1c 22 	lds	r26, 0x221C
    27b6:	b0 91 1d 22 	lds	r27, 0x221D
    27ba:	80 93 ee 21 	sts	0x21EE, r24
    27be:	90 93 ef 21 	sts	0x21EF, r25
    27c2:	a0 93 f0 21 	sts	0x21F0, r26
    27c6:	b0 93 f1 21 	sts	0x21F1, r27
					env_save(&gEnv);
    27ca:	8a ee       	ldi	r24, 0xEA	; 234
    27cc:	91 e2       	ldi	r25, 0x21	; 33
    27ce:	0e 94 30 03 	call	0x660	; 0x660 <env_save>
    27d2:	7a e0       	ldi	r23, 0x0A	; 10
    27d4:	c7 2e       	mov	r12, r23
    27d6:	d1 2c       	mov	r13, r1
					
					for(kk = 0 ; kk < 10 ; kk++)
					{
						set_in_door_state_led(1);
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	0e 94 c7 04 	call	0x98e	; 0x98e <set_in_door_state_led>
    27de:	8f ef       	ldi	r24, 0xFF	; 255
    27e0:	93 ec       	ldi	r25, 0xC3	; 195
    27e2:	29 e0       	ldi	r18, 0x09	; 9
    27e4:	81 50       	subi	r24, 0x01	; 1
    27e6:	90 40       	sbci	r25, 0x00	; 0
    27e8:	20 40       	sbci	r18, 0x00	; 0
    27ea:	e1 f7       	brne	.-8      	; 0x27e4 <main+0x266>
    27ec:	00 c0       	rjmp	.+0      	; 0x27ee <main+0x270>
    27ee:	00 00       	nop
						_delay_ms(100);
						set_in_door_state_led(0);
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	0e 94 c7 04 	call	0x98e	; 0x98e <set_in_door_state_led>
    27f6:	8f ef       	ldi	r24, 0xFF	; 255
    27f8:	93 ec       	ldi	r25, 0xC3	; 195
    27fa:	29 e0       	ldi	r18, 0x09	; 9
    27fc:	81 50       	subi	r24, 0x01	; 1
    27fe:	90 40       	sbci	r25, 0x00	; 0
    2800:	20 40       	sbci	r18, 0x00	; 0
    2802:	e1 f7       	brne	.-8      	; 0x27fc <main+0x27e>
    2804:	00 c0       	rjmp	.+0      	; 0x2806 <main+0x288>
    2806:	00 00       	nop
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	c8 1a       	sub	r12, r24
    280c:	d1 08       	sbc	r13, r1
					setup_ack(setup->id);
					
					gEnv.id = setup->id;
					env_save(&gEnv);
					
					for(kk = 0 ; kk < 10 ; kk++)
    280e:	c1 14       	cp	r12, r1
    2810:	d1 04       	cpc	r13, r1
    2812:	11 f7       	brne	.-60     	; 0x27d8 <main+0x25a>
    2814:	ba c0       	rjmp	.+372    	; 0x298a <main+0x40c>
						set_in_door_state_led(0);
						_delay_ms(100);
					}
				}
			}
			else if(gPacket.hdr.slave_id == gEnv.id)
    2816:	40 91 0f 22 	lds	r20, 0x220F
    281a:	50 91 10 22 	lds	r21, 0x2210
    281e:	60 91 11 22 	lds	r22, 0x2211
    2822:	70 91 12 22 	lds	r23, 0x2212
    2826:	80 91 ee 21 	lds	r24, 0x21EE
    282a:	90 91 ef 21 	lds	r25, 0x21EF
    282e:	a0 91 f0 21 	lds	r26, 0x21F0
    2832:	b0 91 f1 21 	lds	r27, 0x21F1
    2836:	48 17       	cp	r20, r24
    2838:	59 07       	cpc	r21, r25
    283a:	6a 07       	cpc	r22, r26
    283c:	7b 07       	cpc	r23, r27
    283e:	09 f0       	breq	.+2      	; 0x2842 <main+0x2c4>
    2840:	a4 c0       	rjmp	.+328    	; 0x298a <main+0x40c>
			{
				switch(gPacket.hdr.payload)
    2842:	80 91 19 22 	lds	r24, 0x2219
    2846:	81 30       	cpi	r24, 0x01	; 1
    2848:	09 f4       	brne	.+2      	; 0x284c <main+0x2ce>
    284a:	4a c0       	rjmp	.+148    	; 0x28e0 <main+0x362>
    284c:	30 f0       	brcs	.+12     	; 0x285a <main+0x2dc>
    284e:	89 30       	cpi	r24, 0x09	; 9
    2850:	09 f4       	brne	.+2      	; 0x2854 <main+0x2d6>
    2852:	6d c0       	rjmp	.+218    	; 0x292e <main+0x3b0>
    2854:	82 31       	cpi	r24, 0x12	; 18
    2856:	09 f0       	breq	.+2      	; 0x285a <main+0x2dc>
    2858:	96 c0       	rjmp	.+300    	; 0x2986 <main+0x408>
				{
					case PAYLOAD_SYNC:
					case PAYLOAD_SYNC_START:
					
						if(gEnv.unlockRootvanWaveUsed==true)
    285a:	80 91 fa 21 	lds	r24, 0x21FA
    285e:	81 30       	cpi	r24, 0x01	; 1
    2860:	59 f4       	brne	.+22     	; 0x2878 <main+0x2fa>
						{
							if(rssi > 128)
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	81 38       	cpi	r24, 0x81	; 129
    2866:	20 f4       	brcc	.+8      	; 0x2870 <main+0x2f2>
							{
								rssi_fixed = (((char)rssi - 256)/2) - 74;
							}
							else
							{
								rssi_fixed = ((char)rssi/2) - 74;
    2868:	86 95       	lsr	r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
							}						
							
							if(rssi_fixed < -25)
    286c:	c1 97       	sbiw	r24, 0x31	; 49
    286e:	24 f4       	brge	.+8      	; 0x2878 <main+0x2fa>
							{
								pt_data[0] = 0x0e;		//output power -20dBm
    2870:	f0 92 16 20 	sts	0x2016, r15
								cc1101_8PATABLE_write_reg();
    2874:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
								pt_data[0] = 0x34;		//output power -10dBm
								cc1101_8PATABLE_write_reg();
							}
						}
					
						sync_ack();
    2878:	0e 94 bc 08 	call	0x1178	; 0x1178 <sync_ack>
						
						if(gEnv.unlockRootvanWaveUsed == true)
    287c:	90 91 fa 21 	lds	r25, 0x21FA
    2880:	80 91 16 20 	lds	r24, 0x2016
    2884:	91 30       	cpi	r25, 0x01	; 1
    2886:	29 f4       	brne	.+10     	; 0x2892 <main+0x314>
						{
							if(pt_data[0] != 0x60)
    2888:	80 36       	cpi	r24, 0x60	; 96
    288a:	49 f0       	breq	.+18     	; 0x289e <main+0x320>
							{
								pt_data[0] = 0x60;
    288c:	00 93 16 20 	sts	0x2016, r16
    2890:	04 c0       	rjmp	.+8      	; 0x289a <main+0x31c>
								cc1101_8PATABLE_write_reg();
							}
						}
						else
						{
							if(pt_data[0] != 0xc0)
    2892:	80 3c       	cpi	r24, 0xC0	; 192
    2894:	21 f0       	breq	.+8      	; 0x289e <main+0x320>
							{
								pt_data[0] = 0xc0;
    2896:	10 93 16 20 	sts	0x2016, r17
								cc1101_8PATABLE_write_reg();
    289a:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
							}
						}
						
						//gEnv.main_set.beep_b_s_door_used = gPacket.payload[1];
						gEnv.beep_b_s_door_used = gPacket.payload[1];
    289e:	80 91 1b 22 	lds	r24, 0x221B
    28a2:	80 93 f9 21 	sts	0x21F9, r24
						gEnv.unlockRootvanWaveUsed = gPacket.payload[2];
    28a6:	80 91 1c 22 	lds	r24, 0x221C
    28aa:	80 93 fa 21 	sts	0x21FA, r24
						gEnv.door_Type = gPacket.payload[3];
    28ae:	80 91 1d 22 	lds	r24, 0x221D
    28b2:	80 93 fb 21 	sts	0x21FB, r24
						
						env_save(&gEnv);
    28b6:	8a ee       	ldi	r24, 0xEA	; 234
    28b8:	91 e2       	ldi	r25, 0x21	; 33
    28ba:	0e 94 30 03 	call	0x660	; 0x660 <env_save>
						
						if(gEnv.unlockRootvanWaveUsed == true)
    28be:	80 91 fa 21 	lds	r24, 0x21FA
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	19 f4       	brne	.+6      	; 0x28cc <main+0x34e>
						{
							//pt_data[0]=0xc8;		//Output wave power 7dBm   add 20160408
							//pt_data[0]=0x84;		//Output wave power 5dBm   add 20160408
							pt_data[0]=0x60;		//Output wave power 0dBm   add 20160408
    28c6:	00 93 16 20 	sts	0x2016, r16
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <main+0x352>
						}
						else
						{
							pt_data[0]=0xc0;		//Output wave power 10dBm   add 20160408
    28cc:	10 93 16 20 	sts	0x2016, r17
						}
						
						
						cc1101_8PATABLE_write_reg();
    28d0:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
						
						if(gPacket.hdr.payload == PAYLOAD_SYNC_START)
    28d4:	80 91 19 22 	lds	r24, 0x2219
    28d8:	82 31       	cpi	r24, 0x12	; 18
    28da:	09 f0       	breq	.+2      	; 0x28de <main+0x360>
    28dc:	54 c0       	rjmp	.+168    	; 0x2986 <main+0x408>
    28de:	ff cf       	rjmp	.-2      	; 0x28de <main+0x360>
						
					case SET_STATE:
					{
						set_t * set;
						
						if(gEnv.unlockRootvanWaveUsed==true)
    28e0:	80 91 fa 21 	lds	r24, 0x21FA
    28e4:	81 30       	cpi	r24, 0x01	; 1
    28e6:	59 f4       	brne	.+22     	; 0x28fe <main+0x380>
						{
							if(rssi > 128)
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	81 38       	cpi	r24, 0x81	; 129
    28ec:	20 f4       	brcc	.+8      	; 0x28f6 <main+0x378>
							{
								rssi_fixed = (((char)rssi - 256)/2) - 74;
							}
							else
							{
								rssi_fixed = ((char)rssi/2) - 74;
    28ee:	86 95       	lsr	r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
							}
							
							if(rssi_fixed < -25)
    28f2:	c1 97       	sbiw	r24, 0x31	; 49
    28f4:	24 f4       	brge	.+8      	; 0x28fe <main+0x380>
							{
								pt_data[0] = 0x0e;		//output power -20dBm
    28f6:	f0 92 16 20 	sts	0x2016, r15
								cc1101_8PATABLE_write_reg();
    28fa:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
								pt_data[0] = 0x34;		//output power -10dBm
								cc1101_8PATABLE_write_reg();
							}
						}
						
						set_state_ack();
    28fe:	0e 94 f7 08 	call	0x11ee	; 0x11ee <set_state_ack>

						if(gEnv.unlockRootvanWaveUsed == true)
    2902:	90 91 fa 21 	lds	r25, 0x21FA
    2906:	80 91 16 20 	lds	r24, 0x2016
    290a:	91 30       	cpi	r25, 0x01	; 1
    290c:	29 f4       	brne	.+10     	; 0x2918 <main+0x39a>
						{
							if(pt_data[0] != 0x60)
    290e:	80 36       	cpi	r24, 0x60	; 96
    2910:	49 f0       	breq	.+18     	; 0x2924 <main+0x3a6>
							{
								pt_data[0] = 0x60;
    2912:	00 93 16 20 	sts	0x2016, r16
    2916:	04 c0       	rjmp	.+8      	; 0x2920 <main+0x3a2>
								cc1101_8PATABLE_write_reg();
							}
						}
						else
						{
							if(pt_data[0] != 0xc0)
    2918:	80 3c       	cpi	r24, 0xC0	; 192
    291a:	21 f0       	breq	.+8      	; 0x2924 <main+0x3a6>
							{
								pt_data[0] = 0xc0;
    291c:	10 93 16 20 	sts	0x2016, r17
								cc1101_8PATABLE_write_reg();
    2920:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
							}
						}

						set = (set_t *)	&gPacket;
						
						set_state = set->set ;
    2924:	80 91 1a 22 	lds	r24, 0x221A
    2928:	80 93 66 21 	sts	0x2166, r24
						
						
						break;
    292c:	2c c0       	rjmp	.+88     	; 0x2986 <main+0x408>
					}
					case PAYLOAD_DOOR_OPEN_OPER:
					{

						if(gEnv.unlockRootvanWaveUsed==true)
    292e:	80 91 fa 21 	lds	r24, 0x21FA
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	59 f4       	brne	.+22     	; 0x294c <main+0x3ce>
						{
							if(rssi > 128)
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	81 38       	cpi	r24, 0x81	; 129
    293a:	20 f4       	brcc	.+8      	; 0x2944 <main+0x3c6>
							{
								rssi_fixed = (((char)rssi - 256)/2) - 74;
							}
							else
							{
								rssi_fixed = ((char)rssi/2) - 74;
    293c:	86 95       	lsr	r24
    293e:	90 e0       	ldi	r25, 0x00	; 0
							}
							
							if(rssi_fixed < -25)
    2940:	c1 97       	sbiw	r24, 0x31	; 49
    2942:	24 f4       	brge	.+8      	; 0x294c <main+0x3ce>
							{
								pt_data[0] = 0x0e;		//output power -20dBm
    2944:	f0 92 16 20 	sts	0x2016, r15
								cc1101_8PATABLE_write_reg();
    2948:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
								pt_data[0] = 0x34;		//output power -10dBm
								cc1101_8PATABLE_write_reg();
							}
						}
											
						open_ack();
    294c:	0e 94 26 09 	call	0x124c	; 0x124c <open_ack>
						
						if(gEnv.unlockRootvanWaveUsed == true)
    2950:	90 91 fa 21 	lds	r25, 0x21FA
    2954:	80 91 16 20 	lds	r24, 0x2016
    2958:	91 30       	cpi	r25, 0x01	; 1
    295a:	29 f4       	brne	.+10     	; 0x2966 <main+0x3e8>
						{
							if(pt_data[0] != 0x60)
    295c:	80 36       	cpi	r24, 0x60	; 96
    295e:	49 f0       	breq	.+18     	; 0x2972 <main+0x3f4>
							{
								pt_data[0] = 0x60;
    2960:	00 93 16 20 	sts	0x2016, r16
    2964:	04 c0       	rjmp	.+8      	; 0x296e <main+0x3f0>
								cc1101_8PATABLE_write_reg();
							}
						}
						else
						{
							if(pt_data[0] != 0xc0)
    2966:	80 3c       	cpi	r24, 0xC0	; 192
    2968:	21 f0       	breq	.+8      	; 0x2972 <main+0x3f4>
							{
								pt_data[0] = 0xc0;
    296a:	10 93 16 20 	sts	0x2016, r17
								cc1101_8PATABLE_write_reg();
    296e:	0e 94 a3 02 	call	0x546	; 0x546 <cc1101_8PATABLE_write_reg>
							}
						}						
						
						
						//if(set_state == false)
						if(gEnv.door_Type != 2)
    2972:	80 91 fb 21 	lds	r24, 0x21FB
    2976:	82 30       	cpi	r24, 0x02	; 2
    2978:	21 f0       	breq	.+8      	; 0x2982 <main+0x404>
						{
							gExternState = UNLOCK_SET;
    297a:	82 e0       	ldi	r24, 0x02	; 2
    297c:	80 93 2d 22 	sts	0x222D, r24
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <main+0x408>
						}
						else
						{
							gInternalState = UNLOCK_SET;
    2982:	80 93 06 22 	sts	0x2206, r24
						}
					}
				}
				comm_led();
    2986:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <comm_led>


			} 
		}
		cc1100_cmd_idle();
    298a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <cc1100_cmd_idle>
		

		
		{
			gEnv.door_wait_time = 20;
    298e:	e0 92 f6 21 	sts	0x21F6, r14
			//gEnv.door_unlock_time = 3;
			gEnv.door_unlock_time = 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	80 93 f3 21 	sts	0x21F3, r24
			gEnv.door_open_time = 2;
    2998:	82 e0       	ldi	r24, 0x02	; 2
    299a:	80 93 f4 21 	sts	0x21F4, r24
			gEnv.door_lock_time=0;
    299e:	10 92 f2 21 	sts	0x21F2, r1
			gEnv.door_close_time = 2;
    29a2:	80 93 f5 21 	sts	0x21F5, r24
			//gEnv.door_delay_time = 10;
			gEnv.door_delay_time = 2;
    29a6:	80 93 f7 21 	sts	0x21F7, r24
		}
				
		

		if(get_extern_door_lock() == false || get_internal_door_lock() == false)
    29aa:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    29ae:	81 11       	cpse	r24, r1
    29b0:	04 c0       	rjmp	.+8      	; 0x29ba <main+0x43c>
		{
			door_state = true; // open
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	80 93 05 22 	sts	0x2205, r24
    29b8:	06 c0       	rjmp	.+12     	; 0x29c6 <main+0x448>
			gEnv.door_delay_time = 2;
		}
				
		

		if(get_extern_door_lock() == false || get_internal_door_lock() == false)
    29ba:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    29be:	88 23       	and	r24, r24
    29c0:	c1 f3       	breq	.-16     	; 0x29b2 <main+0x434>
		{
			door_state = true; // open
		}
		else
		{
			door_state = false;
    29c2:	10 92 05 22 	sts	0x2205, r1
		}
		
		
		if(get_internal_door_lock() == false && get_extern_door_lock() == false)
    29c6:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    29ca:	81 11       	cpse	r24, r1
    29cc:	06 c0       	rjmp	.+12     	; 0x29da <main+0x45c>
    29ce:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    29d2:	81 11       	cpse	r24, r1
    29d4:	02 c0       	rjmp	.+4      	; 0x29da <main+0x45c>
		{
			set_room_light(true);	//open
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	01 c0       	rjmp	.+2      	; 0x29dc <main+0x45e>
		}
		else
		{
			set_room_light(false);	//close
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <set_room_light>
		}
		
		
		if(old_door_state != door_state || checkTwiceDoorWaitCount > -1 || devicePowerStart == true)
    29e0:	90 91 2a 22 	lds	r25, 0x222A
    29e4:	80 91 05 22 	lds	r24, 0x2205
    29e8:	98 13       	cpse	r25, r24
    29ea:	0c c0       	rjmp	.+24     	; 0x2a04 <main+0x486>
    29ec:	80 91 22 20 	lds	r24, 0x2022
    29f0:	90 91 23 20 	lds	r25, 0x2023
    29f4:	97 ff       	sbrs	r25, 7
    29f6:	06 c0       	rjmp	.+12     	; 0x2a04 <main+0x486>
    29f8:	80 91 24 20 	lds	r24, 0x2024
    29fc:	90 91 25 20 	lds	r25, 0x2025
    2a00:	01 97       	sbiw	r24, 0x01	; 1
    2a02:	39 f5       	brne	.+78     	; 0x2a52 <main+0x4d4>
		{
			buzzer_toggle = door_state;
    2a04:	80 91 05 22 	lds	r24, 0x2205
    2a08:	80 93 67 21 	sts	0x2167, r24
			if(door_state == false)
    2a0c:	80 91 05 22 	lds	r24, 0x2205
    2a10:	81 11       	cpse	r24, r1
    2a12:	09 c0       	rjmp	.+18     	; 0x2a26 <main+0x4a8>
    2a14:	8f eb       	ldi	r24, 0xBF	; 191
    2a16:	9d e5       	ldi	r25, 0x5D	; 93
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <main+0x49a>
    2a1c:	00 c0       	rjmp	.+0      	; 0x2a1e <main+0x4a0>
    2a1e:	00 00       	nop
	
}

void buzzer_on(u8 buz)
{
	set_buzzer(buz);
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    2a22:	0e 94 63 04 	call	0x8c6	; 0x8c6 <set_buzzer>
			{
				_delay_ms(3);
				buzzer_on(false);
			}
			
			if(get_extern_door_lock() == false)
    2a26:	0e 94 56 04 	call	0x8ac	; 0x8ac <get_extern_door_lock>
    2a2a:	81 11       	cpse	r24, r1
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <main+0x4b4>
				set_out_door_state_led(1);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	01 c0       	rjmp	.+2      	; 0x2a34 <main+0x4b6>
			else
				set_out_door_state_led(0);
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	0e 94 bd 04 	call	0x97a	; 0x97a <set_out_door_state_led>
				
			if(get_internal_door_lock() == false)
    2a38:	0e 94 5d 04 	call	0x8ba	; 0x8ba <get_internal_door_lock>
    2a3c:	81 11       	cpse	r24, r1
    2a3e:	02 c0       	rjmp	.+4      	; 0x2a44 <main+0x4c6>
				set_in_door_state_led(1);
    2a40:	81 e0       	ldi	r24, 0x01	; 1
    2a42:	01 c0       	rjmp	.+2      	; 0x2a46 <main+0x4c8>
			else
				set_in_door_state_led(0);
    2a44:	80 e0       	ldi	r24, 0x00	; 0
    2a46:	0e 94 c7 04 	call	0x98e	; 0x98e <set_in_door_state_led>
				
			//set_room_light(door_state);
			
			old_door_state = door_state;
    2a4a:	80 91 05 22 	lds	r24, 0x2205
    2a4e:	80 93 2a 22 	sts	0x222A, r24
		}
		
		
		
		button_check();
    2a52:	0e 94 76 12 	call	0x24ec	; 0x24ec <button_check>
		button_process();
    2a56:	0e 94 92 12 	call	0x2524	; 0x2524 <button_process>
		
		internal_process();
		#endif
		
		
		if(gEnv.door_Type == 2)
    2a5a:	80 91 fb 21 	lds	r24, 0x21FB
    2a5e:	82 30       	cpi	r24, 0x02	; 2
    2a60:	29 f4       	brne	.+10     	; 0x2a6c <main+0x4ee>
		{
			extern_process_doorCheck();
    2a62:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <extern_process_doorCheck>
			internal_process_doorLock();
    2a66:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <internal_process_doorLock>
    2a6a:	04 c0       	rjmp	.+8      	; 0x2a74 <main+0x4f6>
		}
		else
		{
			extern_process_doorLock();
    2a6c:	0e 94 b9 0c 	call	0x1972	; 0x1972 <extern_process_doorLock>
			internal_process_doorCheck();
    2a70:	0e 94 48 11 	call	0x2290	; 0x2290 <internal_process_doorCheck>
		}
		
		
		
		
		if(test_mode == 0x0d || test_mode == 0x0e)
    2a74:	80 91 2c 22 	lds	r24, 0x222C
    2a78:	8d 30       	cpi	r24, 0x0D	; 13
    2a7a:	29 f0       	breq	.+10     	; 0x2a86 <main+0x508>
    2a7c:	80 91 2c 22 	lds	r24, 0x222C
    2a80:	8e 30       	cpi	r24, 0x0E	; 14
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <main+0x508>
    2a84:	25 ce       	rjmp	.-950    	; 0x26d0 <main+0x152>
		{
			test_wave_mode(test_mode);
    2a86:	80 91 2c 22 	lds	r24, 0x222C
    2a8a:	0e 94 1d 0a 	call	0x143a	; 0x143a <test_wave_mode>

00002a8e <__udivmodhi4>:
    2a8e:	aa 1b       	sub	r26, r26
    2a90:	bb 1b       	sub	r27, r27
    2a92:	51 e1       	ldi	r21, 0x11	; 17
    2a94:	07 c0       	rjmp	.+14     	; 0x2aa4 <__udivmodhi4_ep>

00002a96 <__udivmodhi4_loop>:
    2a96:	aa 1f       	adc	r26, r26
    2a98:	bb 1f       	adc	r27, r27
    2a9a:	a6 17       	cp	r26, r22
    2a9c:	b7 07       	cpc	r27, r23
    2a9e:	10 f0       	brcs	.+4      	; 0x2aa4 <__udivmodhi4_ep>
    2aa0:	a6 1b       	sub	r26, r22
    2aa2:	b7 0b       	sbc	r27, r23

00002aa4 <__udivmodhi4_ep>:
    2aa4:	88 1f       	adc	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	5a 95       	dec	r21
    2aaa:	a9 f7       	brne	.-22     	; 0x2a96 <__udivmodhi4_loop>
    2aac:	80 95       	com	r24
    2aae:	90 95       	com	r25
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	08 95       	ret

00002ab6 <__tablejump2__>:
    2ab6:	ee 0f       	add	r30, r30
    2ab8:	ff 1f       	adc	r31, r31

00002aba <__tablejump__>:
    2aba:	05 90       	lpm	r0, Z+
    2abc:	f4 91       	lpm	r31, Z
    2abe:	e0 2d       	mov	r30, r0
    2ac0:	09 94       	ijmp

00002ac2 <__eerd_block_x64a3u>:
    2ac2:	e0 ec       	ldi	r30, 0xC0	; 192
    2ac4:	f1 e0       	ldi	r31, 0x01	; 1
    2ac6:	a7 85       	ldd	r26, Z+15	; 0x0f
    2ac8:	a7 fd       	sbrc	r26, 7
    2aca:	fd cf       	rjmp	.-6      	; 0x2ac6 <__eerd_block_x64a3u+0x4>
    2acc:	a4 85       	ldd	r26, Z+12	; 0x0c
    2ace:	a8 60       	ori	r26, 0x08	; 8
    2ad0:	a4 87       	std	Z+12, r26	; 0x0c
    2ad2:	60 50       	subi	r22, 0x00	; 0
    2ad4:	70 4f       	sbci	r23, 0xF0	; 240
    2ad6:	0c 94 bb 15 	jmp	0x2b76	; 0x2b76 <memcpy>

00002ada <__eerd_byte_x64a3u>:
    2ada:	03 d0       	rcall	.+6      	; 0x2ae2 <eeprom_mapen>
    2adc:	80 81       	ld	r24, Z
    2ade:	99 27       	eor	r25, r25
    2ae0:	08 95       	ret

00002ae2 <eeprom_mapen>:
    2ae2:	e0 ec       	ldi	r30, 0xC0	; 192
    2ae4:	f1 e0       	ldi	r31, 0x01	; 1
    2ae6:	37 85       	ldd	r19, Z+15	; 0x0f
    2ae8:	37 fd       	sbrc	r19, 7
    2aea:	fd cf       	rjmp	.-6      	; 0x2ae6 <eeprom_mapen+0x4>
    2aec:	34 85       	ldd	r19, Z+12	; 0x0c
    2aee:	38 60       	ori	r19, 0x08	; 8
    2af0:	34 87       	std	Z+12, r19	; 0x0c
    2af2:	fc 01       	movw	r30, r24
    2af4:	e0 50       	subi	r30, 0x00	; 0
    2af6:	f0 4f       	sbci	r31, 0xF0	; 240
    2af8:	08 95       	ret

00002afa <__eeupd_block_x64a3u>:
    2afa:	dc 01       	movw	r26, r24
    2afc:	a4 0f       	add	r26, r20
    2afe:	b5 1f       	adc	r27, r21
    2b00:	41 50       	subi	r20, 0x01	; 1
    2b02:	50 40       	sbci	r21, 0x00	; 0
    2b04:	48 f0       	brcs	.+18     	; 0x2b18 <__eeupd_block_x64a3u+0x1e>
    2b06:	cb 01       	movw	r24, r22
    2b08:	84 0f       	add	r24, r20
    2b0a:	95 1f       	adc	r25, r21
    2b0c:	2e 91       	ld	r18, -X
    2b0e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__eeupd_r18_x64a3u>
    2b12:	41 50       	subi	r20, 0x01	; 1
    2b14:	50 40       	sbci	r21, 0x00	; 0
    2b16:	d0 f7       	brcc	.-12     	; 0x2b0c <__eeupd_block_x64a3u+0x12>
    2b18:	08 95       	ret

00002b1a <__eeupd_byte_x64a3u>:
    2b1a:	26 2f       	mov	r18, r22

00002b1c <__eeupd_r18_x64a3u>:
    2b1c:	0e 94 71 15 	call	0x2ae2	; 0x2ae2 <eeprom_mapen>
    2b20:	00 80       	ld	r0, Z
    2b22:	02 16       	cp	r0, r18
    2b24:	19 f0       	breq	.+6      	; 0x2b2c <__eeupd_r18_x64a3u+0x10>
    2b26:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__eewr_r18_x64a3u>
    2b2a:	01 97       	sbiw	r24, 0x01	; 1
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	08 95       	ret

00002b30 <__eewr_byte_x64a3u>:
    2b30:	26 2f       	mov	r18, r22

00002b32 <__eewr_r18_x64a3u>:
    2b32:	e0 ec       	ldi	r30, 0xC0	; 192
    2b34:	f1 e0       	ldi	r31, 0x01	; 1
    2b36:	37 85       	ldd	r19, Z+15	; 0x0f
    2b38:	37 fd       	sbrc	r19, 7
    2b3a:	fd cf       	rjmp	.-6      	; 0x2b36 <__eewr_r18_x64a3u+0x4>
    2b3c:	34 85       	ldd	r19, Z+12	; 0x0c
    2b3e:	37 7f       	andi	r19, 0xF7	; 247
    2b40:	34 87       	std	Z+12, r19	; 0x0c
    2b42:	37 85       	ldd	r19, Z+15	; 0x0f
    2b44:	31 ff       	sbrs	r19, 1
    2b46:	09 c0       	rjmp	.+18     	; 0x2b5a <__eewr_r18_x64a3u+0x28>
    2b48:	36 e3       	ldi	r19, 0x36	; 54
    2b4a:	32 87       	std	Z+10, r19	; 0x0a
    2b4c:	38 ed       	ldi	r19, 0xD8	; 216
    2b4e:	34 bf       	out	0x34, r19	; 52
    2b50:	31 e0       	ldi	r19, 0x01	; 1
    2b52:	33 87       	std	Z+11, r19	; 0x0b
    2b54:	37 85       	ldd	r19, Z+15	; 0x0f
    2b56:	37 fd       	sbrc	r19, 7
    2b58:	fd cf       	rjmp	.-6      	; 0x2b54 <__eewr_r18_x64a3u+0x22>
    2b5a:	33 e3       	ldi	r19, 0x33	; 51
    2b5c:	32 87       	std	Z+10, r19	; 0x0a
    2b5e:	80 83       	st	Z, r24
    2b60:	91 83       	std	Z+1, r25	; 0x01
    2b62:	12 82       	std	Z+2, r1	; 0x02
    2b64:	24 83       	std	Z+4, r18	; 0x04
    2b66:	25 e3       	ldi	r18, 0x35	; 53
    2b68:	22 87       	std	Z+10, r18	; 0x0a
    2b6a:	28 ed       	ldi	r18, 0xD8	; 216
    2b6c:	31 e0       	ldi	r19, 0x01	; 1
    2b6e:	24 bf       	out	0x34, r18	; 52
    2b70:	33 87       	std	Z+11, r19	; 0x0b
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	08 95       	ret

00002b76 <memcpy>:
    2b76:	fb 01       	movw	r30, r22
    2b78:	dc 01       	movw	r26, r24
    2b7a:	02 c0       	rjmp	.+4      	; 0x2b80 <memcpy+0xa>
    2b7c:	01 90       	ld	r0, Z+
    2b7e:	0d 92       	st	X+, r0
    2b80:	41 50       	subi	r20, 0x01	; 1
    2b82:	50 40       	sbci	r21, 0x00	; 0
    2b84:	d8 f7       	brcc	.-10     	; 0x2b7c <memcpy+0x6>
    2b86:	08 95       	ret

00002b88 <_exit>:
    2b88:	f8 94       	cli

00002b8a <__stop_program>:
    2b8a:	ff cf       	rjmp	.-2      	; 0x2b8a <__stop_program>
